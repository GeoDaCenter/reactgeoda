{"version":3,"file":"static/chunks/main-app-3219343edd93b4fa.js","mappings":"wbCAAA,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,WACAH,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,WACAH,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,UACAH,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,WACAH,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,WACAH,QAAAC,OAAA,GAAAC,IAAA,CAAAC,EAAAC,CAAA,CAAAC,IAAA,CAAAF,EAAA,mFCLAG,CAAAA,WAAW,4BAA+B,CAAGC,KAAAA,EAC7CD,WAAW,cAAiB,CAAG,CAAC,GAAK,uBAAuB,EAC5DA,WAAW,gBAAmB,CAAGC,KAAAA,EACjCD,WAAW,gCAAmC,CAAG,GAGjDE,EAAAA,EAAW,CAAC,CACVC,IAAK,kGACLC,WAAAA,CAAWC,EAAOC,KAEZD,EAAME,SAAS,EAAIF,EAAMG,QAAQ,EACnCN,EAAAA,EAAuB,CAAC,CAACO,QAASJ,EAAMG,QAAQ,GAE3CH,GAGTK,aAAc,CACZR,EAAAA,CAA0B,CAAC,CAEzBS,YAAa,QACf,GACD,CAKDC,iBAAkB,EAIlBC,yBAA0B,GAC1BC,yBAA0B,CAO5B","sources":["webpack://_N_E/ignored|/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/shared/lib/router|./utils/resolve-rewrites","webpack://_N_E/?358b","webpack://_N_E/./sentry.client.config.ts","webpack://_N_E/<anon>"],"sourcesContent":["/* (ignored) */","import(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/app-router.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/error-boundary.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/layout-router.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/not-found-boundary.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/render-from-template-context.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/xun/github/reactgeoda/geoda-ai/node_modules/next/dist/client/components/static-generation-searchparams-bailout-provider.js\")","globalThis[\"__sentryRewritesTunnelPath__\"] = undefined;\nglobalThis[\"SENTRY_RELEASE\"] = {\"id\":\"hUDzQfgRujtRPDf0Xaw6u\"};\nglobalThis[\"__sentryBasePath\"] = undefined;\nglobalThis[\"__rewriteFramesAssetPrefixPath__\"] = \"\";\nimport * as Sentry from '@sentry/nextjs';\n\nSentry.init({\n  dsn: 'https://a2f3a0fb7afcb544f2d58e5a79caa61b@o4505318856654848.ingest.us.sentry.io/4505840295477248',\n  beforeSend(event, hint) {\n    // Check if it is an exception, and if so, show the report dialog\n    if (event.exception && event.event_id) {\n      Sentry.showReportDialog({eventId: event.event_id});\n    }\n    return event;\n  },\n  // Replay may only be enabled for the client-side\n  integrations: [\n    Sentry.feedbackIntegration({\n      // Additional SDK configuration goes in here, for example:\n      colorScheme: 'system'\n    })\n  ],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for tracing.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n\n  // Capture Replay for 10% of all sessions,\n  // plus for 100% of sessions with an error\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1.0\n\n  // ...\n\n  // Note: if you want to override the automatic release value, do not set a\n  // `release` value here - use the environment variable `SENTRY_RELEASE`, so\n  // that it will also get attached to your source maps\n});\n"],"names":["Promise","resolve","then","__webpack_require__","t","bind","globalThis","undefined","Sentry","dsn","beforeSend","event","hint","exception","event_id","eventId","integrations","colorScheme","tracesSampleRate","replaysSessionSampleRate","replaysOnErrorSampleRate"],"sourceRoot":""}