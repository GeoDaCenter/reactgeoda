{"version":3,"file":"static/chunks/427.65dfe8c4bc1fc18e.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/rate-component.tsx","webpack://_N_E/./src/components/common/dataset-variable-selector.tsx","webpack://_N_E/./src/components/common/classification-panel.tsx","webpack://_N_E/./src/components/mapping/mapping-panel.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {RatesOptions} from 'geoda-wasm';\nimport {Select, SelectItem, Selection} from '@nextui-org/react';\nimport {VariableSelector} from './variable-selector';\nimport {WeightsSelector} from '../weights/weights-management';\nimport {useSelector} from 'react-redux';\nimport {GeoDaState} from '@/store';\nimport {DatasetSelector} from './dataset-selector';\n\nexport type RateUIProps = {\n  props: {\n    ratesMethod: RatesOptions;\n    setRatesMethod: (ratesMethod: RatesOptions) => void;\n    datasetId: string;\n    setDatasetId: (datasetId: string) => void;\n    eventVariable: string;\n    setEventVariable: (eventVariable: string) => void;\n    baseVariable: string;\n    setBaseVariable: (baseVariable: string) => void;\n    weightsId: string;\n    setWeightsId: (weightsId: string) => void;\n  };\n};\n\nexport function RateUIComponent({props}: RateUIProps) {\n  const {\n    ratesMethod,\n    setRatesMethod,\n    datasetId,\n    setDatasetId,\n    eventVariable,\n    setEventVariable,\n    baseVariable,\n    setBaseVariable,\n    weightsId,\n    setWeightsId\n  } = props;\n\n  const weights = useSelector((state: GeoDaState) => state.root.weights);\n\n  const onEventVariableChange = (variable: string) => {\n    setEventVariable(variable);\n  };\n\n  const onBaseVariableChange = (variable: string) => {\n    setBaseVariable(variable);\n  };\n\n  const onMethodChange = (keys: Selection) => {\n    // @ts-expect-error - TS doesn't know that keys is a Selection\n    const selectedMethod = keys.currentKey;\n    setRatesMethod(selectedMethod);\n  };\n\n  // handle weights selection change\n  const onWeightsSelectionChange = (id: string) => {\n    setWeightsId(id);\n  };\n\n  const onDatasetIdSelect = (datasetId: string) => {\n    // set datasetId\n    setDatasetId(datasetId);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <Select\n        label=\"Method\"\n        size=\"sm\"\n        onSelectionChange={onMethodChange}\n        defaultSelectedKeys={[Object.values(RatesOptions)[0]]}\n      >\n        {Object.values(RatesOptions).map(option => (\n          <SelectItem key={option} value={option}>\n            {option}\n          </SelectItem>\n        ))}\n      </Select>\n      <DatasetSelector datasetId={datasetId} setDatasetId={onDatasetIdSelect} />\n      <VariableSelector\n        dataId={datasetId}\n        setVariable={onEventVariableChange}\n        label=\"Event Variable\"\n        size=\"sm\"\n        defaultVariable={eventVariable}\n      />\n      <VariableSelector\n        dataId={datasetId}\n        setVariable={onBaseVariableChange}\n        label=\"Base Variable\"\n        size=\"sm\"\n        defaultVariable={baseVariable}\n      />\n      {ratesMethod.startsWith('Spatial') && (\n        <WeightsSelector\n          weights={weights}\n          weightsId={weightsId}\n          onSelectWeights={onWeightsSelectionChange}\n        />\n      )}\n    </div>\n  );\n}\n","import {selectKeplerDataset, datasetsSelector} from '@/store/selectors';\nimport {Autocomplete, AutocompleteItem} from '@nextui-org/react';\nimport {Key, useMemo} from 'react';\nimport {useSelector} from 'react-redux';\nimport {getFieldNames, VARIABLE_TYPE} from './variable-selector';\n\nexport type onDatasetVariableSelectionChangeProps = {\n  dataId?: string;\n  variable?: string;\n};\n\ntype DatasetVariableSelectorProps = {\n  datasetId: string;\n  setDatasetId: (datasetId: string) => void;\n  variable: string;\n  setVariable: (variable: string) => void;\n  variableType?: VARIABLE_TYPE;\n  onSelectionChange: ({dataId, variable}: onDatasetVariableSelectionChangeProps) => void;\n  datasetLabel?: string;\n  variableLabel?: string;\n  size?: 'sm' | 'md' | 'lg';\n};\n\nexport function DatasetVariableSelector({\n  datasetId,\n  setDatasetId,\n  variable,\n  setVariable,\n  variableType = VARIABLE_TYPE.Numeric,\n  onSelectionChange,\n  datasetLabel,\n  variableLabel,\n  size\n}: DatasetVariableSelectorProps) {\n  const datasets = useSelector(datasetsSelector);\n\n  const keplerDataset = useSelector(selectKeplerDataset(datasetId));\n\n  // get numeric columns\n  const columnNames = useMemo(\n    () => getFieldNames(keplerDataset, variableType),\n    [keplerDataset, variableType]\n  );\n\n  // handle variable change\n  const onVariableSelectionChange = (value: Key) => {\n    const selectValue = value as string;\n    onSelectionChange({variable: selectValue, dataId: keplerDataset?.id});\n    setVariable(selectValue);\n  };\n\n  const onDatasetSelectionChange = (value: Key) => {\n    const selectValue = value as string;\n    onSelectionChange({dataId: selectValue, variable});\n    setDatasetId(selectValue);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Autocomplete\n        label={datasetLabel || 'Select a dataset'}\n        className=\"max-w\"\n        onSelectionChange={onDatasetSelectionChange}\n        size={size || 'md'}\n        selectedKey={keplerDataset.id}\n        isInvalid={!keplerDataset || keplerDataset.id.length === 0}\n      >\n        {datasets?.map((d, i) => (\n          <AutocompleteItem key={d.dataId || i} value={d.dataId}>\n            {d.fileName}\n          </AutocompleteItem>\n        ))}\n      </Autocomplete>\n      <Autocomplete\n        label={variableLabel || 'Select a variable'}\n        className=\"max-w\"\n        onSelectionChange={onVariableSelectionChange}\n        size={size || 'md'}\n        selectedKey={variable}\n        isInvalid={!variable || variable.length === 0}\n      >\n        {columnNames.map(column => (\n          <AutocompleteItem key={column} value={column}>\n            {column}\n          </AutocompleteItem>\n        ))}\n      </Autocomplete>\n    </div>\n  );\n}\n","import {MappingTypes} from '@/constants';\nimport {ColorSelector} from './color-selector';\nimport {Select, SelectItem, Tab, Tabs} from '@nextui-org/react';\nimport {ColorRange} from '@kepler.gl/constants';\nimport {RateUIComponent, RateUIProps} from './rate-component';\nimport {findColorRange} from '@/utils/color-utils';\nimport {\n  DatasetVariableSelector,\n  onDatasetVariableSelectionChangeProps\n} from './dataset-variable-selector';\nimport {RatesOptions} from 'geoda-wasm';\nimport {Key} from 'react';\n\nexport const ClassificationTypes = [\n  {\n    label: 'Quantile',\n    value: MappingTypes.QUANTILE\n  },\n  {\n    label: 'Natural Breaks',\n    value: MappingTypes.NATURAL_BREAK\n  },\n  {\n    label: 'Equal Interval',\n    value: MappingTypes.EQUAL_INTERVAL\n  },\n  {\n    label: 'Percentile',\n    value: MappingTypes.PERCENTILE\n  },\n  {\n    label: 'Box (Hinge=1.5)',\n    value: MappingTypes.BOX_MAP_15\n  },\n  {\n    label: 'Box (Hinge=3.0)',\n    value: MappingTypes.BOX_MAP_30\n  },\n  {\n    label: 'Standard Deviation',\n    value: MappingTypes.STD_MAP\n  },\n  {\n    label: 'Unique Values',\n    value: MappingTypes.UNIQUE_VALUES\n  },\n  {\n    label: 'Co-location',\n    value: MappingTypes.COLOCATION,\n    disabled: true\n  }\n];\n\n// create an array from 2 to 20\nconst DefaultNumberOfCategories = Array.from({length: 19}, (_, i) => i + 2).map(i => ({\n  label: `${i}`,\n  value: i\n}));\n\nexport type ClassificationOnValuesChange = {\n  datasetId: string;\n  method: MappingTypes;\n  k: number;\n  variable?: string;\n  eventVariable?: string;\n  baseVariable?: string;\n  ratesMethod?: RatesOptions;\n  weightsId?: string;\n  colorRange?: ColorRange;\n};\n\nexport type ClassificationPanelProps = {\n  props: {\n    k: number;\n    setK: (k: number) => void;\n    variable: string;\n    setVariable: (variable: string) => void;\n    mappingType: MappingTypes;\n    setMappingType: (mappingType: MappingTypes) => void;\n    selectedColorRange: ColorRange;\n    setSelectedColorRange: (colorRange: ColorRange) => void;\n    setIsRatesMap?: (isRatesMap: boolean) => void;\n  } & RateUIProps['props'];\n};\n\n// It will be used in the Map Panel component and Bubble Chart component\nexport function ClassificationPanel({props}: ClassificationPanelProps) {\n  const {\n    k,\n    setK,\n    datasetId,\n    setDatasetId,\n    variable,\n    setVariable,\n    mappingType,\n    setMappingType,\n    eventVariable,\n    setEventVariable,\n    baseVariable,\n    setBaseVariable,\n    weightsId,\n    setWeightsId,\n    ratesMethod,\n    setRatesMethod,\n    selectedColorRange,\n    setSelectedColorRange,\n    setIsRatesMap\n  } = props;\n\n  // handle map type change\n  const onMapTypeChange = (value: any) => {\n    const selectValue = value.currentKey;\n    setMappingType(selectValue);\n  };\n\n  // handle number of bins change\n  const onKSelectionChange = (value: any) => {\n    const kValue = Number(value.currentKey);\n    setK(kValue);\n    // get color range based on k value when number of bins change\n    const newColorRange = findColorRange(kValue, selectedColorRange);\n    setSelectedColorRange(newColorRange);\n  };\n\n  // handle color range selection change\n  const onSelectColorRange = (p: ColorRange) => {\n    setSelectedColorRange(p);\n  };\n\n  const onDatasetVariableSelectionChange = ({\n    variable,\n    dataId\n  }: onDatasetVariableSelectionChangeProps) => {\n    setVariable(variable || '');\n    setDatasetId(dataId || '');\n  };\n\n  const onSelectionChange = (key: Key) => {\n    setIsRatesMap?.(key === 'rate-mapping');\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Tabs\n        key=\"classification-panel-tabs\"\n        variant=\"underlined\"\n        aria-label=\"classification-tabs\"\n        onSelectionChange={onSelectionChange}\n      >\n        <Tab key=\"basic-mapping\" title=\"Basic Mapping\">\n          <DatasetVariableSelector\n            datasetId={datasetId}\n            setDatasetId={setDatasetId}\n            variable={variable}\n            setVariable={setVariable}\n            onSelectionChange={onDatasetVariableSelectionChange}\n          />\n        </Tab>\n        <Tab key=\"rate-mapping\" title=\"Rate Mapping\">\n          <RateUIComponent\n            props={{\n              ratesMethod,\n              setRatesMethod,\n              datasetId,\n              setDatasetId,\n              eventVariable,\n              setEventVariable,\n              baseVariable,\n              setBaseVariable,\n              weightsId,\n              setWeightsId\n            }}\n          />\n        </Tab>\n      </Tabs>\n      <Select\n        label=\"Classification Method\"\n        className=\"max-w\"\n        onSelectionChange={onMapTypeChange}\n        selectedKeys={[mappingType]}\n        disabledKeys={ClassificationTypes.filter(t => t.disabled).map(t => t.value)}\n      >\n        {ClassificationTypes.map(mappingType => (\n          <SelectItem key={mappingType.value} value={mappingType.value}>\n            {mappingType.label}\n          </SelectItem>\n        ))}\n      </Select>\n      <Select\n        label=\"Number of Categories\"\n        className=\"max-w\"\n        onSelectionChange={onKSelectionChange}\n        selectedKeys={[`${k}`]}\n      >\n        {DefaultNumberOfCategories.map(bin => (\n          <SelectItem key={bin.value} value={bin.value}>\n            {bin.label}\n          </SelectItem>\n        ))}\n      </Select>\n      <ColorSelector\n        numberOfColors={k}\n        defaultColorRange={selectedColorRange?.name}\n        onSelectColorRange={onSelectColorRange}\n      />\n    </div>\n  );\n}\n","import {useIntl} from 'react-intl';\nimport {Tabs, Tab, Card, CardBody, Spacer, CardHeader} from '@nextui-org/react';\nimport {useMemo, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n  appInjector,\n  DndContextFactory,\n  KeplerGlContext,\n  LayerListFactory,\n  DatasetSectionFactory,\n  makeGetActionCreators,\n  MapManagerFactory,\n  TooltipConfigFactory\n} from '@kepler.gl/components';\nimport {LayerClasses} from '@kepler.gl/layers';\nimport {GeoDaState} from '@/store';\nimport {MAP_ID, MappingTypes} from '@/constants';\nimport {WarningBox, WarningType} from '../common/warning-box';\nimport {RightPanelContainer} from '../common/right-panel-template';\nimport {interactionConfigChange, updateTableColor, wrapTo} from '@kepler.gl/actions';\nimport {SIDEBAR_PANELS} from '@kepler.gl/constants';\nimport {getDefaultColorRange} from '@/utils/color-utils';\nimport {ClassificationPanel} from '../common/classification-panel';\nimport {CreateButton} from '../common/create-button';\nimport {createMapAsync, createRatesMapAsync} from '@/actions';\nimport {RatesOptions} from 'geoda-wasm';\nimport {RGBColor} from '@kepler.gl/types';\nimport {defaultDatasetIdSelector} from '@/store/selectors';\n// import {DndContext} from '@dnd-kit/core';\n\nconst DatasetSection = appInjector.get(DatasetSectionFactory);\nconst LayerList = appInjector.get(LayerListFactory);\nconst MapManager = appInjector.get(MapManagerFactory);\nconst DndContext = appInjector.get(DndContextFactory);\nconst TooltipConfig = appInjector.get(TooltipConfigFactory);\n\nconst NO_MAP_LOADED_MESSAGE = 'Please load a map first before creating and managing your maps.';\n\nfunction MappingPanel() {\n  const intl = useIntl();\n  const dispatch = useDispatch<any>();\n\n  // get kepler actions\n  const dispatchKepler = (action: any) => dispatch(wrapTo(MAP_ID, action));\n  const keplerActionSelector = makeGetActionCreators();\n  const keplerOwnProps = {};\n  const {visStateActions, uiStateActions, mapStyleActions} = keplerActionSelector(\n    dispatchKepler,\n    keplerOwnProps\n  );\n\n  // get datasets from redux store\n  const datasets = useSelector((state: GeoDaState) => state.keplerGl[MAP_ID]?.visState?.datasets);\n  const layers = useSelector((state: GeoDaState) => state.keplerGl[MAP_ID]?.visState?.layers);\n  const interactionConfig = useSelector(\n    (state: GeoDaState) => state.keplerGl[MAP_ID]?.visState?.interactionConfig\n  );\n  const layerOrder = useSelector(\n    (state: GeoDaState) => state.keplerGl[MAP_ID]?.visState?.layerOrder\n  );\n\n  // get default datasetId\n  const defaultDatasetId = useSelector(defaultDatasetIdSelector);\n  const [datasetId, setDatasetId] = useState(defaultDatasetId);\n\n  // get mapStyle from redux store\n  const mapStyle = useSelector((state: GeoDaState) => state.keplerGl[MAP_ID]?.mapStyle);\n\n  // handle classification config changes\n  const [isRatesMap, setIsRatesMap] = useState(false);\n  const [k, setK] = useState(5);\n  const [variable, setVariable] = useState('');\n  const [baseVariable, setBaseVariable] = useState('');\n  const [eventVariable, setEventVariable] = useState('');\n  const [weightsId, setWeightsId] = useState('');\n  const [mappingType, setMappingType] = useState(MappingTypes.QUANTILE);\n  const [selectedColorRange, setSelectedColorRange] = useState(getDefaultColorRange(k));\n  const [ratesMethod, setRatesMethod] = useState(RatesOptions.RawRates);\n\n  // handle onCreateMap\n  const onCreateMap = async () => {\n    if (!datasetId) {\n      return;\n    }\n\n    if (isRatesMap === false) {\n      dispatch(\n        createMapAsync({\n          dataId: datasetId,\n          variable,\n          classficationMethod: mappingType,\n          numberOfCategories: k,\n          colorRange: selectedColorRange\n        })\n      );\n    } else if (\n      eventVariable &&\n      baseVariable &&\n      eventVariable.length > 0 &&\n      baseVariable.length > 0 &&\n      ratesMethod &&\n      ratesMethod.length > 0\n    ) {\n      dispatch(\n        createRatesMapAsync({\n          dataId: datasetId,\n          method: ratesMethod,\n          eventVariable,\n          baseVariable,\n          classficationMethod: mappingType,\n          numberOfCategories: k,\n          colorRange: selectedColorRange,\n          weightsId\n        })\n      );\n    }\n  };\n\n  const isCreateButtonDisabled = useMemo(() => {\n    if (isRatesMap) {\n      return !baseVariable || !eventVariable || !mappingType || k <= 0;\n    }\n    return !variable || !mappingType || k <= 0;\n  }, [isRatesMap, baseVariable, eventVariable, variable, mappingType, k]);\n\n  const onUpdateDatasetColor = (datasetId: string, color: RGBColor) => {\n    dispatch(updateTableColor(datasetId, color));\n  };\n\n  const onInteractionConfigChange = (newConfig: any) => {\n    console.log(newConfig);\n    dispatch(\n      interactionConfigChange({\n        ...interactionConfig.tooltip,\n        config: {\n          ...interactionConfig.tooltip.config,\n          ...newConfig\n        }\n      })\n    );\n  };\n\n  return (\n    <RightPanelContainer\n      title={intl.formatMessage({\n        id: 'mapping.title',\n        defaultMessage: 'Map'\n      })}\n      description={intl.formatMessage({\n        id: 'mapping.description',\n        defaultMessage: 'Create and manage your maps'\n      })}\n      icon={null}\n    >\n      {datasets.length === 0 ? (\n        <WarningBox message={NO_MAP_LOADED_MESSAGE} type={WarningType.WARNING} />\n      ) : (\n        <div className=\"h-full overflow-y-auto p-4\">\n          <Tabs aria-label=\"Options\" variant=\"solid\" color=\"danger\" classNames={{}} size=\"md\">\n            <Tab\n              key=\"map-creation\"\n              title={\n                <div className=\"flex items-center space-x-2\">\n                  <span>Add Map</span>\n                </div>\n              }\n            >\n              <Card>\n                <CardBody>\n                  <div className=\"flex flex-col gap-2\">\n                    <ClassificationPanel\n                      props={{\n                        k,\n                        setK,\n                        datasetId,\n                        setDatasetId,\n                        variable,\n                        setVariable,\n                        mappingType,\n                        setMappingType,\n                        ratesMethod,\n                        setRatesMethod,\n                        selectedColorRange,\n                        setSelectedColorRange,\n                        weightsId,\n                        setWeightsId,\n                        baseVariable,\n                        setBaseVariable,\n                        eventVariable,\n                        setEventVariable,\n                        setIsRatesMap\n                      }}\n                    />\n                    <Spacer y={2} />\n                    <CreateButton onClick={onCreateMap} isDisabled={isCreateButtonDisabled}>\n                      Create a New Map Layer\n                    </CreateButton>\n                  </div>\n                </CardBody>\n              </Card>\n            </Tab>\n            <Tab\n              key=\"map-layers\"\n              title={\n                <div className=\"flex items-center space-x-2\">\n                  <span>Manage Maps</span>\n                </div>\n              }\n            >\n              <Card>\n                <CardBody className=\"flex flex-col gap-4\">\n                  <KeplerGlContext.Provider\n                    value={{id: MAP_ID, selector: state => state.keplerGl[MAP_ID]}}\n                  >\n                    <Card>\n                      <CardBody>\n                        <DatasetSection\n                          datasets={datasets}\n                          showDatasetTable={false}\n                          showDeleteDataset={true}\n                          updateTableColor={onUpdateDatasetColor}\n                          removeDataset={uiStateActions.openDeleteModal}\n                          showDatasetList={true}\n                          showAddDataModal={uiStateActions.showAddDataModal}\n                        />\n                      </CardBody>\n                    </Card>\n                    <Card>\n                      <CardHeader>\n                        <p className=\"text-tiny tracking-[1.25px] text-[#A0A7B4] dark:text-[#6A7485]\">\n                          Layers\n                        </p>\n                      </CardHeader>\n                      <CardBody>\n                        <DndContext>\n                          <LayerList\n                            datasets={datasets}\n                            layers={layers}\n                            layerOrder={layerOrder}\n                            layerClasses={LayerClasses}\n                            uiStateActions={uiStateActions}\n                            visStateActions={visStateActions}\n                          />\n                        </DndContext>\n                      </CardBody>\n                    </Card>\n                    <Card>\n                      <CardHeader>\n                        <p className=\"text-tiny tracking-[1.25px] text-[#A0A7B4] dark:text-[#6A7485]\">\n                          Tooltip\n                        </p>\n                      </CardHeader>\n                      <CardBody>\n                        <TooltipConfig\n                          datasets={datasets}\n                          config={interactionConfig.tooltip.config}\n                          onChange={onInteractionConfigChange}\n                          onDisplayFormatChange={visStateActions.setColumnDisplayFormat}\n                        />\n                      </CardBody>\n                    </Card>\n                  </KeplerGlContext.Provider>\n                </CardBody>\n              </Card>\n            </Tab>\n            <Tab\n              key=\"basemap\"\n              title={\n                <div className=\"flex items-center space-x-2\">\n                  <span>Basemap</span>\n                </div>\n              }\n            >\n              <Card>\n                <CardBody>\n                  <MapManager\n                    mapStyle={mapStyle}\n                    mapStyleActions={mapStyleActions}\n                    panelMetadata={SIDEBAR_PANELS[3]}\n                  />\n                </CardBody>\n              </Card>\n            </Tab>\n          </Tabs>\n        </div>\n      )}\n    </RightPanelContainer>\n  );\n}\n\nexport default MappingPanel;\n"],"names":["RateUIComponent","param","props","ratesMethod","setRatesMethod","datasetId","setDatasetId","eventVariable","setEventVariable","baseVariable","setBaseVariable","weightsId","setWeightsId","weights","useSelector","state","root","jsx_runtime","jsxs","div","className","jsx","Select","label","size","onSelectionChange","keys","currentKey","defaultSelectedKeys","Object","values","RatesOptions","map","option","SelectItem","value","DatasetSelector","VariableSelector","dataId","setVariable","variable","defaultVariable","startsWith","WeightsSelector","onSelectWeights","id","DatasetVariableSelector","variableType","VARIABLE_TYPE","Numeric","datasetLabel","variableLabel","datasets","datasetsSelector","keplerDataset","selectKeplerDataset","columnNames","useMemo","getFieldNames","Autocomplete","selectedKey","isInvalid","length","d","i","AutocompleteItem","fileName","column","ClassificationTypes","MappingTypes","QUANTILE","NATURAL_BREAK","EQUAL_INTERVAL","PERCENTILE","BOX_MAP_15","BOX_MAP_30","STD_MAP","UNIQUE_VALUES","COLOCATION","disabled","DefaultNumberOfCategories","Array","from","_","concat","ClassificationPanel","k","setK","mappingType","setMappingType","selectedColorRange","setSelectedColorRange","setIsRatesMap","Tabs","variant","aria-label","key","Tab","title","selectedKeys","disabledKeys","filter","t","kValue","Number","findColorRange","bin","ColorSelector","numberOfColors","defaultColorRange","name","onSelectColorRange","p","DatasetSection","appInjector","get","DatasetSectionFactory","LayerList","LayerListFactory","MapManager","MapManagerFactory","DndContext","DndContextFactory","TooltipConfig","TooltipConfigFactory","mapping_panel","intl","useIntl","dispatch","useDispatch","visStateActions","uiStateActions","mapStyleActions","keplerActionSelector","makeGetActionCreators","wrapTo","MAP_ID","action","keplerGl","visState","layers","interactionConfig","layerOrder","defaultDatasetId","defaultDatasetIdSelector","useState","mapStyle","isRatesMap","getDefaultColorRange","RawRates","onCreateMap","createMapAsync","classficationMethod","numberOfCategories","colorRange","createRatesMapAsync","method","isCreateButtonDisabled","RightPanelContainer","formatMessage","defaultMessage","description","icon","WarningBox","message","type","WarningType","WARNING","color","classNames","span","Card","CardBody","Spacer","y","CreateButton","onClick","isDisabled","KeplerGlContext","Provider","selector","showDatasetTable","showDeleteDataset","updateTableColor","removeDataset","openDeleteModal","showDatasetList","showAddDataModal","CardHeader","layerClasses","LayerClasses","config","tooltip","onChange","interactionConfigChange","newConfig","onDisplayFormatChange","setColumnDisplayFormat","panelMetadata","SIDEBAR_PANELS"],"sourceRoot":""}