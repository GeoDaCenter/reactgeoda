{"version":3,"file":"static/chunks/164.eaa74cc251513c74.js","mappings":"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","sources":["webpack://_N_E/./src/components/chatgpt/chatgpt-config.tsx","webpack://_N_E/./src/components/chatgpt/chatgpt-panel.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n  Accordion,\n  AccordionItem,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Input,\n  Select,\n  SelectItem,\n  Slider,\n  Selection\n} from '@nextui-org/react';\nimport {Icon} from '@iconify/react';\nimport {GeoDaState} from '../../store';\nimport {setIsOpenAIKeyChecked, setOpenAIKey} from '../../actions';\nimport {accordionItemClasses} from '@/constants';\nimport {testOpenAIKey} from '@/ai/openai-utils';\nimport {WarningBox, WarningType} from '../common/warning-box';\n\nexport function ChatGPTConfigComponent({\n  setShowConfig\n}: {\n  setShowConfig: (showConfig: boolean) => void;\n}) {\n  const dispatch = useDispatch();\n\n  // state for openAIKey error\n  const [openAIKeyError, setOpenAIKeyError] = useState(false);\n\n  // state for error message\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // define state openAIKey\n  const openAIKey = useSelector((state: GeoDaState) => state.root.uiState.openAIKey);\n\n  // define useState for key\n  const [key, setKey] = React.useState(openAIKey || '');\n\n  const onOpenAIKeyChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const keyValue = event.target.value;\n    setKey(keyValue);\n\n    // reset openAIKeyError\n    setOpenAIKeyError(false);\n    // reset errorMessage\n    setErrorMessage('');\n  }, []);\n\n  const onConfirmClick = useCallback(async () => {\n    // check if openai key is valid by trying to call testOpenAI function\n    // if key is not valid, show error message\n    const isValidKey = await testOpenAIKey(key);\n    if (!isValidKey) {\n      setOpenAIKeyError(true);\n      setErrorMessage(\n        'Incorrect API key provided. You can find your API key at https://platform.openai.com/account/api-keys.'\n      );\n      dispatch(setOpenAIKey(undefined));\n      dispatch(setIsOpenAIKeyChecked(false));\n    } else {\n      // dispatch action to update redux state state.root.uiState.openAIKey\n      dispatch(setOpenAIKey(key));\n      // dispatch action to update state.root.uiState.isOpenAIKeyChecked\n      dispatch(setIsOpenAIKeyChecked(true));\n      // close the config panel\n      setShowConfig(false);\n    }\n  }, [dispatch, key, setShowConfig]);\n\n  const onNoOpenAIKeyMessageClick = () => {\n    // dispatch to show settings panel\n    setOpenAIKeyError(true);\n    setErrorMessage('');\n    setShowConfig(true);\n  };\n\n  const onLlmModelChange = useCallback((keys: Selection) => {\n    // @ts-ignore FIXME\n    keys.currentKey;\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex flex-col gap-4 overflow-y-auto pl-4 pr-4\">\n        <Accordion itemClasses={accordionItemClasses} defaultExpandedKeys={['1', '2']}>\n          <AccordionItem\n            key=\"1\"\n            aria-label=\"AI Settings\"\n            title=\"AI Settings\"\n            subtitle=\"Change your AI settings\"\n          >\n            <div className=\"flex flex-col gap-4\">\n              <Select\n                selectedKeys={['openai']}\n                disabledKeys={['gemini', 'llama', 'qwen', 'custom']}\n                label=\"AI Provider\"\n                placeholder=\"Select AI provider\"\n                className=\"max-w-full\"\n              >\n                <SelectItem key=\"openai\">OpenAI ChatGPT</SelectItem>\n                <SelectItem key=\"gemini\">Google Gemini</SelectItem>\n                <SelectItem key=\"llama\">Meta Llama</SelectItem>\n                <SelectItem key=\"qwen\">Alibaba QWen</SelectItem>\n                <SelectItem key=\"custom\">Custom Llama</SelectItem>\n              </Select>\n              <Select\n                selectedKeys={['gpt-4o-2024-05-13']}\n                label=\"LLM Model\"\n                placeholder=\"Select LLM model\"\n                className=\"max-w-full\"\n                onSelectionChange={onLlmModelChange}\n              >\n                <SelectItem key=\"gpt-4o-2024-05-13\">gpt-4o-2024-05-13</SelectItem>\n                <SelectItem key=\"gpt-4o-mini\">gpt-4o-mini</SelectItem>\n              </Select>\n              {openAIKeyError && errorMessage.length > 0 && (\n                <WarningBox\n                  message={errorMessage}\n                  type={WarningType.WARNING}\n                  onClick={onNoOpenAIKeyMessageClick}\n                />\n              )}\n              <Input\n                type=\"string\"\n                label=\"API Key\"\n                defaultValue=\"Enter your OpenAI key here\"\n                className=\"max-w-full\"\n                onChange={onOpenAIKeyChange}\n                value={key || ''}\n                required\n                isInvalid={openAIKeyError || key.length === 0}\n              />\n              <Slider\n                label=\"Temperature\"\n                step={0.1}\n                maxValue={1}\n                minValue={0}\n                defaultValue={0.8}\n                className=\"max-w-full\"\n              />\n              <Slider\n                label=\"Top P\"\n                step={0.1}\n                maxValue={1}\n                minValue={0}\n                defaultValue={0.8}\n                className=\"max-w-full\"\n              />\n            </div>\n          </AccordionItem>\n        </Accordion>\n        <Card className=\"hidden\">\n          <CardHeader>\n            <p className=\"text-small\">Usage</p>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n        <Button\n          radius=\"sm\"\n          color=\"danger\"\n          className=\"mt-4 bg-rose-900\"\n          onClick={onConfirmClick}\n          isDisabled={openAIKeyError || errorMessage.length > 0}\n          startContent={<Icon icon=\"hugeicons:ai-chat-02\" className=\"h-5 w-5\" />}\n        >\n          Let&apos;s Chat\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, {useEffect} from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {GeoDaState} from '../../store';\nimport {Icon} from '@iconify/react';\nimport {WarningBox, WarningType} from '../common/warning-box';\nimport {RightPanelContainer} from '../common/right-panel-template';\nimport {ChatGPTComponent} from './chatgpt-component';\nimport {MessageModel} from '@chatscope/chat-ui-kit-react';\nimport {addDatasetToAI} from '@/actions';\nimport {datasetsSelector} from '@/store/selectors';\nimport {DatasetProps} from '@/reducers/file-reducer';\nimport {ChatGPTConfigComponent} from './chatgpt-config';\nimport {Button, Tooltip} from '@nextui-org/react';\n\nexport const NO_OPENAI_KEY_MESSAGE = 'Please config your OpenAI API key in Settings.';\nexport const INVALID_OPENAI_KEY_MESSAGE =\n  'The OpenAI API key is invalid. Please change your OpenAI API key in Settings.';\nexport const CONNECT_OPENAI_API = 'Connecting and initializing ...';\n\nexport const NO_MAP_LOADED_MESSAGE = 'Please load a map first before chatting.';\n\nconst DEFAULT_WELCOME_MESSAGE =\n  \"Hello, I'm GeoDa.AI agent! Let's do spatial analysis! How can I help you today?\";\n\nconst ChatGPTPanel = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch<any>();\n\n  const welcomeMessage: MessageModel = {\n    message: intl.formatMessage({\n      id: 'GeoDa.AI.initialMessage',\n      defaultMessage: DEFAULT_WELCOME_MESSAGE\n    }),\n    sentTime: 'just now',\n    sender: 'ChatGPT',\n    direction: 'incoming',\n    position: 'first'\n  };\n\n  const datasets = useSelector(datasetsSelector);\n\n  const openAIKey = useSelector((state: GeoDaState) => state.root.uiState.openAIKey);\n\n  const isKeyChecked = useSelector((state: GeoDaState) => state.root.uiState.isOpenAIKeyChecked);\n\n  const datasetMeta = useSelector((state: GeoDaState) => state.root.ai.datasetMeta);\n\n  const messages = useSelector((state: GeoDaState) => state.root.ai.messages);\n\n  const [showConfig, setShowConfig] = React.useState(false);\n\n  // check if datasetMeta has all the datasetIds from datasets\n  const isDatasetMetaComplete = datasets.every(dataset => {\n    return datasetMeta?.find(meta => meta.datasetId === dataset.dataId);\n  });\n\n  const onNoOpenAIKeyMessageClick = () => {\n    setShowConfig(true);\n  };\n\n  const onClickConfig = () => {\n    setShowConfig(true);\n  };\n\n  function onDatasetsChange(datasets: DatasetProps[]) {\n    // find datasetIds from datasets that are not in datasetMeta\n    const datasetIds = datasets.map(dataset => dataset.dataId);\n    const datasetIdsNotInMeta = datasetIds.filter(\n      datasetId => !datasetMeta?.find(meta => meta.datasetId === datasetId)\n    );\n    // add dataset to AI\n    datasetIdsNotInMeta.forEach(datasetId => {\n      const datasetName = datasets.find(dataset => dataset.dataId === datasetId)?.fileName;\n      if (datasetName && datasetId) {\n        dispatch(addDatasetToAI(datasetId, datasetName));\n      }\n    });\n  }\n\n  useEffect(() => {\n    // check if datasets are processed as additional instructions for AI model\n    if (isKeyChecked && openAIKey) {\n      onDatasetsChange(datasets);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasets, isKeyChecked]);\n\n  return (\n    <RightPanelContainer\n      title={intl.formatMessage({\n        id: 'chatGpt.title',\n        defaultMessage: 'GeoDa.AI Agent'\n      })}\n      description={intl.formatMessage({\n        id: 'chatGpt.description',\n        defaultMessage: 'Powered by GeoDa and LLM'\n      })}\n      showAIHelp={false}\n    >\n      <Tooltip content=\"AI Configuration\" size=\"sm\" placement=\"right\">\n        <Button\n          className=\"absolute -top-12 right-1 z-10\"\n          isIconOnly={true}\n          variant=\"light\"\n          size=\"sm\"\n          onClick={onClickConfig}\n        >\n          <Icon icon=\"mynaui:config\" width={18} />\n        </Button>\n      </Tooltip>\n      {isKeyChecked === false || showConfig ? (\n        <ChatGPTConfigComponent setShowConfig={setShowConfig} />\n      ) : !datasetMeta && !isDatasetMetaComplete ? (\n        <WarningBox\n          message={CONNECT_OPENAI_API}\n          type={WarningType.WAIT}\n          onClick={onNoOpenAIKeyMessageClick}\n        />\n      ) : datasets?.length === 0 ? (\n        <WarningBox message={NO_MAP_LOADED_MESSAGE} type={WarningType.WARNING} />\n      ) : (\n        <ChatGPTComponent messages={messages.length > 0 ? messages : [welcomeMessage]} />\n      )}\n    </RightPanelContainer>\n  );\n};\n\nexport default ChatGPTPanel;\n"],"names":["ChatGPTConfigComponent","param","setShowConfig","dispatch","useDispatch","openAIKeyError","setOpenAIKeyError","useState","errorMessage","setErrorMessage","openAIKey","useSelector","state","root","uiState","key","setKey","React","onOpenAIKeyChange","useCallback","event","target","value","onConfirmClick","testOpenAIKey","setOpenAIKey","setIsOpenAIKeyChecked","undefined","onLlmModelChange","keys","currentKey","jsx_runtime","jsx","Fragment","jsxs","div","className","Accordion","itemClasses","accordionItemClasses","defaultExpandedKeys","AccordionItem","aria-label","title","subtitle","Select","selectedKeys","disabledKeys","label","placeholder","SelectItem","onSelectionChange","length","WarningBox","message","type","WarningType","WARNING","onClick","Input","defaultValue","onChange","required","isInvalid","Slider","step","maxValue","minValue","Card","CardHeader","p","CardBody","Button","radius","color","isDisabled","startContent","Icon","icon","NO_OPENAI_KEY_MESSAGE","INVALID_OPENAI_KEY_MESSAGE","CONNECT_OPENAI_API","NO_MAP_LOADED_MESSAGE","chatgpt_panel","intl","useIntl","welcomeMessage","formatMessage","id","defaultMessage","sentTime","sender","direction","position","datasets","datasetsSelector","isKeyChecked","isOpenAIKeyChecked","datasetMeta","ai","messages","showConfig","isDatasetMetaComplete","every","dataset","find","meta","datasetId","dataId","useEffect","onDatasetsChange","datasetIdsNotInMeta","map","filter","forEach","datasetName","fileName","addDatasetToAI","RightPanelContainer","description","showAIHelp","Tooltip","content","size","placement","isIconOnly","variant","width","ChatGPTComponent","WAIT"],"sourceRoot":""}