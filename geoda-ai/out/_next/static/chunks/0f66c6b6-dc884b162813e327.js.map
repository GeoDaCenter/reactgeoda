{"version":3,"file":"static/chunks/0f66c6b6-dc884b162813e327.js","mappings":"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","sources":["webpack://_N_E/./node_modules/react-querybuilder/dist/react-querybuilder.mjs","webpack://_N_E/<anon>"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/messages.ts\nvar messages_exports = {};\n__export(messages_exports, {\n  errorBothQueryDefaultQuery: () => errorBothQueryDefaultQuery,\n  errorControlledToUncontrolled: () => errorControlledToUncontrolled,\n  errorDeprecatedRuleGroupProps: () => errorDeprecatedRuleGroupProps,\n  errorDeprecatedRuleProps: () => errorDeprecatedRuleProps,\n  errorEnabledDndWithoutReactDnD: () => errorEnabledDndWithoutReactDnD,\n  errorInvalidIndependentCombinatorsProp: () => errorInvalidIndependentCombinatorsProp,\n  errorUncontrolledToControlled: () => errorUncontrolledToControlled,\n  errorUnnecessaryIndependentCombinatorsProp: () => errorUnnecessaryIndependentCombinatorsProp\n});\nvar errorInvalidIndependentCombinatorsProp = \"QueryBuilder was rendered with a truthy independentCombinators prop. This prop is deprecated and unnecessary. Furthermore, the initial query/defaultQuery prop was of type RuleGroupType instead of type RuleGroupIC. More info: https://react-querybuilder.js.org/docs/components/querybuilder#independent-combinators\";\nvar errorUnnecessaryIndependentCombinatorsProp = \"QueryBuilder was rendered with the deprecated and unnecessary independentCombinators prop. To use independent combinators, make sure the query/defaultQuery prop is of type RuleGroupIC when the component mounts. More info: https://react-querybuilder.js.org/docs/components/querybuilder#independent-combinators\";\nvar errorDeprecatedRuleGroupProps = \"A custom RuleGroup component has rendered a standard RuleGroup component with deprecated props. The combinator, not, and rules props should not be used. Instead, the full group object should be passed as the ruleGroup prop.\";\nvar errorDeprecatedRuleProps = \"A custom RuleGroup component has rendered a standard Rule component with deprecated props. The field, operator, value, and valueSource props should not be used. Instead, the full rule object should be passed as the rule prop.\";\nvar errorBothQueryDefaultQuery = \"QueryBuilder was rendered with both query and defaultQuery props. QueryBuilder must be either controlled or uncontrolled (specify either the query prop, or the defaultQuery prop, but not both). Decide between using a controlled or uncontrolled query builder and remove one of these props. More info: https://reactjs.org/link/controlled-components\";\nvar errorUncontrolledToControlled = \"QueryBuilder is changing from an uncontrolled component to be controlled. This is likely caused by the query changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled query builder for the lifetime of the component. More info: https://reactjs.org/link/controlled-components\";\nvar errorControlledToUncontrolled = \"QueryBuilder is changing from a controlled component to be uncontrolled. This is likely caused by the query changing from defined to undefined, which should not happen. Decide between using a controlled or uncontrolled query builder for the lifetime of the component. More info: https://reactjs.org/link/controlled-components\";\nvar errorEnabledDndWithoutReactDnD = \"QueryBuilder was rendered with the enableDragAndDrop prop set to true, but either react-dnd or react-dnd-html5-backend (or both) was not installed. To enable drag-and-drop functionality, install both packages and wrap QueryBuilder in QueryBuilderDnD from @react-querybuilder/dnd.\";\n\n// src/components/ActionElement.tsx\nimport * as React from \"react\";\nvar ActionElement = ({\n  className,\n  handleOnClick,\n  label,\n  title,\n  disabled,\n  disabledTranslation,\n  testID\n}) => /* @__PURE__ */ React.createElement(\n  \"button\",\n  {\n    type: \"button\",\n    \"data-testid\": testID,\n    disabled: disabled && !disabledTranslation,\n    className,\n    title: disabledTranslation && disabled ? disabledTranslation.title : title,\n    onClick: (e) => handleOnClick(e)\n  },\n  disabledTranslation && disabled ? disabledTranslation.label : label\n);\nActionElement.displayName = \"ActionElement\";\n\n// src/components/DragHandle.tsx\nimport * as React2 from \"react\";\nimport { forwardRef } from \"react\";\nvar DragHandle = forwardRef(\n  ({ className, label, title, testID }, dragRef) => /* @__PURE__ */ React2.createElement(\"span\", { \"data-testid\": testID, ref: dragRef, className, title }, label)\n);\nDragHandle.displayName = \"DragHandle\";\n\n// src/components/InlineCombinator.tsx\nimport * as React3 from \"react\";\n\n// src/defaults.ts\nvar placeholderName = \"~\";\nvar placeholderLabel = \"------\";\nvar defaultPlaceholderFieldName = placeholderName;\nvar defaultPlaceholderFieldLabel = placeholderLabel;\nvar defaultPlaceholderFieldGroupLabel = placeholderLabel;\nvar defaultPlaceholderOperatorName = placeholderName;\nvar defaultPlaceholderOperatorLabel = placeholderLabel;\nvar defaultPlaceholderOperatorGroupLabel = placeholderLabel;\nvar defaultJoinChar = \",\";\nvar defaultTranslations = {\n  fields: {\n    title: \"Fields\",\n    placeholderName: defaultPlaceholderFieldName,\n    placeholderLabel: defaultPlaceholderFieldLabel,\n    placeholderGroupLabel: defaultPlaceholderFieldGroupLabel\n  },\n  operators: {\n    title: \"Operators\",\n    placeholderName: defaultPlaceholderOperatorName,\n    placeholderLabel: defaultPlaceholderOperatorLabel,\n    placeholderGroupLabel: defaultPlaceholderOperatorGroupLabel\n  },\n  value: {\n    title: \"Value\"\n  },\n  removeRule: {\n    label: \"\\u2A2F\",\n    title: \"Remove rule\"\n  },\n  removeGroup: {\n    label: \"\\u2A2F\",\n    title: \"Remove group\"\n  },\n  addRule: {\n    label: \"+ Rule\",\n    title: \"Add rule\"\n  },\n  addGroup: {\n    label: \"+ Group\",\n    title: \"Add group\"\n  },\n  combinators: {\n    title: \"Combinators\"\n  },\n  notToggle: {\n    label: \"Not\",\n    title: \"Invert this group\"\n  },\n  cloneRule: {\n    label: \"\\u29C9\",\n    title: \"Clone rule\"\n  },\n  cloneRuleGroup: {\n    label: \"\\u29C9\",\n    title: \"Clone group\"\n  },\n  shiftActionUp: {\n    label: \"\\u02C4\",\n    title: \"Shift up\"\n  },\n  shiftActionDown: {\n    label: \"\\u02C5\",\n    title: \"Shift down\"\n  },\n  dragHandle: {\n    label: \"\\u205E\\u205E\",\n    title: \"Drag handle\"\n  },\n  lockRule: {\n    label: \"\\u{1F513}\",\n    title: \"Lock rule\"\n  },\n  lockGroup: {\n    label: \"\\u{1F513}\",\n    title: \"Lock group\"\n  },\n  lockRuleDisabled: {\n    label: \"\\u{1F512}\",\n    title: \"Unlock rule\"\n  },\n  lockGroupDisabled: {\n    label: \"\\u{1F512}\",\n    title: \"Unlock group\"\n  },\n  valueSourceSelector: {\n    title: \"Value source\"\n  }\n};\nvar defaultOperators = [\n  { name: \"=\", value: \"=\", label: \"=\" },\n  { name: \"!=\", value: \"!=\", label: \"!=\" },\n  { name: \"<\", value: \"<\", label: \"<\" },\n  { name: \">\", value: \">\", label: \">\" },\n  { name: \"<=\", value: \"<=\", label: \"<=\" },\n  { name: \">=\", value: \">=\", label: \">=\" },\n  { name: \"contains\", value: \"contains\", label: \"contains\" },\n  { name: \"beginsWith\", value: \"beginsWith\", label: \"begins with\" },\n  { name: \"endsWith\", value: \"endsWith\", label: \"ends with\" },\n  { name: \"doesNotContain\", value: \"doesNotContain\", label: \"does not contain\" },\n  { name: \"doesNotBeginWith\", value: \"doesNotBeginWith\", label: \"does not begin with\" },\n  { name: \"doesNotEndWith\", value: \"doesNotEndWith\", label: \"does not end with\" },\n  { name: \"null\", value: \"null\", label: \"is null\" },\n  { name: \"notNull\", value: \"notNull\", label: \"is not null\" },\n  { name: \"in\", value: \"in\", label: \"in\" },\n  { name: \"notIn\", value: \"notIn\", label: \"not in\" },\n  { name: \"between\", value: \"between\", label: \"between\" },\n  { name: \"notBetween\", value: \"notBetween\", label: \"not between\" }\n];\nvar defaultOperatorNegationMap = {\n  \"=\": \"!=\",\n  \"!=\": \"=\",\n  \"<\": \">=\",\n  \"<=\": \">\",\n  \">\": \"<=\",\n  \">=\": \"<\",\n  beginsWith: \"doesNotBeginWith\",\n  doesNotBeginWith: \"beginsWith\",\n  endsWith: \"doesNotEndWith\",\n  doesNotEndWith: \"endsWith\",\n  contains: \"doesNotContain\",\n  doesNotContain: \"contains\",\n  between: \"notBetween\",\n  notBetween: \"between\",\n  in: \"notIn\",\n  notIn: \"in\",\n  notNull: \"null\",\n  null: \"notNull\"\n};\nvar defaultCombinators = [\n  { name: \"and\", value: \"and\", label: \"AND\" },\n  { name: \"or\", value: \"or\", label: \"OR\" }\n];\nvar defaultCombinatorsExtended = [\n  ...defaultCombinators,\n  { name: \"xor\", value: \"xor\", label: \"XOR\" }\n];\nvar standardClassnames = {\n  queryBuilder: \"queryBuilder\",\n  ruleGroup: \"ruleGroup\",\n  header: \"ruleGroup-header\",\n  body: \"ruleGroup-body\",\n  combinators: \"ruleGroup-combinators\",\n  addRule: \"ruleGroup-addRule\",\n  addGroup: \"ruleGroup-addGroup\",\n  cloneRule: \"rule-cloneRule\",\n  cloneGroup: \"ruleGroup-cloneGroup\",\n  removeGroup: \"ruleGroup-remove\",\n  notToggle: \"ruleGroup-notToggle\",\n  rule: \"rule\",\n  fields: \"rule-fields\",\n  operators: \"rule-operators\",\n  value: \"rule-value\",\n  removeRule: \"rule-remove\",\n  betweenRules: \"betweenRules\",\n  valid: \"queryBuilder-valid\",\n  invalid: \"queryBuilder-invalid\",\n  shiftActions: \"shiftActions\",\n  dndDragging: \"dndDragging\",\n  dndOver: \"dndOver\",\n  dndCopy: \"dndCopy\",\n  dragHandle: \"queryBuilder-dragHandle\",\n  disabled: \"queryBuilder-disabled\",\n  lockRule: \"rule-lock\",\n  lockGroup: \"ruleGroup-lock\",\n  valueSource: \"rule-valueSource\",\n  valueListItem: \"rule-value-list-item\",\n  branches: \"queryBuilder-branches\"\n};\nvar defaultControlClassnames = {\n  queryBuilder: \"\",\n  ruleGroup: \"\",\n  header: \"\",\n  body: \"\",\n  combinators: \"\",\n  addRule: \"\",\n  addGroup: \"\",\n  cloneRule: \"\",\n  cloneGroup: \"\",\n  removeGroup: \"\",\n  notToggle: \"\",\n  rule: \"\",\n  fields: \"\",\n  operators: \"\",\n  value: \"\",\n  removeRule: \"\",\n  shiftActions: \"\",\n  dragHandle: \"\",\n  lockRule: \"\",\n  lockGroup: \"\",\n  valueSource: \"\",\n  actionElement: \"\",\n  valueSelector: \"\"\n};\nvar groupInvalidReasons = {\n  empty: \"empty\",\n  invalidCombinator: \"invalid combinator\",\n  invalidIndependentCombinators: \"invalid independent combinators\"\n};\nvar TestID = {\n  rule: \"rule\",\n  ruleGroup: \"rule-group\",\n  inlineCombinator: \"inline-combinator\",\n  addGroup: \"add-group\",\n  removeGroup: \"remove-group\",\n  cloneGroup: \"clone-group\",\n  cloneRule: \"clone-rule\",\n  addRule: \"add-rule\",\n  removeRule: \"remove-rule\",\n  combinators: \"combinators\",\n  fields: \"fields\",\n  operators: \"operators\",\n  valueEditor: \"value-editor\",\n  notToggle: \"not-toggle\",\n  shiftActions: \"shift-actions\",\n  dragHandle: \"drag-handle\",\n  lockRule: \"lock-rule\",\n  lockGroup: \"lock-group\",\n  valueSourceSelector: \"value-source-selector\"\n};\nvar LogType = {\n  parentPathDisabled: \"action aborted: parent path disabled\",\n  pathDisabled: \"action aborted: path is disabled\",\n  queryUpdate: \"query updated\",\n  onAddRuleFalse: \"onAddRule callback returned false\",\n  onAddGroupFalse: \"onAddGroup callback returned false\",\n  onRemoveFalse: \"onRemove callback returned false\",\n  add: \"rule or group added\",\n  remove: \"rule or group removed\",\n  update: \"rule or group updated\",\n  move: \"rule or group moved\"\n};\n\n// src/components/InlineCombinator.tsx\nvar InlineCombinator = ({\n  component: CombinatorSelectorComponent,\n  independentCombinators: _independentCombinators,\n  ...props\n}) => /* @__PURE__ */ React3.createElement(\"div\", { className: standardClassnames.betweenRules, \"data-testid\": TestID.inlineCombinator }, /* @__PURE__ */ React3.createElement(CombinatorSelectorComponent, { ...props, testID: TestID.combinators }));\nInlineCombinator.displayName = \"InlineCombinator\";\n\n// src/components/NotToggle.tsx\nimport * as React4 from \"react\";\nvar NotToggle = ({\n  className,\n  handleOnChange,\n  title,\n  label,\n  checked,\n  disabled,\n  testID\n}) => /* @__PURE__ */ React4.createElement(\"label\", { \"data-testid\": testID, className, title }, /* @__PURE__ */ React4.createElement(\n  \"input\",\n  {\n    type: \"checkbox\",\n    onChange: (e) => handleOnChange(e.target.checked),\n    checked: !!checked,\n    disabled\n  }\n), label);\nNotToggle.displayName = \"NotToggle\";\n\n// src/components/QueryBuilder.tsx\nimport * as React8 from \"react\";\nimport { Provider } from \"react-redux\";\n\n// src/hooks/usePrevious.ts\nimport { useRef } from \"react\";\nvar usePrevious = (value) => {\n  const ref = useRef({ value, prev: null });\n  const current = ref.current.value;\n  if (value !== current) {\n    ref.current = { value, prev: current };\n  }\n  return ref.current.prev;\n};\n\n// src/hooks/useControlledOrUncontrolled.ts\nvar didWarnBothQueryDefaultQuery = false;\nvar didWarnUncontrolledToControlled = false;\nvar didWarnControlledToUncontrolled = false;\nvar useControlledOrUncontrolled = ({\n  defaultQuery,\n  queryProp\n}) => {\n  const prevQueryPresent = usePrevious(!!queryProp);\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!!queryProp && !!defaultQuery && !didWarnBothQueryDefaultQuery) {\n      console.error(errorBothQueryDefaultQuery);\n      didWarnBothQueryDefaultQuery = true;\n    } else if (prevQueryPresent === true && !queryProp && !!defaultQuery && !didWarnControlledToUncontrolled) {\n      console.error(errorControlledToUncontrolled);\n      didWarnControlledToUncontrolled = true;\n    } else if (prevQueryPresent === false && !!queryProp && !defaultQuery && !didWarnUncontrolledToControlled) {\n      console.error(errorUncontrolledToControlled);\n      didWarnUncontrolledToControlled = true;\n    }\n  }\n};\n\n// src/hooks/useDeprecatedProps.ts\nvar didWarnUsingInvalidIndependentCombinatorsProp = false;\nvar didWarnUsingUnnecessaryIndependentCombinatorsProp = false;\nvar didWarnUsingDeprecatedRuleProps = false;\nvar didWarnUsingDeprecatedRuleGroupProps = false;\nfunction useDeprecatedProps(type, logWarning, otherParams) {\n  if (process.env.NODE_ENV !== \"production\" && logWarning) {\n    if (type === \"independentCombinators\") {\n      if (!didWarnUsingInvalidIndependentCombinatorsProp && otherParams === \"invalid\") {\n        console.error(errorInvalidIndependentCombinatorsProp);\n        didWarnUsingInvalidIndependentCombinatorsProp = true;\n      }\n      if (!didWarnUsingUnnecessaryIndependentCombinatorsProp && otherParams === \"unnecessary\") {\n        console.error(errorUnnecessaryIndependentCombinatorsProp);\n        didWarnUsingUnnecessaryIndependentCombinatorsProp = true;\n      }\n    }\n    if (type === \"rule\" && !didWarnUsingDeprecatedRuleProps) {\n      console.error(errorDeprecatedRuleProps);\n      didWarnUsingDeprecatedRuleProps = true;\n    }\n    if (type === \"ruleGroup\" && !didWarnUsingDeprecatedRuleGroupProps) {\n      console.error(errorDeprecatedRuleGroupProps);\n      didWarnUsingDeprecatedRuleGroupProps = true;\n    }\n  }\n}\n\n// src/hooks/useMergedContext.ts\nimport { useContext as useContext2, useMemo as useMemo3 } from \"react\";\n\n// src/utils/arrayUtils.ts\nvar splitBy = (str, splitChar = defaultJoinChar) => typeof str === \"string\" ? str.split(`\\\\${splitChar}`).map((c) => c.split(splitChar)).reduce((prev, curr, idx) => {\n  if (idx === 0) {\n    return curr;\n  }\n  return [\n    ...prev.slice(0, prev.length - 1),\n    `${prev[prev.length - 1]}${splitChar}${curr[0]}`,\n    ...curr.slice(1)\n  ];\n}, []) : [];\nvar joinWith = (strArr, joinChar = defaultJoinChar) => strArr.map((str) => `${str ?? \"\"}`.replaceAll(joinChar, `\\\\${joinChar}`)).join(joinChar);\nvar trimIfString = (val) => typeof val === \"string\" ? val.trim() : val;\nvar toArray = (v) => Array.isArray(v) ? v.map(trimIfString) : typeof v === \"string\" ? splitBy(v, defaultJoinChar).filter((s) => !/^\\s*$/.test(s)).map((s) => s.trim()) : typeof v === \"number\" ? [v] : [];\nvar nullFreeArray = (arr) => arr.every((el) => el === false || (el ?? false) !== false);\n\n// src/utils/misc.ts\nimport { numericRegex as numericQuantityRegex } from \"numeric-quantity\";\nvar numericRegex = new RegExp(\n  numericQuantityRegex.source.replace(/^\\^/, \"^\\\\s*\").replace(/\\$$/, \"\\\\s*$\")\n);\nvar isPojo = (obj) => obj === null || typeof obj !== \"object\" ? false : Object.getPrototypeOf(obj) === Object.prototype;\n\n// src/utils/isRuleGroup.ts\nvar isRuleGroup = (rg) => isPojo(rg) && \"rules\" in rg && Array.isArray(rg.rules);\nvar isRuleGroupType = (rg) => isRuleGroup(rg) && typeof rg.combinator === \"string\";\nvar isRuleGroupTypeIC = (rg) => isRuleGroup(rg) && typeof rg.combinator === \"undefined\";\n\n// src/utils/convertQuery.ts\nvar processRuleOrStringOrRuleGroupIC = (r) => isRuleGroup(r) ? generateRuleGroupICWithConsistentCombinators(r) : r;\nvar generateRuleGroupICWithConsistentCombinators = (rg) => {\n  const returnArray = [];\n  const push = (r) => returnArray.push(processRuleOrStringOrRuleGroupIC(r));\n  let startIndex = 0;\n  for (let i = 0; i < rg.rules.length; i += 2) {\n    if (rg.rules.length === 1) {\n      push(rg.rules[0]);\n    } else if (rg.rules[i + 1] === \"and\") {\n      startIndex = i;\n      let j = 1;\n      while (rg.rules[startIndex + j] === \"and\") {\n        i += 2;\n        j += 2;\n      }\n      returnArray.push({\n        // @ts-expect-error Too complicated to keep track of odd/even indexes in TS\n        rules: rg.rules.slice(startIndex, i + 1).map(processRuleOrStringOrRuleGroupIC)\n      });\n      i -= 2;\n    } else if (rg.rules[i + 1] === \"or\") {\n      if (i === 0 || i === rg.rules.length - 3) {\n        if (i === 0 || rg.rules[i - 1] === \"or\") {\n          push(rg.rules[i]);\n        }\n        push(rg.rules[i + 1]);\n        if (i === rg.rules.length - 3) {\n          push(rg.rules[i + 2]);\n        }\n      } else {\n        if (rg.rules[i - 1] === \"and\") {\n          push(rg.rules[i + 1]);\n        } else {\n          push(rg.rules[i]);\n          push(rg.rules[i + 1]);\n        }\n      }\n    }\n  }\n  if (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error TS still thinks returnArray has length 0\n    returnArray.length === 1 && typeof returnArray[0] === \"object\" && isRuleGroup(returnArray[0])\n  ) {\n    return { ...rg, ...returnArray[0] };\n  }\n  return { ...rg, rules: returnArray };\n};\nvar convertFromIC = (rg) => {\n  if (isRuleGroupType(rg)) {\n    return rg;\n  }\n  const processedRG = generateRuleGroupICWithConsistentCombinators(rg);\n  const rulesAsMixedList = processedRG.rules.map(\n    (r) => typeof r === \"string\" || !isRuleGroup(r) ? r : convertFromIC(r)\n  );\n  const combinator = rulesAsMixedList.length < 2 ? \"and\" : rulesAsMixedList[1];\n  const rules = rulesAsMixedList.filter((r) => typeof r !== \"string\");\n  return { ...processedRG, combinator, rules };\n};\nvar convertToIC = (rg) => {\n  if (isRuleGroupTypeIC(rg)) {\n    return rg;\n  }\n  const { combinator, ...queryWithoutCombinator } = rg;\n  const rules = [];\n  const { length } = rg.rules;\n  rg.rules.forEach((r, idx) => {\n    if (isRuleGroup(r)) {\n      rules.push(convertToIC(r));\n    } else {\n      rules.push(r);\n    }\n    if (combinator && idx < length - 1) {\n      rules.push(combinator);\n    }\n  });\n  return { ...queryWithoutCombinator, rules };\n};\nfunction convertQuery(query) {\n  return isRuleGroupTypeIC(query) ? convertFromIC(query) : convertToIC(query);\n}\n\n// src/utils/defaultValidator.ts\nvar defaultValidator = (query) => {\n  const result = {};\n  const validateRule = (_rule) => {\n  };\n  const validateGroup = (rg) => {\n    const reasons = [];\n    if (rg.rules.length === 0) {\n      reasons.push(groupInvalidReasons.empty);\n    } else if (!isRuleGroupType(rg)) {\n      let invalidICs = false;\n      for (let i = 0; i < rg.rules.length && !invalidICs; i++) {\n        if (i % 2 === 0 && typeof rg.rules[i] === \"string\" || i % 2 === 1 && typeof rg.rules[i] !== \"string\" || i % 2 === 1 && typeof rg.rules[i] === \"string\" && !defaultCombinators.map((c) => c.name).includes(rg.rules[i])) {\n          invalidICs = true;\n        }\n      }\n      if (invalidICs) {\n        reasons.push(groupInvalidReasons.invalidIndependentCombinators);\n      }\n    }\n    if (isRuleGroupType(rg) && !defaultCombinators.map((c) => c.name).includes(rg.combinator) && rg.rules.length > 1) {\n      reasons.push(groupInvalidReasons.invalidCombinator);\n    }\n    if (rg.id) {\n      if (reasons.length) {\n        result[rg.id] = { valid: false, reasons };\n      } else {\n        result[rg.id] = true;\n      }\n    }\n    rg.rules.forEach((r) => {\n      if (typeof r === \"string\") {\n      } else if (isRuleGroup(r)) {\n        validateGroup(r);\n      } else {\n        validateRule(r);\n      }\n    });\n  };\n  validateGroup(query);\n  return result;\n};\n\n// src/utils/toFullOption.ts\nimport { produce } from \"immer\";\nvar isOptionWithName = (opt) => isPojo(opt) && \"name\" in opt && typeof opt.name === \"string\";\nvar isOptionWithValue = (opt) => isPojo(opt) && \"value\" in opt && typeof opt.value === \"string\";\nfunction toFullOption(opt) {\n  const recipe = produce((draft) => {\n    if (isOptionWithName(draft) && !isOptionWithValue(draft)) {\n      draft.value = draft.name;\n    } else if (!isOptionWithName(draft) && isOptionWithValue(draft)) {\n      draft.name = draft.value;\n    }\n  });\n  return recipe(opt);\n}\nfunction toFullOptionList(optList) {\n  if (!Array.isArray(optList)) {\n    return [];\n  }\n  const recipe = produce((draft) => {\n    if (isFlexibleOptionGroupArray(draft)) {\n      for (const optGroup of draft) {\n        optGroup.options.forEach((opt, idx) => optGroup.options[idx] = toFullOption(opt));\n      }\n    } else {\n      draft.forEach((opt, idx) => draft[idx] = toFullOption(opt));\n    }\n  });\n  return recipe(optList);\n}\nfunction toFullOptionMap(optMap) {\n  return Object.fromEntries(\n    Object.entries(optMap).map(([k, v]) => [k, toFullOption(v)])\n  );\n}\n\n// src/utils/uniq.ts\nvar uniqByName = (originalArray) => uniqByIdentifier(originalArray);\nvar uniqByIdentifier = (originalArray) => {\n  const names = /* @__PURE__ */ new Set();\n  const newArray = [];\n  originalArray.forEach((el) => {\n    if (!names.has(el.value ?? el.name)) {\n      names.add(el.value ?? el.name);\n      newArray.push(el);\n    }\n  });\n  return originalArray.length === newArray.length ? originalArray : newArray;\n};\nvar uniqOptGroups = (originalArray) => {\n  const labels = /* @__PURE__ */ new Set();\n  const names = /* @__PURE__ */ new Set();\n  const newArray = [];\n  originalArray.forEach((el) => {\n    if (!labels.has(el.label)) {\n      labels.add(el.label);\n      const optionsForThisGroup = [];\n      el.options.forEach((opt) => {\n        if (!names.has(opt.value ?? opt.name)) {\n          names.add(opt.value ?? opt.name);\n          optionsForThisGroup.push(toFullOption(opt));\n        }\n      });\n      newArray.push({ ...el, options: optionsForThisGroup });\n    }\n  });\n  return newArray;\n};\nvar uniqOptList = (originalArray) => {\n  if (isFlexibleOptionGroupArray(originalArray)) {\n    return uniqOptGroups(originalArray);\n  }\n  return uniqByIdentifier(originalArray.map(toFullOption));\n};\n\n// src/utils/optGroupUtils.ts\nvar isOptionGroupArray = (arr) => Array.isArray(arr) && arr.length > 0 && isPojo(arr[0]) && \"options\" in arr[0];\nvar isFlexibleOptionGroupArray = (arr) => Array.isArray(arr) && arr.length > 0 && isPojo(arr[0]) && \"options\" in arr[0] && isPojo(arr[0].options[0]) && (\"name\" in arr[0].options[0] || \"value\" in arr[0].options[0]);\nvar isFullOptionGroupArray = (arr) => Array.isArray(arr) && arr.length > 0 && isPojo(arr[0]) && \"options\" in arr[0] && isPojo(arr[0].options[0]) && \"name\" in arr[0].options[0] && isPojo(arr[0].options[0]) && \"value\" in arr[0].options[0];\nvar getOption = (arr, name) => (isOptionGroupArray(arr) ? arr.flatMap((og) => og.options) : arr).find((op) => op.name === name);\nvar getFirstOption = (arr) => !Array.isArray(arr) || arr.length === 0 ? null : isFlexibleOptionGroupArray(arr) ? arr[0].options[0].value ?? arr[0].options[0].name : arr[0].value ?? arr[0].name;\nvar toFlatOptionArray = (arr) => uniqByIdentifier(isOptionGroupArray(arr) ? arr.flatMap((og) => og.options) : arr);\n\n// src/utils/filterFieldsByComparator.ts\nvar filterByComparator = (field, operator, fieldToCompare) => {\n  const fullField = toFullOption(field);\n  const fullFieldToCompare = toFullOption(fieldToCompare);\n  if (fullField.value === fullFieldToCompare.value) {\n    return false;\n  }\n  if (typeof fullField.comparator === \"string\") {\n    return fullField[fullField.comparator] === fullFieldToCompare[fullField.comparator];\n  }\n  return fullField.comparator?.(fullFieldToCompare, operator) ?? /* istanbul ignore next */\n  false;\n};\nvar filterFieldsByComparator = (field, fields, operator) => {\n  if (!field.comparator) {\n    const filterOutSameField = (f) => (f.value ?? /* istanbul ignore next */\n    f.name) !== (field.value ?? /* istanbul ignore next */\n    field.name);\n    if (isFlexibleOptionGroupArray(fields)) {\n      return fields.map((og) => ({\n        ...og,\n        options: og.options.filter(filterOutSameField)\n      }));\n    }\n    return fields.filter(filterOutSameField);\n  }\n  if (isFlexibleOptionGroupArray(fields)) {\n    return fields.map((og) => ({\n      ...og,\n      options: og.options.filter((f) => filterByComparator(field, operator, f))\n    })).filter((og) => og.options.length > 0);\n  }\n  return fields.filter((f) => filterByComparator(field, operator, f));\n};\n\n// src/utils/parseNumber.ts\nimport { numericQuantity } from \"numeric-quantity\";\nvar parseNumber = (v, { parseNumbers } = {}) => {\n  if (!parseNumbers || typeof v === \"bigint\" || typeof v === \"number\") {\n    return v;\n  }\n  if (parseNumbers === \"native\") {\n    return parseFloat(v);\n  }\n  const n = (\n    // TODO: Should these options be configurable?\n    numericQuantity(v, {\n      allowTrailingInvalid: parseNumbers === \"enhanced\",\n      romanNumerals: true,\n      round: false\n    })\n  );\n  return isNaN(n) ? v : n;\n};\n\n// src/utils/formatQuery/utils.ts\nvar mapSQLOperator = (op) => {\n  switch (op.toLowerCase()) {\n    case \"null\":\n      return \"is null\";\n    case \"notnull\":\n      return \"is not null\";\n    case \"notin\":\n      return \"not in\";\n    case \"notbetween\":\n      return \"not between\";\n    case \"contains\":\n    case \"beginswith\":\n    case \"endswith\":\n      return \"like\";\n    case \"doesnotcontain\":\n    case \"doesnotbeginwith\":\n    case \"doesnotendwith\":\n      return \"not like\";\n    default:\n      return op;\n  }\n};\nvar mongoOperators = {\n  \"=\": \"$eq\",\n  \"!=\": \"$ne\",\n  \"<\": \"$lt\",\n  \"<=\": \"$lte\",\n  \">\": \"$gt\",\n  \">=\": \"$gte\",\n  in: \"$in\",\n  notIn: \"$nin\"\n};\nvar celCombinatorMap = {\n  and: \"&&\",\n  or: \"||\"\n};\nvar jsonLogicAdditionalOperators = {\n  startsWith: (a, b) => typeof a === \"string\" && a.startsWith(b),\n  endsWith: (a, b) => typeof a === \"string\" && a.endsWith(b)\n};\nvar numerifyValues = (rg) => ({\n  ...rg,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error TS doesn't keep track of odd/even indexes here\n  rules: rg.rules.map((r) => {\n    if (typeof r === \"string\") {\n      return r;\n    }\n    if (isRuleGroup(r)) {\n      return numerifyValues(r);\n    }\n    let { value } = r;\n    if (typeof value === \"string\") {\n      value = parseNumber(value, { parseNumbers: true });\n    }\n    return { ...r, value };\n  })\n});\nvar isValidValue = (v) => typeof v === \"string\" && v.length > 0 || typeof v === \"number\" && !isNaN(v) || typeof v !== \"string\" && typeof v !== \"number\";\nvar shouldRenderAsNumber = (v, parseNumbers) => parseNumbers && (typeof v === \"number\" || typeof v === \"bigint\" || typeof v === \"string\" && numericRegex.test(v));\nvar isValueProcessorLegacy = (vp) => vp.length >= 3;\nvar quoteFieldNamesWithArray = (quoteFieldNamesWith = [\"\", \"\"]) => Array.isArray(quoteFieldNamesWith) ? quoteFieldNamesWith : typeof quoteFieldNamesWith === \"string\" ? [quoteFieldNamesWith, quoteFieldNamesWith] : quoteFieldNamesWith ?? [\"\", \"\"];\n\n// src/utils/formatQuery/defaultRuleProcessorCEL.ts\nvar shouldNegate = (op) => /^(does)?not/i.test(op);\nvar escapeDoubleQuotes = (v, escapeQuotes) => typeof v !== \"string\" || !escapeQuotes ? v : v.replaceAll(`\"`, `\\\\\"`);\nvar defaultRuleProcessorCEL = ({ field, operator, value, valueSource }, { escapeQuotes, parseNumbers } = {}) => {\n  const valueIsField = valueSource === \"field\";\n  const operatorTL = operator.replace(/^=$/, \"==\");\n  const useBareValue = typeof value === \"number\" || typeof value === \"boolean\" || typeof value === \"bigint\" || shouldRenderAsNumber(value, parseNumbers);\n  switch (operatorTL) {\n    case \"<\":\n    case \"<=\":\n    case \"==\":\n    case \"!=\":\n    case \">\":\n    case \">=\":\n      return `${field} ${operatorTL} ${valueIsField || useBareValue ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`}`;\n    case \"contains\":\n    case \"doesNotContain\": {\n      const negate = shouldNegate(operatorTL) ? \"!\" : \"\";\n      return `${negate}${field}.contains(${valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`})`;\n    }\n    case \"beginsWith\":\n    case \"doesNotBeginWith\": {\n      const negate = shouldNegate(operatorTL) ? \"!\" : \"\";\n      return `${negate}${field}.startsWith(${valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`})`;\n    }\n    case \"endsWith\":\n    case \"doesNotEndWith\": {\n      const negate = shouldNegate(operatorTL) ? \"!\" : \"\";\n      return `${negate}${field}.endsWith(${valueIsField ? trimIfString(value) : `\"${escapeDoubleQuotes(value, escapeQuotes)}\"`})`;\n    }\n    case \"null\":\n      return `${field} == null`;\n    case \"notNull\":\n      return `${field} != null`;\n    case \"in\":\n    case \"notIn\": {\n      const negate = shouldNegate(operatorTL);\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return `${negate ? \"!(\" : \"\"}${field} in [${valueAsArray.map(\n          (val) => valueIsField || shouldRenderAsNumber(val, parseNumbers) ? `${trimIfString(val)}` : `\"${escapeDoubleQuotes(val, escapeQuotes)}\"`\n        ).join(\", \")}]${negate ? \")\" : \"\"}`;\n      } else {\n        return \"\";\n      }\n    }\n    case \"between\":\n    case \"notBetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && !!valueAsArray[0] && !!valueAsArray[1]) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true) ? parseNumber(first, { parseNumbers: true }) : NaN;\n        const secondNum = shouldRenderAsNumber(second, true) ? parseNumber(second, { parseNumbers: true }) : NaN;\n        let firstValue = isNaN(firstNum) ? valueIsField ? `${first}` : `\"${escapeDoubleQuotes(first, escapeQuotes)}\"` : firstNum;\n        let secondValue = isNaN(secondNum) ? valueIsField ? `${second}` : `\"${escapeDoubleQuotes(second, escapeQuotes)}\"` : secondNum;\n        if (firstValue === firstNum && secondValue === secondNum && secondNum < firstNum) {\n          const tempNum = secondNum;\n          secondValue = firstNum;\n          firstValue = tempNum;\n        }\n        if (operator === \"between\") {\n          return `(${field} >= ${firstValue} && ${field} <= ${secondValue})`;\n        } else {\n          return `(${field} < ${firstValue} || ${field} > ${secondValue})`;\n        }\n      } else {\n        return \"\";\n      }\n    }\n  }\n  return \"\";\n};\n\n// src/utils/formatQuery/defaultRuleProcessorMongoDB.ts\nvar escapeDoubleQuotes2 = (v) => typeof v !== \"string\" ? v : v.replaceAll(\"\\\\\", \"\\\\\\\\\").replaceAll(`\"`, `\\\\\"`);\nvar defaultRuleProcessorMongoDB = ({ field, operator, value, valueSource }, { parseNumbers } = {}) => {\n  const valueIsField = valueSource === \"field\";\n  const useBareValue = typeof value === \"number\" || typeof value === \"boolean\" || typeof value === \"bigint\" || shouldRenderAsNumber(value, parseNumbers);\n  if (operator === \"=\" && !valueIsField) {\n    return `{\"${field}\":${useBareValue ? trimIfString(value) : `\"${escapeDoubleQuotes2(value)}\"`}}`;\n  }\n  switch (operator) {\n    case \"<\":\n    case \"<=\":\n    case \"=\":\n    case \"!=\":\n    case \">\":\n    case \">=\": {\n      const mongoOperator = mongoOperators[operator];\n      return valueIsField ? `{\"$expr\":{\"${mongoOperator}\":[\"$${field}\",\"$${value}\"]}}` : `{\"${field}\":{\"${mongoOperator}\":${useBareValue ? trimIfString(value) : `\"${escapeDoubleQuotes2(value)}\"`}}}`;\n    }\n    case \"contains\":\n      return valueIsField ? `{\"$where\":\"this.${field}.includes(this.${value})\"}` : `{\"${field}\":{\"$regex\":\"${escapeDoubleQuotes2(value)}\"}}`;\n    case \"beginsWith\":\n      return valueIsField ? `{\"$where\":\"this.${field}.startsWith(this.${value})\"}` : `{\"${field}\":{\"$regex\":\"^${escapeDoubleQuotes2(value)}\"}}`;\n    case \"endsWith\":\n      return valueIsField ? `{\"$where\":\"this.${field}.endsWith(this.${value})\"}` : `{\"${field}\":{\"$regex\":\"${escapeDoubleQuotes2(value)}$\"}}`;\n    case \"doesNotContain\":\n      return valueIsField ? `{\"$where\":\"!this.${field}.includes(this.${value})\"}` : `{\"${field}\":{\"$not\":{\"$regex\":\"${escapeDoubleQuotes2(value)}\"}}}`;\n    case \"doesNotBeginWith\":\n      return valueIsField ? `{\"$where\":\"!this.${field}.startsWith(this.${value})\"}` : `{\"${field}\":{\"$not\":{\"$regex\":\"^${escapeDoubleQuotes2(value)}\"}}}`;\n    case \"doesNotEndWith\":\n      return valueIsField ? `{\"$where\":\"!this.${field}.endsWith(this.${value})\"}` : `{\"${field}\":{\"$not\":{\"$regex\":\"${escapeDoubleQuotes2(value)}$\"}}}`;\n    case \"null\":\n      return `{\"${field}\":null}`;\n    case \"notNull\":\n      return `{\"${field}\":{\"$ne\":null}}`;\n    case \"in\":\n    case \"notIn\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return valueIsField ? `{\"$where\":\"${operator === \"notIn\" ? \"!\" : \"\"}[${valueAsArray.map((val) => `this.${val}`).join(\",\")}].includes(this.${field})\"}` : `{\"${field}\":{\"${mongoOperators[operator]}\":[${valueAsArray.map(\n          (val) => shouldRenderAsNumber(val, parseNumbers) ? `${trimIfString(val)}` : `\"${escapeDoubleQuotes2(val)}\"`\n        ).join(\",\")}]}}`;\n      } else {\n        return \"\";\n      }\n    }\n    case \"between\":\n    case \"notBetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && isValidValue(valueAsArray[0]) && isValidValue(valueAsArray[1])) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true) ? parseNumber(first, { parseNumbers: true }) : NaN;\n        const secondNum = shouldRenderAsNumber(second, true) ? parseNumber(second, { parseNumbers: true }) : NaN;\n        const firstValue = valueIsField || !isNaN(firstNum) ? `${first}` : `\"${escapeDoubleQuotes2(first)}\"`;\n        const secondValue = valueIsField || !isNaN(secondNum) ? `${second}` : `\"${escapeDoubleQuotes2(second)}\"`;\n        if (operator === \"between\") {\n          return valueIsField ? `{\"$and\":[{\"$expr\":{\"$gte\":[\"$${field}\",\"$${firstValue}\"]}},{\"$expr\":{\"$lte\":[\"$${field}\",\"$${secondValue}\"]}}]}` : `{\"${field}\":{\"$gte\":${firstValue},\"$lte\":${secondValue}}}`;\n        } else {\n          return valueIsField ? `{\"$or\":[{\"$expr\":{\"$lt\":[\"$${field}\",\"$${firstValue}\"]}},{\"$expr\":{\"$gt\":[\"$${field}\",\"$${secondValue}\"]}}]}` : `{\"$or\":[{\"${field}\":{\"$lt\":${firstValue}}},{\"${field}\":{\"$gt\":${secondValue}}}]}`;\n        }\n      } else {\n        return \"\";\n      }\n    }\n  }\n  return \"\";\n};\n\n// src/utils/formatQuery/defaultRuleProcessorSpEL.ts\nvar shouldNegate2 = (op) => /^(does)?not/i.test(op);\nvar wrapInNegation = (clause, negate) => negate ? `!(${clause})` : `${clause}`;\nvar escapeSingleQuotes = (v, escapeQuotes) => typeof v !== \"string\" || !escapeQuotes ? v : v.replaceAll(`'`, `\\\\'`);\nvar defaultRuleProcessorSpEL = ({ field, operator, value, valueSource }, { escapeQuotes, parseNumbers } = {}) => {\n  const valueIsField = valueSource === \"field\";\n  const operatorTL = operator.replace(/^=$/, \"==\");\n  const useBareValue = typeof value === \"number\" || typeof value === \"boolean\" || typeof value === \"bigint\" || shouldRenderAsNumber(value, parseNumbers);\n  switch (operatorTL) {\n    case \"<\":\n    case \"<=\":\n    case \"==\":\n    case \"!=\":\n    case \">\":\n    case \">=\":\n      return `${field} ${operatorTL} ${valueIsField || useBareValue ? trimIfString(value) : `'${escapeSingleQuotes(value, escapeQuotes)}'`}`;\n    case \"contains\":\n    case \"doesNotContain\":\n      return wrapInNegation(\n        `${field} matches ${valueIsField || useBareValue ? trimIfString(value) : `'${escapeSingleQuotes(value, escapeQuotes)}'`}`,\n        shouldNegate2(operatorTL)\n      );\n    case \"beginsWith\":\n    case \"doesNotBeginWith\": {\n      const valueTL = valueIsField ? `'^'.concat(${trimIfString(value)})` : `'${typeof value === \"string\" && !value.startsWith(\"^\") || useBareValue ? \"^\" : \"\"}${escapeSingleQuotes(value, escapeQuotes)}'`;\n      return wrapInNegation(`${field} matches ${valueTL}`, shouldNegate2(operatorTL));\n    }\n    case \"endsWith\":\n    case \"doesNotEndWith\": {\n      const valueTL = valueIsField ? `${trimIfString(value)}.concat('$')` : `'${escapeSingleQuotes(value, escapeQuotes)}${typeof value === \"string\" && !value.endsWith(\"$\") || useBareValue ? \"$\" : \"\"}'`;\n      return wrapInNegation(`${field} matches ${valueTL}`, shouldNegate2(operatorTL));\n    }\n    case \"null\":\n      return `${field} == null`;\n    case \"notNull\":\n      return `${field} != null`;\n    case \"in\":\n    case \"notIn\": {\n      const negate = shouldNegate2(operatorTL) ? \"!\" : \"\";\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return `${negate}(${valueAsArray.map(\n          (val) => `${field} == ${valueIsField || shouldRenderAsNumber(val, parseNumbers) ? `${trimIfString(val)}` : `'${escapeSingleQuotes(val, escapeQuotes)}'`}`\n        ).join(\" or \")})`;\n      } else {\n        return \"\";\n      }\n    }\n    case \"between\":\n    case \"notBetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && !!valueAsArray[0] && !!valueAsArray[1]) {\n        const [first, second] = valueAsArray;\n        const firstNum = shouldRenderAsNumber(first, true) ? parseNumber(first, { parseNumbers: true }) : NaN;\n        const secondNum = shouldRenderAsNumber(second, true) ? parseNumber(second, { parseNumbers: true }) : NaN;\n        let firstValue = isNaN(firstNum) ? valueIsField ? `${first}` : `'${escapeSingleQuotes(first, escapeQuotes)}'` : firstNum;\n        let secondValue = isNaN(secondNum) ? valueIsField ? `${second}` : `'${escapeSingleQuotes(second, escapeQuotes)}'` : secondNum;\n        if (firstValue === firstNum && secondValue === secondNum && secondNum < firstNum) {\n          const tempNum = secondNum;\n          secondValue = firstNum;\n          firstValue = tempNum;\n        }\n        if (operator === \"between\") {\n          return `(${field} >= ${firstValue} and ${field} <= ${secondValue})`;\n        } else {\n          return `(${field} < ${firstValue} or ${field} > ${secondValue})`;\n        }\n      } else {\n        return \"\";\n      }\n    }\n  }\n  return \"\";\n};\n\n// src/utils/formatQuery/defaultValueProcessorByRule.ts\nvar escapeSingleQuotes2 = (v, escapeQuotes) => escapeQuotes && typeof v === \"string\" ? v.replaceAll(`'`, `''`) : v;\nvar defaultValueProcessorByRule = ({ operator, value, valueSource }, { escapeQuotes, parseNumbers, quoteFieldNamesWith } = {}) => {\n  const valueIsField = valueSource === \"field\";\n  const [qfnwPre, qfnwPost] = quoteFieldNamesWithArray(quoteFieldNamesWith);\n  const operatorLowerCase = operator.toLowerCase();\n  const wrapFieldName = (f) => `${qfnwPre}${f}${qfnwPost}`;\n  switch (operatorLowerCase) {\n    case \"null\":\n    case \"notnull\": {\n      return \"\";\n    }\n    case \"in\":\n    case \"notin\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length > 0) {\n        return `(${valueAsArray.map(\n          (v) => valueIsField ? wrapFieldName(v) : shouldRenderAsNumber(v, parseNumbers) ? `${trimIfString(v)}` : `'${escapeSingleQuotes2(v, escapeQuotes)}'`\n        ).join(\", \")})`;\n      }\n      return \"\";\n    }\n    case \"between\":\n    case \"notbetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && isValidValue(valueAsArray[0]) && isValidValue(valueAsArray[1])) {\n        const [first, second] = valueAsArray;\n        return valueIsField ? `${wrapFieldName(first)} and ${wrapFieldName(second)}` : shouldRenderAsNumber(first, parseNumbers) && shouldRenderAsNumber(second, parseNumbers) ? `${trimIfString(first)} and ${trimIfString(second)}` : `'${escapeSingleQuotes2(first, escapeQuotes)}' and '${escapeSingleQuotes2(\n          second,\n          escapeQuotes\n        )}'`;\n      }\n      return \"\";\n    }\n    case \"contains\":\n    case \"doesnotcontain\":\n      return valueIsField ? `'%' || ${wrapFieldName(value)} || '%'` : `'%${escapeSingleQuotes2(value, escapeQuotes)}%'`;\n    case \"beginswith\":\n    case \"doesnotbeginwith\":\n      return valueIsField ? `${wrapFieldName(value)} || '%'` : `'${escapeSingleQuotes2(value, escapeQuotes)}%'`;\n    case \"endswith\":\n    case \"doesnotendwith\":\n      return valueIsField ? `'%' || ${wrapFieldName(value)}` : `'%${escapeSingleQuotes2(value, escapeQuotes)}'`;\n  }\n  if (typeof value === \"boolean\") {\n    return value ? \"TRUE\" : \"FALSE\";\n  }\n  return valueIsField ? wrapFieldName(value) : shouldRenderAsNumber(value, parseNumbers) ? `${trimIfString(value)}` : `'${escapeSingleQuotes2(value, escapeQuotes)}'`;\n};\n\n// src/utils/formatQuery/defaultRuleProcessorElasticSearch.ts\nvar rangeOperatorMap = { \"<\": \"lt\", \"<=\": \"lte\", \">\": \"gt\", \">=\": \"gte\" };\nvar negateIfNotOp = (op, elasticSearchRule) => /^(does)?not/i.test(op) ? { bool: { must_not: elasticSearchRule } } : elasticSearchRule;\nvar escapeSQ = (s) => s?.replace(/('|\\\\)/g, `\\\\$1`);\nvar textFunctionMap = {\n  beginsWith: \"startsWith\",\n  doesNotContain: \"contains\",\n  doesNotBeginWith: \"startsWith\",\n  doesNotEndWith: \"endsWith\"\n};\nvar getTextScript = (f, o, v) => {\n  const script = `doc['${f}'].${textFunctionMap[o] ?? o}(doc['${v}'])`;\n  return o.startsWith(\"d\") ? `!${script}` : script;\n};\nvar valueRenderer = (v, parseNumbers) => typeof v === \"boolean\" ? v : shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v;\nvar defaultRuleProcessorElasticSearch = ({ field, operator, value, valueSource }, { parseNumbers } = {}) => {\n  if (valueSource === \"field\") {\n    if (toArray(value).some((v) => typeof v !== \"string\"))\n      return false;\n    const fieldForScript = escapeSQ(field);\n    switch (operator) {\n      case \"=\":\n      case \"!=\":\n      case \">\":\n      case \">=\":\n      case \"<\":\n      case \"<=\": {\n        const operatorForScript = operator === \"=\" ? \"==\" : operator;\n        const valueForScript = escapeSQ(value);\n        return !valueForScript ? false : {\n          bool: {\n            filter: {\n              script: {\n                script: `doc['${fieldForScript}'] ${operatorForScript} doc['${valueForScript}']`\n              }\n            }\n          }\n        };\n      }\n      case \"in\":\n      case \"notIn\": {\n        const valueAsArray = toArray(value);\n        if (valueAsArray.length > 0) {\n          const arr = valueAsArray.map((v) => ({\n            bool: { filter: { script: { script: `doc['${fieldForScript}'] == doc['${v}']` } } }\n          }));\n          return { bool: operator === \"in\" ? { should: arr } : { must_not: arr } };\n        }\n        return false;\n      }\n      case \"between\":\n      case \"notBetween\": {\n        const valueAsArray = toArray(value);\n        if (valueAsArray.length >= 2 && valueAsArray[0] && valueAsArray[1]) {\n          const script = `doc['${fieldForScript}'] >= doc['${valueAsArray[0]}'] && doc['${fieldForScript}'] <= doc['${valueAsArray[1]}']`;\n          return {\n            bool: {\n              filter: { script: { script: operator === \"notBetween\" ? `!(${script})` : script } }\n            }\n          };\n        }\n        return false;\n      }\n      case \"contains\":\n      case \"doesNotContain\":\n      case \"beginsWith\":\n      case \"doesNotBeginWith\":\n      case \"endsWith\":\n      case \"doesNotEndWith\": {\n        const valueForScript = escapeSQ(value);\n        if (!valueForScript)\n          return false;\n        const script = getTextScript(fieldForScript, operator, valueForScript);\n        return {\n          bool: {\n            filter: {\n              script: {\n                script\n              }\n            }\n          }\n        };\n      }\n    }\n  }\n  switch (operator) {\n    case \"<\":\n    case \"<=\":\n    case \">\":\n    case \">=\":\n      return {\n        range: {\n          [field]: {\n            [rangeOperatorMap[operator]]: valueRenderer(value, parseNumbers)\n          }\n        }\n      };\n    case \"=\":\n      return { term: { [field]: valueRenderer(value, parseNumbers) } };\n    case \"!=\":\n      return { bool: { must_not: { term: { [field]: valueRenderer(value, parseNumbers) } } } };\n    case \"null\":\n      return { bool: { must_not: { exists: { field } } } };\n    case \"notNull\":\n      return { exists: { field } };\n    case \"in\":\n    case \"notIn\": {\n      const valueAsArray = toArray(value).map((v) => valueRenderer(v, parseNumbers));\n      if (valueAsArray.length > 0) {\n        const arr = valueAsArray.map((v) => ({ term: { [field]: valueRenderer(v, parseNumbers) } }));\n        return { bool: operator === \"in\" ? { should: arr } : { must_not: arr } };\n      }\n      return false;\n    }\n    case \"between\":\n    case \"notBetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && isValidValue(valueAsArray[0]) && isValidValue(valueAsArray[1])) {\n        let [first, second] = valueAsArray;\n        if (shouldRenderAsNumber(first, true) && shouldRenderAsNumber(second, true)) {\n          const firstNum = parseNumber(first, { parseNumbers: true });\n          const secondNum = parseNumber(second, { parseNumbers: true });\n          if (secondNum < firstNum) {\n            const tempNum = secondNum;\n            second = firstNum;\n            first = tempNum;\n          } else {\n            first = firstNum;\n            second = secondNum;\n          }\n        }\n        return negateIfNotOp(operator, { range: { [field]: { gte: first, lte: second } } });\n      }\n      return false;\n    }\n    case \"contains\":\n    case \"doesNotContain\":\n      return negateIfNotOp(operator, { regexp: { [field]: { value } } });\n    case \"beginsWith\":\n    case \"doesNotBeginWith\":\n      return negateIfNotOp(operator, { regexp: { [field]: { value: `^${value}` } } });\n    case \"endsWith\":\n    case \"doesNotEndWith\":\n      return negateIfNotOp(operator, { regexp: { [field]: { value: `${value}$` } } });\n  }\n  return false;\n};\n\n// src/utils/formatQuery/defaultRuleProcessorJsonLogic.ts\nvar convertOperator = (op) => op.replace(/^(=)$/, \"$1=\").replace(/^notNull$/i, \"!=\").replace(/^null$/i, \"==\");\nvar negateIfNotOp2 = (op, jsonRule) => /^(does)?not/i.test(op) ? { \"!\": jsonRule } : jsonRule;\nvar defaultRuleProcessorJsonLogic = ({ field, operator, value, valueSource }, { parseNumbers } = {}) => {\n  const valueIsField = valueSource === \"field\";\n  const fieldObject = { var: field };\n  const fieldOrNumberRenderer = (v) => valueIsField ? { var: `${v}` } : shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v;\n  switch (operator) {\n    case \"<\":\n    case \"<=\":\n    case \"=\":\n    case \"!=\":\n    case \">\":\n    case \">=\":\n      return {\n        [convertOperator(operator)]: [fieldObject, fieldOrNumberRenderer(value)]\n      };\n    case \"null\":\n    case \"notNull\": {\n      return {\n        [`${operator === \"notNull\" ? \"!\" : \"=\"}=`]: [fieldObject, null]\n      };\n    }\n    case \"in\":\n    case \"notIn\": {\n      const valueAsArray = toArray(value).map(fieldOrNumberRenderer);\n      if (valueAsArray.length > 0) {\n        const jsonRule = { in: [fieldObject, valueAsArray] };\n        return negateIfNotOp2(operator, jsonRule);\n      }\n      return false;\n    }\n    case \"between\":\n    case \"notBetween\": {\n      const valueAsArray = toArray(value);\n      if (valueAsArray.length >= 2 && isValidValue(valueAsArray[0]) && isValidValue(valueAsArray[1])) {\n        let [first, second] = valueAsArray;\n        if (!valueIsField && shouldRenderAsNumber(first, true) && shouldRenderAsNumber(second, true)) {\n          const firstNum = parseNumber(first, { parseNumbers: true });\n          const secondNum = parseNumber(second, { parseNumbers: true });\n          if (secondNum < firstNum) {\n            const tempNum = secondNum;\n            second = firstNum;\n            first = tempNum;\n          } else {\n            first = firstNum;\n            second = secondNum;\n          }\n        } else if (valueIsField) {\n          first = { var: first };\n          second = { var: second };\n        }\n        const jsonRule = { \"<=\": [first, fieldObject, second] };\n        return negateIfNotOp2(operator, jsonRule);\n      }\n      return false;\n    }\n    case \"contains\":\n    case \"doesNotContain\": {\n      const jsonRule = {\n        in: [fieldOrNumberRenderer(value), fieldObject]\n      };\n      return negateIfNotOp2(operator, jsonRule);\n    }\n    case \"beginsWith\":\n    case \"doesNotBeginWith\": {\n      const jsonRule = {\n        startsWith: [fieldObject, fieldOrNumberRenderer(value)]\n      };\n      return negateIfNotOp2(operator, jsonRule);\n    }\n    case \"endsWith\":\n    case \"doesNotEndWith\": {\n      const jsonRule = {\n        endsWith: [fieldObject, fieldOrNumberRenderer(value)]\n      };\n      return negateIfNotOp2(operator, jsonRule);\n    }\n  }\n  return false;\n};\n\n// src/utils/formatQuery/defaultRuleProcessorParameterized.ts\nvar defaultRuleProcessorParameterized = (rule, opts, meta) => {\n  const {\n    fieldData,\n    format,\n    getNextNamedParam,\n    parseNumbers,\n    paramPrefix,\n    paramsKeepPrefix,\n    numberedParams,\n    quoteFieldNamesWith = [\"\", \"\"],\n    valueProcessor = defaultValueProcessorByRule\n  } = opts ?? {};\n  const { processedParams = [] } = meta ?? {};\n  const parameterized = format === \"parameterized\";\n  const params = [];\n  const paramsNamed = {};\n  const finalize = (sql) => {\n    if (parameterized) {\n      return { sql, params };\n    }\n    return { sql, params: paramsNamed };\n  };\n  const value = valueProcessor(rule, {\n    parseNumbers,\n    quoteFieldNamesWith,\n    fieldData,\n    format\n  });\n  const sqlOperator = mapSQLOperator(rule.operator);\n  const sqlOperatorLowerCase = sqlOperator.toLowerCase();\n  if ((sqlOperatorLowerCase === \"in\" || sqlOperatorLowerCase === \"not in\" || sqlOperatorLowerCase === \"between\" || sqlOperatorLowerCase === \"not between\") && !value) {\n    return finalize(\"\");\n  } else if (sqlOperatorLowerCase === \"is null\" || sqlOperatorLowerCase === \"is not null\") {\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator}`\n    );\n  } else if (rule.valueSource === \"field\") {\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${value}`.trim()\n    );\n  }\n  if (sqlOperatorLowerCase === \"in\" || sqlOperatorLowerCase === \"not in\") {\n    const splitValue = toArray(rule.value);\n    if (parameterized) {\n      splitValue.forEach(\n        (v) => params.push(shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v)\n      );\n      return finalize(\n        `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} (${splitValue.map(\n          (_v, i) => numberedParams ? `${paramPrefix}${processedParams.length + 1 + splitValue.length - (splitValue.length - i)}` : \"?\"\n        ).join(\", \")})`\n      );\n    }\n    const inParams = [];\n    splitValue.forEach((v) => {\n      const thisParamName = getNextNamedParam(rule.field);\n      inParams.push(`${paramPrefix}${thisParamName}`);\n      paramsNamed[`${paramsKeepPrefix ? paramPrefix : \"\"}${thisParamName}`] = shouldRenderAsNumber(\n        v,\n        parseNumbers\n      ) ? parseNumber(v, { parseNumbers }) : v;\n    });\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} (${inParams.join(\", \")})`\n    );\n  } else if (sqlOperatorLowerCase === \"between\" || sqlOperatorLowerCase === \"not between\") {\n    const valueAsArray = toArray(rule.value);\n    const [first, second] = valueAsArray.slice(0, 2).map((v) => shouldRenderAsNumber(v, parseNumbers) ? parseNumber(v, { parseNumbers }) : v);\n    if (parameterized) {\n      params.push(first);\n      params.push(second);\n      return finalize(\n        `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${numberedParams ? `${paramPrefix}${processedParams.length + 1}` : \"?\"} and ${numberedParams ? `${paramPrefix}${processedParams.length + 2}` : \"?\"}`\n      );\n    }\n    const firstParamName = getNextNamedParam(rule.field);\n    const secondParamName = getNextNamedParam(rule.field);\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : \"\"}${firstParamName}`] = first;\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : \"\"}${secondParamName}`] = second;\n    return finalize(\n      `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${paramPrefix}${firstParamName} and ${paramPrefix}${secondParamName}`\n    );\n  }\n  let paramValue = rule.value;\n  if (typeof rule.value === \"string\") {\n    if (shouldRenderAsNumber(rule.value, parseNumbers)) {\n      paramValue = parseNumber(rule.value, { parseNumbers });\n    } else {\n      paramValue = /^'.*'$/g.test(value) ? value.replace(/(^'|'$)/g, \"\") : (\n        /* istanbul ignore next */\n        value\n      );\n    }\n  }\n  let paramName = \"\";\n  if (parameterized) {\n    params.push(paramValue);\n  } else {\n    paramName = getNextNamedParam(rule.field);\n    paramsNamed[`${paramsKeepPrefix ? paramPrefix : \"\"}${paramName}`] = paramValue;\n  }\n  return finalize(\n    `${quoteFieldNamesWith[0]}${rule.field}${quoteFieldNamesWith[1]} ${sqlOperator} ${parameterized ? numberedParams ? `${paramPrefix}${processedParams.length + 1}` : \"?\" : `${paramPrefix}${paramName}`}`.trim()\n  );\n};\n\n// src/utils/formatQuery/defaultRuleProcessorSQL.ts\nvar defaultRuleProcessorSQL = (rule, opts) => {\n  const {\n    parseNumbers,\n    escapeQuotes,\n    quoteFieldNamesWith = [\"\", \"\"],\n    valueProcessor = defaultValueProcessorByRule\n  } = opts ?? {};\n  const value = valueProcessor(rule, { parseNumbers, escapeQuotes, quoteFieldNamesWith });\n  const operator = mapSQLOperator(rule.operator);\n  const operatorLowerCase = operator.toLowerCase();\n  if ((operatorLowerCase === \"in\" || operatorLowerCase === \"not in\" || operatorLowerCase === \"between\" || operatorLowerCase === \"not between\") && !value) {\n    return \"\";\n  }\n  const [qPre, qPost] = quoteFieldNamesWithArray(quoteFieldNamesWith);\n  return `${qPre}${rule.field}${qPost} ${operator} ${value}`.trim();\n};\n\n// src/utils/isRuleOrGroupValid.ts\nvar isValidationResult = (vr) => isPojo(vr) && typeof vr.valid === \"boolean\";\nvar isRuleOrGroupValid = (rg, validationResult, validator) => {\n  if (typeof validationResult === \"boolean\") {\n    return validationResult;\n  }\n  if (isValidationResult(validationResult)) {\n    return validationResult.valid;\n  }\n  if (typeof validator === \"function\" && !isRuleGroup(rg)) {\n    const vr = validator(rg);\n    if (typeof vr === \"boolean\") {\n      return vr;\n    }\n    if (isValidationResult(vr)) {\n      return vr.valid;\n    }\n  }\n  return true;\n};\n\n// src/utils/formatQuery/formatQuery.ts\nfunction formatQuery(ruleGroup, options = {}) {\n  let format = \"json\";\n  let valueProcessorInternal = defaultValueProcessorByRule;\n  let ruleProcessorInternal = null;\n  let quoteFieldNamesWith = [\"\", \"\"];\n  let validator = () => true;\n  let fields = [];\n  let validationMap = {};\n  let fallbackExpression = \"\";\n  let paramPrefix = \":\";\n  let paramsKeepPrefix = false;\n  let numberedParams = false;\n  let parseNumbers = false;\n  let placeholderFieldName = defaultPlaceholderFieldName;\n  let placeholderOperatorName = defaultPlaceholderOperatorName;\n  if (typeof options === \"string\") {\n    format = options.toLowerCase();\n    if (format === \"mongodb\") {\n      ruleProcessorInternal = defaultRuleProcessorMongoDB;\n    } else if (format === \"parameterized\") {\n      ruleProcessorInternal = defaultRuleProcessorParameterized;\n    } else if (format === \"parameterized_named\") {\n      ruleProcessorInternal = defaultRuleProcessorParameterized;\n    } else if (format === \"cel\") {\n      ruleProcessorInternal = defaultRuleProcessorCEL;\n    } else if (format === \"spel\") {\n      ruleProcessorInternal = defaultRuleProcessorSpEL;\n    } else if (format === \"jsonlogic\") {\n      ruleProcessorInternal = defaultRuleProcessorJsonLogic;\n    } else if (format === \"elasticsearch\") {\n      ruleProcessorInternal = defaultRuleProcessorElasticSearch;\n    }\n  } else {\n    format = (options.format ?? \"json\").toLowerCase();\n    const { valueProcessor = null, ruleProcessor = null } = options;\n    if (typeof ruleProcessor === \"function\") {\n      ruleProcessorInternal = ruleProcessor;\n    }\n    valueProcessorInternal = typeof valueProcessor === \"function\" ? (r, opts) => isValueProcessorLegacy(valueProcessor) ? valueProcessor(r.field, r.operator, r.value, r.valueSource) : valueProcessor(r, opts) : format === \"mongodb\" ? ruleProcessorInternal ?? defaultRuleProcessorMongoDB : format === \"cel\" ? ruleProcessorInternal ?? defaultRuleProcessorCEL : format === \"spel\" ? ruleProcessorInternal ?? defaultRuleProcessorSpEL : format === \"jsonlogic\" ? ruleProcessorInternal ?? defaultRuleProcessorJsonLogic : format == \"elasticsearch\" ? ruleProcessorInternal ?? defaultRuleProcessorElasticSearch : defaultValueProcessorByRule;\n    quoteFieldNamesWith = quoteFieldNamesWithArray(options.quoteFieldNamesWith);\n    validator = options.validator ?? (() => true);\n    fields = toFullOptionList(options.fields ?? []);\n    fallbackExpression = options.fallbackExpression ?? \"\";\n    paramPrefix = options.paramPrefix ?? \":\";\n    paramsKeepPrefix = !!options.paramsKeepPrefix;\n    numberedParams = !!options.numberedParams;\n    parseNumbers = !!options.parseNumbers;\n    placeholderFieldName = options.placeholderFieldName ?? defaultPlaceholderFieldName;\n    placeholderOperatorName = options.placeholderOperatorName ?? defaultPlaceholderOperatorName;\n  }\n  if (!fallbackExpression) {\n    fallbackExpression = format === \"mongodb\" ? '\"$and\":[{\"$expr\":true}]' : format === \"cel\" || format === \"spel\" ? \"1 == 1\" : \"(1 = 1)\";\n  }\n  if (format === \"json\" || format === \"json_without_ids\") {\n    const rg = parseNumbers ? numerifyValues(ruleGroup) : ruleGroup;\n    if (format === \"json\") {\n      return JSON.stringify(rg, null, 2);\n    }\n    return JSON.stringify(\n      rg,\n      (key, value) => (\n        // Remove `id` and `path` keys; leave everything else unchanged.\n        key === \"id\" || key === \"path\" ? void 0 : value\n      )\n    );\n  }\n  if (typeof validator === \"function\") {\n    const validationResult = validator(ruleGroup);\n    if (typeof validationResult === \"boolean\") {\n      if (validationResult === false) {\n        return format === \"parameterized\" ? { sql: fallbackExpression, params: [] } : format === \"parameterized_named\" ? { sql: fallbackExpression, params: {} } : format === \"mongodb\" ? `{${fallbackExpression}}` : format === \"jsonlogic\" ? false : format === \"elasticsearch\" ? {} : fallbackExpression;\n      }\n    } else {\n      validationMap = validationResult;\n    }\n  }\n  const validatorMap = {};\n  const uniqueFields = toFlatOptionArray(fields);\n  uniqueFields.forEach((f) => {\n    if (typeof f.validator === \"function\") {\n      validatorMap[f.value ?? /* istanbul ignore next */\n      f.name] = f.validator;\n    }\n  });\n  const validateRule = (rule) => {\n    let validationResult = void 0;\n    let fieldValidator = void 0;\n    if (rule.id) {\n      validationResult = validationMap[rule.id];\n    }\n    if (uniqueFields.length) {\n      const fieldArr = uniqueFields.filter((f) => f.name === rule.field);\n      if (fieldArr.length) {\n        const field = fieldArr[0];\n        if (typeof field.validator === \"function\") {\n          fieldValidator = field.validator;\n        }\n      }\n    }\n    return [validationResult, fieldValidator];\n  };\n  if (format === \"sql\") {\n    const processRuleGroup = (rg, outermostOrLonelyInGroup) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return outermostOrLonelyInGroup ? fallbackExpression : (\n          /* istanbul ignore next */\n          \"\"\n        );\n      }\n      const processedRules = rg.rules.map((rule) => {\n        if (typeof rule === \"string\") {\n          return rule;\n        }\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule, rg.rules.length === 1);\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return \"\";\n        }\n        const escapeQuotes = (rule.valueSource ?? \"value\") === \"value\";\n        const fieldData = getOption(fields, rule.field);\n        if (typeof ruleProcessorInternal === \"function\") {\n          return ruleProcessorInternal(rule, {\n            parseNumbers,\n            escapeQuotes,\n            quoteFieldNamesWith,\n            fieldData,\n            format\n          });\n        }\n        return defaultRuleProcessorSQL(rule, {\n          parseNumbers,\n          escapeQuotes,\n          valueProcessor: valueProcessorInternal,\n          quoteFieldNamesWith,\n          fieldData,\n          format\n        });\n      });\n      if (processedRules.length === 0) {\n        return fallbackExpression;\n      }\n      return `${rg.not ? \"NOT \" : \"\"}(${processedRules.filter(Boolean).join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : \" \")})`;\n    };\n    return processRuleGroup(ruleGroup, true);\n  }\n  if (format === \"parameterized\" || format === \"parameterized_named\") {\n    const parameterized = format === \"parameterized\";\n    const params = [];\n    const paramsNamed = {};\n    const fieldParams = /* @__PURE__ */ new Map();\n    const getNextNamedParam = (field) => {\n      if (!fieldParams.has(field)) {\n        fieldParams.set(field, /* @__PURE__ */ new Set());\n      }\n      const nextNamedParam = `${field}_${fieldParams.get(field).size + 1}`;\n      fieldParams.get(field).add(nextNamedParam);\n      return nextNamedParam;\n    };\n    const processRule = (rule) => {\n      const [validationResult, fieldValidator] = validateRule(rule);\n      if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n        return \"\";\n      }\n      const fieldData = getOption(fields, rule.field);\n      const fieldParamNames = Object.fromEntries(\n        Array.from(fieldParams.entries()).map(([f, s]) => [\n          f,\n          Array.from(s)\n        ])\n      );\n      const processedRule = (typeof ruleProcessorInternal === \"function\" ? ruleProcessorInternal : defaultRuleProcessorParameterized)(\n        rule,\n        {\n          getNextNamedParam,\n          fieldParamNames,\n          parseNumbers,\n          quoteFieldNamesWith,\n          fieldData,\n          format,\n          paramPrefix,\n          paramsKeepPrefix,\n          numberedParams,\n          fallbackExpression,\n          valueProcessor: valueProcessorInternal,\n          fields,\n          placeholderFieldName,\n          placeholderOperatorName,\n          validator\n        },\n        {\n          processedParams: params\n        }\n      );\n      if (!isPojo(processedRule)) {\n        return \"\";\n      }\n      const { sql, params: customParams } = processedRule;\n      if (typeof sql !== \"string\" || !sql) {\n        return \"\";\n      }\n      if (format === \"parameterized\" && Array.isArray(customParams)) {\n        params.push(...customParams);\n      } else if (format === \"parameterized_named\" && isPojo(customParams)) {\n        Object.assign(paramsNamed, customParams);\n        Object.keys(customParams).forEach((p) => fieldParams.get(rule.field)?.add(p));\n      }\n      return sql;\n    };\n    const processRuleGroup = (rg, outermostOrLonelyInGroup) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return outermostOrLonelyInGroup ? fallbackExpression : (\n          /* istanbul ignore next */\n          \"\"\n        );\n      }\n      const processedRules = rg.rules.map((rule) => {\n        if (typeof rule === \"string\") {\n          return rule;\n        }\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule, rg.rules.length === 1);\n        }\n        return processRule(rule);\n      });\n      if (processedRules.length === 0) {\n        return fallbackExpression;\n      }\n      return `${rg.not ? \"NOT \" : \"\"}(${processedRules.filter(Boolean).join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : \" \")})`;\n    };\n    if (parameterized) {\n      return { sql: processRuleGroup(ruleGroup, true), params };\n    }\n    return { sql: processRuleGroup(ruleGroup, true), params: paramsNamed };\n  }\n  if (format === \"mongodb\") {\n    const processRuleGroup = (rg, outermost) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return outermost ? fallbackExpression : \"\";\n      }\n      const combinator = `\"$${rg.combinator.toLowerCase()}\"`;\n      let hasChildRules = false;\n      const expressions = rg.rules.map((rule) => {\n        if (isRuleGroup(rule)) {\n          const processedRuleGroup = processRuleGroup(rule);\n          if (processedRuleGroup) {\n            hasChildRules = true;\n            return /^\\{.+\\}$/.test(processedRuleGroup) ? processedRuleGroup : `{${processedRuleGroup}}`;\n          }\n          return \"\";\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return \"\";\n        }\n        const fieldData = getOption(fields, rule.field);\n        return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n          parseNumbers,\n          fieldData,\n          format\n        });\n      }).filter(Boolean);\n      return expressions.length > 0 ? expressions.length === 1 && !hasChildRules ? expressions[0] : `${combinator}:[${expressions.join(\",\")}]` : fallbackExpression;\n    };\n    const rgStandard = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n    const processedQuery = processRuleGroup(rgStandard, true);\n    return /^\\{.+\\}$/.test(processedQuery) ? processedQuery : `{${processedQuery}}`;\n  }\n  if (format === \"cel\") {\n    const processRuleGroup = (rg, outermost) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return outermost ? fallbackExpression : \"\";\n      }\n      const expression = rg.rules.map((rule) => {\n        if (typeof rule === \"string\") {\n          return celCombinatorMap[rule];\n        }\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule);\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return \"\";\n        }\n        const fieldData = getOption(fields, rule.field);\n        return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n          parseNumbers,\n          escapeQuotes: (rule.valueSource ?? \"value\") === \"value\",\n          fieldData,\n          format\n        });\n      }).filter(Boolean).join(\n        isRuleGroupType(rg) ? ` ${celCombinatorMap[rg.combinator]} ` : \" \"\n      );\n      const [prefix, suffix] = rg.not || !outermost ? [`${rg.not ? \"!\" : \"\"}(`, \")\"] : [\"\", \"\"];\n      return expression ? `${prefix}${expression}${suffix}` : fallbackExpression;\n    };\n    return processRuleGroup(ruleGroup, true);\n  }\n  if (format === \"spel\") {\n    const processRuleGroup = (rg, outermost) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return outermost ? fallbackExpression : \"\";\n      }\n      const expression = rg.rules.map((rule) => {\n        if (typeof rule === \"string\") {\n          return rule;\n        }\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule);\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return \"\";\n        }\n        const fieldData = getOption(fields, rule.field);\n        return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n          parseNumbers,\n          escapeQuotes: (rule.valueSource ?? \"value\") === \"value\",\n          fieldData,\n          format\n        });\n      }).filter(Boolean).join(isRuleGroupType(rg) ? ` ${rg.combinator} ` : \" \");\n      const [prefix, suffix] = rg.not || !outermost ? [`${rg.not ? \"!\" : \"\"}(`, \")\"] : [\"\", \"\"];\n      return expression ? `${prefix}${expression}${suffix}` : fallbackExpression;\n    };\n    return processRuleGroup(ruleGroup, true);\n  }\n  if (format === \"jsonlogic\") {\n    const query = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n    const processRuleGroup = (rg, outermost) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return false;\n      }\n      const processedRules = rg.rules.map((rule) => {\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule);\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return false;\n        }\n        const fieldData = getOption(fields, rule.field);\n        return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n          parseNumbers,\n          fieldData,\n          format\n        });\n      }).filter(Boolean);\n      if (processedRules.length === 0) {\n        return false;\n      }\n      const jsonRuleGroup = processedRules.length === 1 && outermost ? processedRules[0] : {\n        [rg.combinator]: processedRules\n      };\n      return rg.not ? { \"!\": jsonRuleGroup } : jsonRuleGroup;\n    };\n    return processRuleGroup(query, true);\n  }\n  if (format === \"elasticsearch\") {\n    const query = isRuleGroupType(ruleGroup) ? ruleGroup : convertFromIC(ruleGroup);\n    const processRuleGroup = (rg) => {\n      if (!isRuleOrGroupValid(rg, validationMap[rg.id ?? /* istanbul ignore next */\n      \"\"])) {\n        return false;\n      }\n      const processedRules = rg.rules.map((rule) => {\n        if (isRuleGroup(rule)) {\n          return processRuleGroup(rule);\n        }\n        const [validationResult, fieldValidator] = validateRule(rule);\n        if (!isRuleOrGroupValid(rule, validationResult, fieldValidator) || rule.field === placeholderFieldName || rule.operator === placeholderOperatorName) {\n          return false;\n        }\n        const fieldData = getOption(fields, rule.field);\n        return (ruleProcessorInternal ?? valueProcessorInternal)(rule, {\n          parseNumbers,\n          fieldData,\n          format\n        });\n      }).filter(Boolean);\n      if (processedRules.length === 0) {\n        return false;\n      }\n      return {\n        bool: rg.not ? {\n          must_not: rg.combinator === \"or\" ? { bool: { should: processedRules } } : processedRules\n        } : { [rg.combinator === \"or\" ? \"should\" : \"must\"]: processedRules }\n      };\n    };\n    const processedRuleGroup = processRuleGroup(query);\n    return processedRuleGroup === false ? {} : processedRuleGroup;\n  }\n  return \"\";\n}\n\n// src/utils/formatQuery/index.ts\nvar internalValueProcessors = {\n  default: defaultValueProcessorByRule,\n  mongodb: defaultRuleProcessorMongoDB,\n  cel: defaultRuleProcessorCEL,\n  spel: defaultRuleProcessorSpEL\n};\nvar generateValueProcessor = (format) => (field, operator, value, valueSource) => internalValueProcessors[format](\n  { field, operator, value, valueSource },\n  { parseNumbers: false }\n);\nvar defaultValueProcessor = generateValueProcessor(\"default\");\nvar defaultMongoDBValueProcessor = generateValueProcessor(\"mongodb\");\nvar defaultCELValueProcessor = generateValueProcessor(\"cel\");\nvar defaultSpELValueProcessor = generateValueProcessor(\"spel\");\nvar defaultValueProcessorCELByRule = defaultRuleProcessorCEL;\nvar defaultValueProcessorMongoDBByRule = defaultRuleProcessorMongoDB;\nvar defaultValueProcessorSpELByRule = defaultRuleProcessorSpEL;\n\n// src/utils/pathUtils.ts\nvar findPath = (path, query) => {\n  let target = query;\n  let level = 0;\n  while (level < path.length && target && isRuleGroup(target)) {\n    const t = target.rules[path[level]];\n    if (typeof t !== \"string\") {\n      target = t;\n    } else {\n      target = null;\n    }\n    level++;\n  }\n  return target;\n};\nvar getParentPath = (path) => path.slice(0, path.length - 1);\nvar pathsAreEqual = (path1, path2) => path1.length === path2.length && path1.every((val, idx) => val === path2[idx]);\nvar isAncestor = (maybeAncestor, path) => maybeAncestor.length < path.length && RegExp(`^${maybeAncestor.join(\"-\")}`).test(path.join(\"-\"));\nvar getCommonAncestorPath = (path1, path2) => {\n  const commonAncestorPath = [];\n  const parentPath1 = getParentPath(path1);\n  const parentPath2 = getParentPath(path2);\n  let i = 0;\n  while (i < parentPath1.length && i < parentPath2.length && parentPath1[i] === parentPath2[i]) {\n    commonAncestorPath.push(parentPath2[i]);\n    i++;\n  }\n  return commonAncestorPath;\n};\nvar pathIsDisabled = (path, query) => {\n  let disabled = !!query.disabled;\n  let target = query;\n  let level = 0;\n  while (level < path.length && !disabled && isRuleGroup(target)) {\n    const t = target.rules[path[level]];\n    if (isPojo(t) && (isRuleGroup(t) || \"field\" in t && !!t.field)) {\n      disabled = !!t.disabled;\n      target = t;\n    }\n    level++;\n  }\n  return disabled;\n};\n\n// src/utils/generateAccessibleDescription.ts\nvar generateAccessibleDescription = ({ path, qbId: _qbID }) => pathsAreEqual([], path) ? `Query builder` : `Rule group at path ${path.join(\"-\")}`;\n\n// src/utils/generateID.ts\nvar cryptoModule = globalThis.crypto;\nvar generateID = () => \"00-0-4-2-000\".replace(\n  /[^-]/g,\n  (s) => ((Math.random() + ~~s) * 65536 >> parseInt(s)).toString(16).padStart(4, \"0\")\n);\nif (cryptoModule) {\n  if (typeof cryptoModule.randomUUID === \"function\") {\n    generateID = () => cryptoModule.randomUUID();\n  } else if (typeof cryptoModule.getRandomValues === \"function\") {\n    const position19vals = \"89ab\";\n    const container = new Uint32Array(32);\n    generateID = () => {\n      cryptoModule.getRandomValues(container);\n      let id = (container[0] % 16).toString(16);\n      for (let i = 1; i < 32; i++) {\n        if (i === 12) {\n          id = `${id}${\"4\"}`;\n        } else if (i === 16) {\n          id = `${id}${position19vals[container[17] % 4]}`;\n        } else {\n          id = `${id}${(container[i] % 16).toString(16)}`;\n        }\n        if (i === 7 || i === 11 || i === 15 || i === 19) {\n          id = `${id}${\"-\"}`;\n        }\n      }\n      return id;\n    };\n  }\n}\n\n// src/utils/getCompatContextProvider.tsx\nimport * as React5 from \"react\";\nimport { useContext, useMemo } from \"react\";\n\n// src/utils/mergeClassnames.ts\nimport clsx from \"clsx\";\nvar mergeClassnames = (...args) => {\n  const joinClassnamesByName = (name) => clsx(args.filter(Boolean).map((c) => clsx(c[name])));\n  return {\n    queryBuilder: joinClassnamesByName(\"queryBuilder\"),\n    ruleGroup: joinClassnamesByName(\"ruleGroup\"),\n    header: joinClassnamesByName(\"header\"),\n    body: joinClassnamesByName(\"body\"),\n    combinators: joinClassnamesByName(\"combinators\"),\n    addRule: joinClassnamesByName(\"addRule\"),\n    addGroup: joinClassnamesByName(\"addGroup\"),\n    cloneRule: joinClassnamesByName(\"cloneRule\"),\n    cloneGroup: joinClassnamesByName(\"cloneGroup\"),\n    removeGroup: joinClassnamesByName(\"removeGroup\"),\n    rule: joinClassnamesByName(\"rule\"),\n    fields: joinClassnamesByName(\"fields\"),\n    operators: joinClassnamesByName(\"operators\"),\n    value: joinClassnamesByName(\"value\"),\n    removeRule: joinClassnamesByName(\"removeRule\"),\n    notToggle: joinClassnamesByName(\"notToggle\"),\n    shiftActions: joinClassnamesByName(\"shiftActions\"),\n    dragHandle: joinClassnamesByName(\"dragHandle\"),\n    lockRule: joinClassnamesByName(\"lockRule\"),\n    lockGroup: joinClassnamesByName(\"lockGroup\"),\n    valueSource: joinClassnamesByName(\"valueSource\"),\n    actionElement: joinClassnamesByName(\"actionElement\"),\n    valueSelector: joinClassnamesByName(\"valueSelector\")\n  };\n};\n\n// src/utils/mergeTranslations.ts\nimport { produce as produce2 } from \"immer\";\n\n// src/utils/objectUtils.ts\nvar objectKeys = Object.keys;\nvar objectEntries = Object.entries;\n\n// src/utils/mergeTranslations.ts\nvar defaultTranslationsBase = {};\nvar mergeTranslations = (...args) => {\n  const [base, ...otherTranslations] = args;\n  return produce2(base ?? defaultTranslationsBase, (draft) => {\n    for (const translations of otherTranslations) {\n      if (!translations)\n        continue;\n      objectKeys(translations).forEach((t) => {\n        draft[t] = { ...draft[t], ...translations[t] };\n      });\n    }\n  });\n};\n\n// src/utils/getCompatContextProvider.tsx\nvar getCompatContextProvider = ({\n  key,\n  controlClassnames: compatClassnames,\n  controlElements: compatElements,\n  translations: compatTranslations\n}) => (props) => {\n  const rqbContext = useContext(QueryBuilderContext);\n  const classnamesObject = useMemo(\n    () => compatClassnames ? {\n      controlClassnames: mergeClassnames(\n        rqbContext.controlClassnames,\n        props.controlClassnames,\n        compatClassnames\n      )\n    } : {},\n    [props.controlClassnames, rqbContext.controlClassnames]\n  );\n  const newTranslations = useMemo(\n    () => mergeTranslations(rqbContext.translations, compatTranslations, props.translations),\n    [props.translations, rqbContext.translations]\n  );\n  const newContextProps = useMemo(\n    () => ({\n      ...rqbContext,\n      ...classnamesObject,\n      controlElements: {\n        ...rqbContext.controlElements,\n        ...compatElements,\n        ...props.controlElements\n      },\n      translations: newTranslations\n    }),\n    [classnamesObject, newTranslations, props.controlElements, rqbContext]\n  );\n  return /* @__PURE__ */ React5.createElement(QueryBuilderContext.Provider, { value: newContextProps, key }, props.children);\n};\n\n// src/utils/getValidationClassNames.ts\nvar getValidationClassNames = (validationResult) => {\n  const valid = typeof validationResult === \"boolean\" ? validationResult : typeof validationResult === \"object\" && validationResult !== null ? validationResult.valid : null;\n  return typeof valid === \"boolean\" ? valid ? standardClassnames.valid : standardClassnames.invalid : \"\";\n};\n\n// src/utils/getValueSourcesUtil.ts\nvar defaultValueSourcesArray = [\"value\"];\nvar dummyFD = {\n  name: \"name\",\n  value: \"name\",\n  valueSources: null,\n  label: \"label\"\n};\nvar getValueSourcesUtil = (fieldData, operator, getValueSources) => {\n  const fd = fieldData ? toFullOption(fieldData) : (\n    /* istanbul ignore else */\n    dummyFD\n  );\n  if (fd.valueSources) {\n    if (typeof fd.valueSources === \"function\") {\n      return fd.valueSources(operator);\n    }\n    return fd.valueSources;\n  }\n  if (getValueSources) {\n    const vals = getValueSources(fd.value, operator, {\n      fieldData: toFullOption(fd)\n    });\n    if (vals)\n      return vals;\n  }\n  return defaultValueSourcesArray;\n};\n\n// src/utils/prepareQueryObjects.ts\nimport { produce as produce3 } from \"immer\";\nvar prepareRule = (rule, { idGenerator = generateID } = {}) => produce3(rule, (draft) => {\n  if (!draft.id) {\n    draft.id = idGenerator();\n  }\n});\nvar prepareRuleGroup = (queryObject, { idGenerator = generateID } = {}) => produce3(queryObject, (draft) => {\n  if (!draft.id) {\n    draft.id = idGenerator();\n  }\n  draft.rules = draft.rules.map(\n    (r) => typeof r === \"string\" ? r : isRuleGroup(r) ? prepareRuleGroup(r, { idGenerator }) : prepareRule(r, { idGenerator })\n  );\n});\nvar prepareRuleOrGroup = (rg, { idGenerator = generateID } = {}) => isRuleGroup(rg) ? prepareRuleGroup(rg, { idGenerator }) : prepareRule(rg, { idGenerator });\n\n// src/utils/queryTools.ts\nimport { produce as produce4 } from \"immer\";\n\n// src/utils/regenerateIDs.ts\nvar regenerateID = (rule, { idGenerator = generateID } = {}) => JSON.parse(JSON.stringify({ ...rule, id: idGenerator() }));\nvar regenerateIDs = (ruleOrGroup, { idGenerator = generateID } = {}) => {\n  if (!isPojo(ruleOrGroup))\n    return ruleOrGroup;\n  if (!isRuleGroup(ruleOrGroup)) {\n    return JSON.parse(JSON.stringify({ ...ruleOrGroup, id: idGenerator() }));\n  }\n  if (isRuleGroupType(ruleOrGroup)) {\n    const rules2 = ruleOrGroup.rules.map(\n      (r) => isRuleGroup(r) ? regenerateIDs(r, { idGenerator }) : regenerateID(r, { idGenerator })\n    );\n    return { ...ruleOrGroup, id: idGenerator(), rules: rules2 };\n  }\n  const rules = ruleOrGroup.rules.map(\n    (r) => typeof r === \"string\" ? r : isRuleGroup(r) ? regenerateIDs(r, { idGenerator }) : regenerateID(r, { idGenerator })\n  );\n  return { ...ruleOrGroup, id: idGenerator(), rules };\n};\n\n// src/utils/queryTools.ts\nvar add = (query, ruleOrGroup, parentPath, {\n  combinators = defaultCombinators,\n  combinatorPreceding,\n  idGenerator = generateID\n} = {}) => produce4(query, (draft) => {\n  const parent = findPath(parentPath, draft);\n  if (!parent || !isRuleGroup(parent))\n    return;\n  if (!isRuleGroupType(parent) && parent.rules.length > 0) {\n    const prevCombinator = parent.rules[parent.rules.length - 2];\n    parent.rules.push(\n      // @ts-expect-error This is technically a type violation until the next push\n      // to the rules array, but that happens immediately and unconditionally so\n      // there's no significant risk.\n      combinatorPreceding ?? (typeof prevCombinator === \"string\" ? prevCombinator : getFirstOption(combinators))\n    );\n  }\n  parent.rules.push(prepareRuleOrGroup(ruleOrGroup, { idGenerator }));\n});\nvar update = (query, prop, value, path, {\n  resetOnFieldChange = true,\n  resetOnOperatorChange = false,\n  getRuleDefaultOperator = () => \"=\",\n  getValueSources = () => [\"value\"],\n  getRuleDefaultValue = () => \"\"\n} = {}) => produce4(query, (draft) => {\n  if (prop === \"combinator\" && !isRuleGroupType(draft)) {\n    const parentRules = findPath(getParentPath(path), draft).rules;\n    if (path[path.length - 1] % 2 === 1) {\n      parentRules[path[path.length - 1]] = value;\n    }\n    return;\n  }\n  const ruleOrGroup = findPath(path, draft);\n  if (!ruleOrGroup)\n    return;\n  const isGroup = isRuleGroup(ruleOrGroup);\n  if (ruleOrGroup[prop] === value)\n    return;\n  if (prop !== \"valueSource\") {\n    ruleOrGroup[prop] = value;\n  }\n  if (isGroup)\n    return;\n  let resetValueSource = false;\n  let resetValue = false;\n  if (resetOnFieldChange && prop === \"field\") {\n    ruleOrGroup.operator = getRuleDefaultOperator(value);\n    resetValueSource = true;\n    resetValue = true;\n  }\n  if (resetOnOperatorChange && prop === \"operator\") {\n    resetValueSource = true;\n    resetValue = true;\n  }\n  const defaultValueSource = getValueSources(ruleOrGroup.field, ruleOrGroup.operator)[0];\n  if (resetValueSource && ruleOrGroup.valueSource && defaultValueSource !== ruleOrGroup.valueSource || prop === \"valueSource\" && value !== ruleOrGroup.valueSource) {\n    resetValue = !!ruleOrGroup.valueSource || !ruleOrGroup.valueSource && value !== defaultValueSource;\n    ruleOrGroup.valueSource = resetValueSource ? defaultValueSource : value;\n  }\n  if (resetValue) {\n    ruleOrGroup.value = getRuleDefaultValue(ruleOrGroup);\n  }\n});\nvar remove = (query, path) => {\n  if (\n    // Can't remove the root group\n    path.length === 0 || // Can't independently remove independent combinators\n    !isRuleGroupType(query) && !findPath(path, query)\n  ) {\n    return query;\n  }\n  return produce4(query, (draft) => {\n    const index = path[path.length - 1];\n    const parent = findPath(getParentPath(path), draft);\n    if (parent && isRuleGroup(parent)) {\n      if (!isRuleGroupType(parent) && parent.rules.length > 1) {\n        const idxStartDelete = index === 0 ? 0 : index - 1;\n        parent.rules.splice(idxStartDelete, 2);\n      } else {\n        parent.rules.splice(index, 1);\n      }\n    }\n  });\n};\nvar getNextPath = (query, currentPath, newPathOrShiftDirection) => {\n  if (Array.isArray(newPathOrShiftDirection)) {\n    return newPathOrShiftDirection;\n  }\n  const ic = isRuleGroupTypeIC(query);\n  if (newPathOrShiftDirection === \"up\") {\n    if (pathsAreEqual(currentPath, [0])) {\n      return currentPath;\n    } else if (currentPath.at(-1) === 0) {\n      const parentPath = getParentPath(currentPath);\n      return [...getParentPath(parentPath), Math.max(0, parentPath.at(-1) - (ic ? 1 : 0))];\n    } else {\n      const evaluationPath = [\n        ...getParentPath(currentPath),\n        Math.max(0, currentPath.at(-1) - (ic ? 2 : 1))\n      ];\n      const entityAtTarget = findPath(evaluationPath, query);\n      if (isRuleGroup(entityAtTarget)) {\n        return [...evaluationPath, entityAtTarget.rules.length];\n      } else {\n        const targetPath = [\n          ...getParentPath(currentPath),\n          Math.max(0, currentPath.at(-1) - (ic ? 3 : 1))\n        ];\n        return targetPath;\n      }\n    }\n  } else if (newPathOrShiftDirection === \"down\") {\n    if (pathsAreEqual([query.rules.length - 1], currentPath)) {\n      return currentPath;\n    } else if (currentPath.at(-1) === findPath(getParentPath(currentPath), query).rules.length - 1) {\n      const parentPath = getParentPath(currentPath);\n      return [...getParentPath(parentPath), parentPath.at(-1) + 1];\n    } else {\n      const evaluationPath = [...getParentPath(currentPath), currentPath.at(-1) + (ic ? 2 : 1)];\n      const entityToEvaluate = findPath(evaluationPath, query);\n      if (isRuleGroup(entityToEvaluate)) {\n        return [...evaluationPath, 0];\n      } else {\n        const targetPath = [...getParentPath(currentPath), currentPath.at(-1) + (ic ? 3 : 2)];\n        return targetPath;\n      }\n    }\n  }\n  return currentPath;\n};\nvar move = (query, oldPath, newPath, { clone = false, combinators = defaultCombinators, idGenerator = generateID } = {}) => {\n  const nextPath = getNextPath(query, oldPath, newPath);\n  if (oldPath.length === 0 || pathsAreEqual(oldPath, nextPath) || !findPath(getParentPath(nextPath), query)) {\n    return query;\n  }\n  const ruleOrGroupOriginal = findPath(oldPath, query);\n  if (!ruleOrGroupOriginal) {\n    return query;\n  }\n  const ruleOrGroup = clone ? isRuleGroup(ruleOrGroupOriginal) ? regenerateIDs(ruleOrGroupOriginal, { idGenerator }) : regenerateID(ruleOrGroupOriginal, { idGenerator }) : ruleOrGroupOriginal;\n  return produce4(query, (draft) => {\n    const independentCombinators = isRuleGroupTypeIC(draft);\n    const parentOfRuleToRemove = findPath(getParentPath(oldPath), draft);\n    const ruleToRemoveIndex = oldPath[oldPath.length - 1];\n    const oldPrevCombinator = independentCombinators && ruleToRemoveIndex > 0 ? parentOfRuleToRemove.rules[ruleToRemoveIndex - 1] : null;\n    const oldNextCombinator = independentCombinators && ruleToRemoveIndex < parentOfRuleToRemove.rules.length - 1 ? parentOfRuleToRemove.rules[ruleToRemoveIndex + 1] : null;\n    if (!clone) {\n      const idxStartDelete = independentCombinators ? Math.max(0, ruleToRemoveIndex - 1) : ruleToRemoveIndex;\n      const deleteLength = independentCombinators ? 2 : 1;\n      parentOfRuleToRemove.rules.splice(idxStartDelete, deleteLength);\n    }\n    const newNewPath = [...nextPath];\n    const commonAncestorPath = getCommonAncestorPath(oldPath, nextPath);\n    if (!clone && oldPath.length === commonAncestorPath.length + 1 && nextPath[commonAncestorPath.length] > oldPath[commonAncestorPath.length]) {\n      newNewPath[commonAncestorPath.length] -= independentCombinators ? 2 : 1;\n    }\n    const newNewParentPath = getParentPath(newNewPath);\n    const parentToInsertInto = findPath(newNewParentPath, draft);\n    const newIndex = newNewPath[newNewPath.length - 1];\n    const insertRuleOrGroup = (...args) => parentToInsertInto.rules.splice(newIndex, 0, ...args);\n    if (parentToInsertInto.rules.length === 0 || !independentCombinators) {\n      insertRuleOrGroup(ruleOrGroup);\n    } else {\n      if (newIndex === 0) {\n        if (ruleToRemoveIndex === 0 && oldNextCombinator) {\n          insertRuleOrGroup(ruleOrGroup, oldNextCombinator);\n        } else {\n          const newNextCombinator = parentToInsertInto.rules[1] || oldPrevCombinator || getFirstOption(combinators);\n          insertRuleOrGroup(ruleOrGroup, newNextCombinator);\n        }\n      } else {\n        if (oldPrevCombinator) {\n          insertRuleOrGroup(oldPrevCombinator, ruleOrGroup);\n        } else {\n          const newPrevCombinator = parentToInsertInto.rules[newIndex - 2] || oldNextCombinator || getFirstOption(combinators);\n          insertRuleOrGroup(newPrevCombinator, ruleOrGroup);\n        }\n      }\n    }\n  });\n};\n\n// src/utils/toOptions.tsx\nimport * as React6 from \"react\";\nvar toOptions = (arr) => isOptionGroupArray(arr) ? arr.map((og) => /* @__PURE__ */ React6.createElement(\"optgroup\", { key: og.label, label: og.label }, og.options.map((opt) => /* @__PURE__ */ React6.createElement(\"option\", { key: opt.name, value: opt.name, disabled: opt.disabled }, opt.label)))) : Array.isArray(arr) ? arr.map((opt) => /* @__PURE__ */ React6.createElement(\"option\", { key: opt.name, value: opt.name, disabled: opt.disabled }, opt.label)) : null;\n\n// src/utils/transformQuery.ts\nimport { produce as produce5 } from \"immer\";\nvar remapProperties = (obj, propertyMap, deleteRemappedProperties) => produce5(obj, (draft) => {\n  for (const [k, v] of Object.entries(propertyMap)) {\n    if (v === false) {\n      delete draft[k];\n    } else if (!!v && k !== v && k in draft) {\n      draft[v] = draft[k];\n      if (deleteRemappedProperties) {\n        delete draft[k];\n      }\n    }\n  }\n});\nfunction transformQuery(query, options = {}) {\n  const {\n    ruleProcessor = (r) => r,\n    ruleGroupProcessor = (rg) => rg,\n    propertyMap = {},\n    combinatorMap = {},\n    operatorMap = {},\n    omitPath = false,\n    deleteRemappedProperties = true\n  } = options;\n  const processGroup = (rg) => ({\n    ...ruleGroupProcessor(\n      remapProperties(\n        {\n          ...rg,\n          ...isRuleGroupType(rg) ? { combinator: combinatorMap[rg.combinator] ?? rg.combinator } : {}\n        },\n        propertyMap,\n        deleteRemappedProperties\n      )\n    ),\n    ...propertyMap[\"rules\"] === false ? null : {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [propertyMap[\"rules\"] ?? \"rules\"]: rg.rules.map((r, idx) => {\n        const pathObject = omitPath ? null : { path: [...rg.path, idx] };\n        if (typeof r === \"string\") {\n          return combinatorMap[r] ?? r;\n        } else if (isRuleGroup(r)) {\n          return processGroup({ ...r, ...pathObject });\n        }\n        return ruleProcessor(\n          remapProperties(\n            {\n              ...{ ...r, ...pathObject },\n              ...\"operator\" in r ? { operator: operatorMap[r.operator] ?? r.operator } : {}\n            },\n            propertyMap,\n            deleteRemappedProperties\n          )\n        );\n      })\n    }\n  });\n  return processGroup({ ...query, ...omitPath ? null : { path: [] } });\n}\n\n// src/hooks/usePreferProp.ts\nimport { useMemo as useMemo2 } from \"react\";\nvar preferPropDefaultTrue = (prop, context) => prop === false ? false : prop ? true : context === false ? false : true;\nvar preferPropDefaultFalse = (prop, context) => prop ? true : prop === false ? false : context ? true : false;\nvar preferProp = (def, prop, context) => def ? preferPropDefaultTrue(prop, context) : preferPropDefaultFalse(prop, context);\nvar usePreferProp = (def, prop, context) => useMemo2(() => preferProp(def, prop, context), [context, def, prop]);\nvar usePreferAnyProp = (def, prop, context) => useMemo2(\n  () => typeof prop !== \"undefined\" && prop != null ? prop : typeof context !== \"undefined\" && context != null ? context : def,\n  [context, def, prop]\n);\n\n// src/hooks/useMergedContext.ts\nvar useMergedContext = (props) => {\n  const rqbContext = useContext2(QueryBuilderContext);\n  const enableMountQueryChange = usePreferProp(\n    true,\n    props.enableMountQueryChange,\n    rqbContext.enableMountQueryChange\n  );\n  const enableDragAndDrop = usePreferProp(false, props.enableDragAndDrop, rqbContext.enableDragAndDrop) && rqbContext.enableDragAndDrop !== false;\n  const debugMode = usePreferProp(false, props.debugMode, rqbContext.debugMode);\n  const controlClassnames = useMemo3(\n    () => mergeClassnames(\n      defaultControlClassnames,\n      rqbContext.controlClassnames,\n      props.controlClassnames\n    ),\n    [rqbContext.controlClassnames, props.controlClassnames]\n  );\n  const controlElements = useMemo3(() => {\n    const contextControlElements = {\n      ...rqbContext.controlElements,\n      ...rqbContext.controlElements?.actionElement ? {\n        addGroupAction: rqbContext.controlElements?.addGroupAction ?? rqbContext.controlElements.actionElement,\n        addRuleAction: rqbContext.controlElements?.addRuleAction ?? rqbContext.controlElements.actionElement,\n        cloneGroupAction: rqbContext.controlElements?.cloneGroupAction ?? rqbContext.controlElements.actionElement,\n        cloneRuleAction: rqbContext.controlElements?.cloneRuleAction ?? rqbContext.controlElements.actionElement,\n        lockGroupAction: rqbContext.controlElements?.lockGroupAction ?? rqbContext.controlElements.actionElement,\n        lockRuleAction: rqbContext.controlElements?.lockRuleAction ?? rqbContext.controlElements.actionElement,\n        removeGroupAction: rqbContext.controlElements?.removeGroupAction ?? rqbContext.controlElements.actionElement,\n        removeRuleAction: rqbContext.controlElements?.removeRuleAction ?? rqbContext.controlElements.actionElement\n      } : {},\n      ...rqbContext.controlElements?.valueSelector ? {\n        combinatorSelector: rqbContext.controlElements?.combinatorSelector ?? rqbContext.controlElements.valueSelector,\n        fieldSelector: rqbContext.controlElements?.fieldSelector ?? rqbContext.controlElements.valueSelector,\n        operatorSelector: rqbContext.controlElements?.operatorSelector ?? rqbContext.controlElements.valueSelector,\n        valueSourceSelector: rqbContext.controlElements?.valueSourceSelector ?? rqbContext.controlElements.valueSelector\n      } : {}\n    };\n    const propsControlElements = {\n      ...props.controlElements,\n      ...props.controlElements?.actionElement ? {\n        addGroupAction: props.controlElements?.addGroupAction ?? props.controlElements.actionElement,\n        addRuleAction: props.controlElements?.addRuleAction ?? props.controlElements.actionElement,\n        cloneGroupAction: props.controlElements?.cloneGroupAction ?? props.controlElements.actionElement,\n        cloneRuleAction: props.controlElements?.cloneRuleAction ?? props.controlElements.actionElement,\n        lockGroupAction: props.controlElements?.lockGroupAction ?? props.controlElements.actionElement,\n        lockRuleAction: props.controlElements?.lockRuleAction ?? props.controlElements.actionElement,\n        removeGroupAction: props.controlElements?.removeGroupAction ?? props.controlElements.actionElement,\n        removeRuleAction: props.controlElements?.removeRuleAction ?? props.controlElements.actionElement\n      } : {},\n      ...props.controlElements?.valueSelector ? {\n        combinatorSelector: props.controlElements?.combinatorSelector ?? props.controlElements.valueSelector,\n        fieldSelector: props.controlElements?.fieldSelector ?? props.controlElements.valueSelector,\n        operatorSelector: props.controlElements?.operatorSelector ?? props.controlElements.valueSelector,\n        valueSourceSelector: props.controlElements?.valueSourceSelector ?? props.controlElements.valueSelector\n      } : {}\n    };\n    return {\n      ...defaultControlElements,\n      ...contextControlElements,\n      ...propsControlElements\n    };\n  }, [props.controlElements, rqbContext.controlElements]);\n  const translations = useMemo3(\n    () => mergeTranslations(\n      defaultTranslations,\n      rqbContext.translations,\n      props.translations\n    ),\n    [props.translations, rqbContext.translations]\n  );\n  const {\n    controlClassnames: _controlClassnames,\n    controlElements: _controlElements,\n    debugMode: _debugMode,\n    enableDragAndDrop: _enableDragAndDrop,\n    enableMountQueryChange: _enableMountQueryChange,\n    translations: _translations,\n    ...otherContext\n  } = rqbContext;\n  return {\n    controlClassnames,\n    controlElements,\n    debugMode,\n    enableDragAndDrop,\n    enableMountQueryChange,\n    translations,\n    ...otherContext\n  };\n};\n\n// src/hooks/useQueryBuilderSchema.ts\nimport { clsx as clsx2 } from \"clsx\";\nimport { useCallback, useEffect, useMemo as useMemo4 } from \"react\";\n\n// src/redux/queriesSlice.ts\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {};\nvar queriesSlice = createSlice({\n  name: \"queries\",\n  initialState,\n  reducers: {\n    setQueryState: (state, { payload: { qbId, query } }) => {\n      state[qbId] = query;\n    }\n  },\n  selectors: {\n    getQuerySelectorById: (state, qbId) => state[qbId]\n  }\n});\n\n// src/redux/index.ts\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport * as React7 from \"react\";\nimport { createSelectorHook } from \"react-redux\";\nvar preloadedState = { queries: queriesSlice.getInitialState() };\nvar queryBuilderStore = configureStore({\n  reducer: { queries: queriesSlice.reducer },\n  preloadedState,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    // Ignore non-serializable values in setQueryState actions and rule `value`s\n    // https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data\n    serializableCheck: {\n      ignoredActions: [\"queries/setQueryState\"],\n      ignoredPaths: [/^queries\\b.*\\.rules\\.\\d+\\.value$/]\n    }\n  })\n});\nvar QueryBuilderStateContext = React7.createContext(null);\nvar useQueryBuilderSelector = createSelectorHook(QueryBuilderStateContext);\nvar getQuerySelectorById = (qbId) => (state) => queriesSlice.selectors.getQuerySelectorById(state, qbId);\n\n// src/redux/_internal.ts\nimport { createDispatchHook, createStoreHook } from \"react-redux\";\nvar _RQB_INTERNAL_dispatchThunk = ({\n  payload,\n  onQueryChange\n}) => (dispatch) => {\n  dispatch(queriesSlice.actions.setQueryState(payload));\n  if (typeof onQueryChange === \"function\") {\n    onQueryChange(payload.query);\n  }\n};\nvar useRQB_INTERNAL_QueryBuilderDispatch = createDispatchHook(QueryBuilderStateContext);\nvar useRQB_INTERNAL_QueryBuilderStore = createStoreHook(QueryBuilderStateContext);\n\n// src/hooks/useQueryBuilderSchema.ts\nvar defaultValidationResult = {};\nvar defaultValidationMap = {};\nvar defaultGetValueEditorSeparator = () => null;\nvar defaultGetRuleClassname = () => \"\";\nvar defaultGetRuleGroupClassname = () => \"\";\nvar defaultOnAddRule = (r) => r;\nvar defaultOnAddGroup = (rg) => rg;\nvar defaultOnRemove = () => true;\nvar defaultOnLog = (...params) => {\n  console.log(...params);\n};\nfunction useQueryBuilderSchema(props, setup) {\n  const {\n    query: queryProp,\n    defaultQuery: defaultQueryProp,\n    getValueEditorSeparator = defaultGetValueEditorSeparator,\n    getRuleClassname = defaultGetRuleClassname,\n    getRuleGroupClassname = defaultGetRuleGroupClassname,\n    onAddRule = defaultOnAddRule,\n    onAddGroup = defaultOnAddGroup,\n    onRemove = defaultOnRemove,\n    onQueryChange,\n    showCombinatorsBetweenRules: showCombinatorsBetweenRulesProp = false,\n    showNotToggle: showNotToggleProp = false,\n    showShiftActions: showShiftActionsProp = false,\n    showCloneButtons: showCloneButtonsProp = false,\n    showLockButtons: showLockButtonsProp = false,\n    resetOnFieldChange: resetOnFieldChangeProp = true,\n    resetOnOperatorChange: resetOnOperatorChangeProp = false,\n    autoSelectField: autoSelectFieldProp = true,\n    autoSelectOperator: autoSelectOperatorProp = true,\n    addRuleToNewGroups: addRuleToNewGroupsProp = false,\n    listsAsArrays: listsAsArraysProp = false,\n    parseNumbers = false,\n    disabled = false,\n    validator,\n    onLog = defaultOnLog,\n    idGenerator,\n    accessibleDescriptionGenerator = generateAccessibleDescription\n  } = props;\n  const {\n    qbId,\n    rqbContext,\n    fields,\n    fieldMap,\n    combinators,\n    getOperatorsMain,\n    getRuleDefaultOperator,\n    getValueEditorTypeMain,\n    getValueSourcesMain,\n    getValuesMain,\n    getRuleDefaultValue,\n    getInputTypeMain,\n    createRule,\n    createRuleGroup\n  } = setup;\n  const {\n    controlClassnames,\n    controlElements: controls,\n    debugMode,\n    enableDragAndDrop,\n    enableMountQueryChange,\n    translations\n  } = rqbContext;\n  const showCombinatorsBetweenRules = !!showCombinatorsBetweenRulesProp;\n  const showNotToggle = !!showNotToggleProp;\n  const showShiftActions = !!showShiftActionsProp;\n  const showCloneButtons = !!showCloneButtonsProp;\n  const showLockButtons = !!showLockButtonsProp;\n  const resetOnFieldChange = !!resetOnFieldChangeProp;\n  const resetOnOperatorChange = !!resetOnOperatorChangeProp;\n  const autoSelectField = !!autoSelectFieldProp;\n  const autoSelectOperator = !!autoSelectOperatorProp;\n  const addRuleToNewGroups = !!addRuleToNewGroupsProp;\n  const listsAsArrays = !!listsAsArraysProp;\n  const queryBuilderStore2 = useRQB_INTERNAL_QueryBuilderStore();\n  const queryBuilderDispatch = useRQB_INTERNAL_QueryBuilderDispatch();\n  const querySelector = useMemo4(() => getQuerySelectorById(setup.qbId), [setup.qbId]);\n  const storeQuery = useQueryBuilderSelector(querySelector);\n  const getQuery = useCallback(\n    () => querySelector(queryBuilderStore2.getState()),\n    [queryBuilderStore2, querySelector]\n  );\n  const fallbackQuery = useMemo4(() => createRuleGroup(), [createRuleGroup]);\n  const candidateQuery = queryProp ?? storeQuery ?? defaultQueryProp ?? fallbackQuery;\n  const rootGroup = !candidateQuery.id ? prepareRuleGroup(candidateQuery, { idGenerator }) : candidateQuery;\n  useEffect(() => {\n    if (!!queryProp && queryProp !== storeQuery) {\n      queryBuilderDispatch(\n        _RQB_INTERNAL_dispatchThunk({\n          payload: { qbId, query: queryProp },\n          onQueryChange: void 0\n        })\n      );\n    }\n  }, [queryProp, qbId, storeQuery, queryBuilderDispatch]);\n  const independentCombinators = useMemo4(() => isRuleGroupTypeIC(rootGroup), [rootGroup]);\n  const invalidIC = !!props.independentCombinators && !independentCombinators;\n  useDeprecatedProps(\n    \"independentCombinators\",\n    invalidIC || !invalidIC && (props.independentCombinators ?? \"not present\") !== \"not present\",\n    invalidIC ? \"invalid\" : \"unnecessary\"\n    // 'invalid'\n  );\n  useEffect(() => {\n    queryBuilderDispatch(\n      _RQB_INTERNAL_dispatchThunk({\n        payload: { qbId, query: rootGroup },\n        onQueryChange: (\n          // Leave `onQueryChange` undefined if `enableMountQueryChange` is disabled\n          enableMountQueryChange && typeof onQueryChange === \"function\" ? onQueryChange : void 0\n        )\n      })\n    );\n  }, []);\n  const dispatchQuery = useCallback(\n    (newQuery) => {\n      queryBuilderDispatch(\n        _RQB_INTERNAL_dispatchThunk({ payload: { qbId, query: newQuery }, onQueryChange })\n      );\n    },\n    [onQueryChange, qbId, queryBuilderDispatch]\n  );\n  const disabledPaths = useMemo4(() => Array.isArray(disabled) && disabled || [], [disabled]);\n  const queryDisabled = disabled === true;\n  const rootGroupDisabled = useMemo4(\n    () => rootGroup.disabled || disabledPaths.some((p) => p.length === 0),\n    [disabledPaths, rootGroup.disabled]\n  );\n  const onRuleAdd = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (rule, parentPath, context) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore2.getState());\n      if (!queryLocal)\n        return;\n      if (pathIsDisabled(parentPath, queryLocal) || queryDisabled) {\n        if (debugMode) {\n          onLog({ type: LogType.parentPathDisabled, rule, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      const newRule = onAddRule(rule, parentPath, queryLocal, context);\n      if (!newRule) {\n        if (debugMode) {\n          onLog({ type: LogType.onAddRuleFalse, rule, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = add(queryLocal, newRule, parentPath, {\n        combinators,\n        combinatorPreceding: newRule.combinatorPreceding ?? void 0\n      });\n      if (debugMode) {\n        onLog({ type: LogType.add, query: queryLocal, newQuery, newRule, parentPath });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      combinators,\n      debugMode,\n      dispatchQuery,\n      onAddRule,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore2\n    ]\n  );\n  const onGroupAdd = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ruleGroup, parentPath, context) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore2.getState());\n      if (!queryLocal)\n        return;\n      if (pathIsDisabled(parentPath, queryLocal) || queryDisabled) {\n        if (debugMode) {\n          onLog({\n            type: LogType.parentPathDisabled,\n            ruleGroup,\n            parentPath,\n            query: queryLocal\n          });\n        }\n        return;\n      }\n      const newGroup = onAddGroup(ruleGroup, parentPath, queryLocal, context);\n      if (!newGroup) {\n        if (debugMode) {\n          onLog({ type: LogType.onAddGroupFalse, ruleGroup, parentPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = add(queryLocal, newGroup, parentPath, {\n        combinators,\n        combinatorPreceding: newGroup.combinatorPreceding ?? void 0\n      });\n      if (debugMode) {\n        onLog({ type: LogType.add, query: queryLocal, newQuery, newGroup, parentPath });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      combinators,\n      debugMode,\n      dispatchQuery,\n      onAddGroup,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore2\n    ]\n  );\n  const onPropChange = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (prop, value, path) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore2.getState());\n      if (!queryLocal)\n        return;\n      if (pathIsDisabled(path, queryLocal) && prop !== \"disabled\" || queryDisabled) {\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, path, prop, value, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = update(queryLocal, prop, value, path, {\n        resetOnFieldChange,\n        resetOnOperatorChange,\n        getRuleDefaultOperator,\n        getValueSources: getValueSourcesMain,\n        getRuleDefaultValue\n      });\n      if (debugMode) {\n        onLog({ type: LogType.update, query: queryLocal, newQuery, prop, value, path });\n      }\n      dispatchQuery(newQuery);\n    },\n    [\n      debugMode,\n      dispatchQuery,\n      getRuleDefaultOperator,\n      getRuleDefaultValue,\n      getValueSourcesMain,\n      onLog,\n      qbId,\n      queryDisabled,\n      queryBuilderStore2,\n      resetOnFieldChange,\n      resetOnOperatorChange\n    ]\n  );\n  const onRuleOrGroupRemove = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (path, context) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore2.getState());\n      if (!queryLocal)\n        return;\n      if (pathIsDisabled(path, queryLocal) || queryDisabled) {\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, path, query: queryLocal });\n        }\n        return;\n      }\n      const ruleOrGroup = findPath(path, queryLocal);\n      if (ruleOrGroup) {\n        if (onRemove(ruleOrGroup, path, queryLocal, context)) {\n          const newQuery = remove(queryLocal, path);\n          if (debugMode) {\n            onLog({ type: LogType.remove, query: queryLocal, newQuery, path, ruleOrGroup });\n          }\n          dispatchQuery(newQuery);\n        } else {\n          if (debugMode) {\n            onLog({ type: LogType.onRemoveFalse, ruleOrGroup, path, query: queryLocal });\n          }\n        }\n      }\n    },\n    [debugMode, dispatchQuery, onLog, onRemove, qbId, queryDisabled, queryBuilderStore2]\n  );\n  const moveRule = useCallback(\n    (oldPath, newPath, clone) => {\n      const queryLocal = getQuerySelectorById(qbId)(queryBuilderStore2.getState());\n      if (!queryLocal)\n        return;\n      if (pathIsDisabled(oldPath, queryLocal) || queryDisabled) {\n        if (debugMode) {\n          onLog({ type: LogType.pathDisabled, oldPath, newPath, query: queryLocal });\n        }\n        return;\n      }\n      const newQuery = move(queryLocal, oldPath, newPath, { clone, combinators });\n      if (debugMode) {\n        onLog({ type: LogType.move, query: queryLocal, newQuery, oldPath, newPath, clone });\n      }\n      dispatchQuery(newQuery);\n    },\n    [combinators, debugMode, dispatchQuery, onLog, qbId, queryDisabled, queryBuilderStore2]\n  );\n  const dndEnabledAttr = useMemo4(\n    () => enableDragAndDrop ? \"enabled\" : \"disabled\",\n    [enableDragAndDrop]\n  );\n  const inlineCombinatorsAttr = useMemo4(\n    () => independentCombinators || showCombinatorsBetweenRules ? \"enabled\" : \"disabled\",\n    [independentCombinators, showCombinatorsBetweenRules]\n  );\n  const combinatorPropObject = useMemo4(\n    () => isRuleGroupType(rootGroup) ? { combinator: rootGroup.combinator } : {},\n    [rootGroup]\n  );\n  const { validationResult, validationMap } = useMemo4(() => {\n    const validationResult2 = typeof validator === \"function\" && rootGroup ? validator(rootGroup) : defaultValidationResult;\n    const validationMap2 = typeof validationResult2 === \"boolean\" ? defaultValidationMap : validationResult2;\n    return { validationResult: validationResult2, validationMap: validationMap2 };\n  }, [rootGroup, validator]);\n  const schema = useMemo4(\n    () => ({\n      addRuleToNewGroups,\n      accessibleDescriptionGenerator,\n      autoSelectField,\n      autoSelectOperator,\n      classNames: controlClassnames,\n      combinators,\n      controls,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      enableDragAndDrop,\n      fieldMap,\n      fields,\n      dispatchQuery,\n      getQuery,\n      getInputType: getInputTypeMain,\n      getOperators: getOperatorsMain,\n      getRuleClassname,\n      getRuleGroupClassname,\n      getValueEditorSeparator,\n      getValueEditorType: getValueEditorTypeMain,\n      getValues: getValuesMain,\n      getValueSources: getValueSourcesMain,\n      independentCombinators,\n      listsAsArrays,\n      parseNumbers,\n      qbId,\n      showCloneButtons,\n      showCombinatorsBetweenRules,\n      showLockButtons,\n      showNotToggle,\n      showShiftActions,\n      validationMap\n    }),\n    [\n      addRuleToNewGroups,\n      accessibleDescriptionGenerator,\n      autoSelectField,\n      autoSelectOperator,\n      combinators,\n      controlClassnames,\n      controls,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      enableDragAndDrop,\n      fieldMap,\n      fields,\n      dispatchQuery,\n      getQuery,\n      getInputTypeMain,\n      getOperatorsMain,\n      getRuleClassname,\n      getRuleGroupClassname,\n      getValueEditorTypeMain,\n      getValuesMain,\n      getValueSourcesMain,\n      getValueEditorSeparator,\n      independentCombinators,\n      listsAsArrays,\n      parseNumbers,\n      qbId,\n      showCloneButtons,\n      showCombinatorsBetweenRules,\n      showLockButtons,\n      showNotToggle,\n      showShiftActions,\n      validationMap\n    ]\n  );\n  const actions = useMemo4(\n    () => ({\n      moveRule,\n      onGroupAdd,\n      onGroupRemove: onRuleOrGroupRemove,\n      onPropChange,\n      onRuleAdd,\n      onRuleRemove: onRuleOrGroupRemove\n    }),\n    [moveRule, onGroupAdd, onPropChange, onRuleAdd, onRuleOrGroupRemove]\n  );\n  const wrapperClassName = useMemo4(\n    () => clsx2(standardClassnames.queryBuilder, clsx2(controlClassnames.queryBuilder), {\n      [standardClassnames.disabled]: queryDisabled,\n      [standardClassnames.valid]: typeof validationResult === \"boolean\" && validationResult,\n      [standardClassnames.invalid]: typeof validationResult === \"boolean\" && !validationResult\n    }),\n    [controlClassnames.queryBuilder, queryDisabled, validationResult]\n  );\n  return {\n    ...props,\n    actions,\n    rootGroup,\n    rootGroupDisabled,\n    queryDisabled,\n    rqbContext,\n    schema,\n    translations,\n    wrapperClassName,\n    dndEnabledAttr,\n    inlineCombinatorsAttr,\n    combinatorPropObject\n  };\n}\n\n// src/hooks/useQueryBuilderSetup.ts\nimport { useCallback as useCallback2, useMemo as useMemo5, useRef as useRef2 } from \"react\";\nvar getFirstOptionsFrom = (opts, r, listsAsArrays) => {\n  const firstOption = getFirstOption(opts);\n  if (r.operator === \"between\" || r.operator === \"notBetween\") {\n    const valueAsArray = [firstOption, firstOption];\n    return listsAsArrays ? valueAsArray : joinWith(\n      valueAsArray.map((v) => v ?? /* istanbul ignore next */\n      \"\"),\n      \",\"\n    );\n  }\n  return firstOption;\n};\nvar useQueryBuilderSetup = (props) => {\n  const qbId = useRef2(generateID());\n  const {\n    query: queryProp,\n    defaultQuery,\n    fields: fieldsPropOriginal,\n    operators: operatorsProp,\n    combinators: combinatorsProp = defaultCombinators,\n    translations: translationsProp,\n    enableMountQueryChange: enableMountQueryChangeProp = true,\n    controlClassnames: controlClassnamesProp,\n    controlElements: controlElementsProp,\n    getDefaultField,\n    getDefaultOperator,\n    getDefaultValue,\n    getOperators,\n    getValueEditorType,\n    getValueSources,\n    getInputType,\n    getValues,\n    autoSelectField = true,\n    autoSelectOperator = true,\n    addRuleToNewGroups = false,\n    enableDragAndDrop: enableDragAndDropProp,\n    listsAsArrays = false,\n    debugMode: debugModeProp = false,\n    idGenerator = generateID\n  } = props;\n  const operators = operatorsProp ?? defaultOperators;\n  const rqbContext = useMergedContext({\n    controlClassnames: controlClassnamesProp,\n    controlElements: controlElementsProp,\n    debugMode: debugModeProp,\n    enableDragAndDrop: enableDragAndDropProp,\n    enableMountQueryChange: enableMountQueryChangeProp,\n    translations: translationsProp\n  });\n  const { translations } = rqbContext;\n  const defaultField = useMemo5(\n    () => ({\n      id: translations.fields.placeholderName,\n      name: translations.fields.placeholderName,\n      value: translations.fields.placeholderName,\n      label: translations.fields.placeholderLabel\n    }),\n    [translations.fields.placeholderLabel, translations.fields.placeholderName]\n  );\n  const fieldsProp = useMemo5(\n    () => fieldsPropOriginal ?? [defaultField],\n    [defaultField, fieldsPropOriginal]\n  );\n  const fields = useMemo5(() => {\n    const flds = Array.isArray(fieldsProp) ? toFullOptionList(fieldsProp) : objectKeys(toFullOptionMap(fieldsProp)).map((fld) => ({ ...fieldsProp[fld], name: fld })).sort((a, b) => a.label.localeCompare(b.label));\n    if (isFlexibleOptionGroupArray(flds)) {\n      if (autoSelectField) {\n        return uniqOptGroups(flds);\n      } else {\n        return uniqOptGroups([\n          {\n            label: translations.fields.placeholderGroupLabel,\n            options: [defaultField]\n          },\n          ...flds\n        ]);\n      }\n    } else {\n      if (autoSelectField) {\n        return uniqByIdentifier(flds);\n      } else {\n        return uniqByIdentifier([defaultField, ...flds]);\n      }\n    }\n  }, [autoSelectField, defaultField, fieldsProp, translations.fields.placeholderGroupLabel]);\n  const fieldMap = useMemo5(() => {\n    if (!Array.isArray(fieldsProp)) {\n      const fp = toFullOptionMap(fieldsProp);\n      if (autoSelectField) {\n        return fp;\n      } else {\n        return { ...fp, [translations.fields.placeholderName]: defaultField };\n      }\n    }\n    const fm = {};\n    if (isFlexibleOptionGroupArray(fields)) {\n      fields.forEach(\n        (f) => f.options.forEach((opt) => {\n          fm[opt.value ?? /* istanbul ignore next */\n          opt.name] = toFullOption(\n            opt\n          );\n        })\n      );\n    } else {\n      fields.forEach((f) => {\n        fm[f.value ?? /* istanbul ignore next */\n        f.name] = toFullOption(\n          f\n        );\n      });\n    }\n    return fm;\n  }, [autoSelectField, defaultField, fields, fieldsProp, translations.fields.placeholderName]);\n  const combinators = useMemo5(() => toFullOptionList(combinatorsProp), [combinatorsProp]);\n  const defaultOperator = useMemo5(\n    () => ({\n      id: translations.operators.placeholderName,\n      name: translations.operators.placeholderName,\n      value: translations.operators.placeholderName,\n      label: translations.operators.placeholderLabel\n    }),\n    [translations.operators.placeholderLabel, translations.operators.placeholderName]\n  );\n  const getOperatorsMain = useCallback2(\n    (field, { fieldData }) => {\n      let opsFinal = toFullOptionList(operators);\n      if (fieldData?.operators) {\n        opsFinal = toFullOptionList(fieldData.operators);\n      } else if (getOperators) {\n        const ops = getOperators(field, { fieldData });\n        if (ops) {\n          opsFinal = toFullOptionList(ops);\n        }\n      }\n      if (!autoSelectOperator) {\n        if (isFlexibleOptionGroupArray(opsFinal)) {\n          opsFinal = [\n            {\n              label: translations.operators.placeholderGroupLabel,\n              options: [defaultOperator]\n            },\n            ...opsFinal\n          ];\n        } else {\n          opsFinal = [defaultOperator, ...opsFinal];\n        }\n      }\n      return uniqOptList(opsFinal);\n    },\n    [\n      autoSelectOperator,\n      defaultOperator,\n      getOperators,\n      operators,\n      translations.operators.placeholderGroupLabel\n    ]\n  );\n  const getRuleDefaultOperator = useCallback2(\n    (field) => {\n      const fieldData = fieldMap[field];\n      if (fieldData?.defaultOperator) {\n        return fieldData.defaultOperator;\n      }\n      if (getDefaultOperator) {\n        if (typeof getDefaultOperator === \"function\") {\n          return getDefaultOperator(field, { fieldData });\n        } else {\n          return getDefaultOperator;\n        }\n      }\n      const ops = getOperatorsMain(field, { fieldData }) ?? /* istanbul ignore next */\n      [];\n      return getFirstOption(ops) ?? /* istanbul ignore next */\n      \"\";\n    },\n    [fieldMap, getDefaultOperator, getOperatorsMain]\n  );\n  const getValueEditorTypeMain = useCallback2(\n    (field, operator, { fieldData }) => {\n      if (fieldData.valueEditorType) {\n        if (typeof fieldData.valueEditorType === \"function\") {\n          return fieldData.valueEditorType(operator);\n        }\n        return fieldData.valueEditorType;\n      }\n      return getValueEditorType?.(field, operator, { fieldData }) ?? \"text\";\n    },\n    [getValueEditorType]\n  );\n  const getValueSourcesMain = useCallback2(\n    (field, operator) => getValueSourcesUtil(fieldMap[field], operator, getValueSources),\n    [fieldMap, getValueSources]\n  );\n  const getValuesMain = useCallback2(\n    (field, operator, { fieldData }) => {\n      if (fieldData?.values) {\n        return toFullOptionList(fieldData.values);\n      }\n      if (getValues) {\n        return toFullOptionList(getValues(field, operator, { fieldData }));\n      }\n      return [];\n    },\n    [getValues]\n  );\n  const getRuleDefaultValue = useCallback2(\n    (r) => {\n      const fieldData = fieldMap[r.field];\n      if (fieldData?.defaultValue !== void 0 && fieldData.defaultValue !== null) {\n        return fieldData.defaultValue;\n      } else if (getDefaultValue) {\n        return getDefaultValue(r, { fieldData });\n      }\n      let value = \"\";\n      const values = getValuesMain(r.field, r.operator, {\n        fieldData\n      });\n      if (r.valueSource === \"field\") {\n        const filteredFields = filterFieldsByComparator(fieldData, fields, r.operator);\n        if (filteredFields.length > 0) {\n          value = getFirstOptionsFrom(filteredFields, r, listsAsArrays);\n        } else {\n          value = \"\";\n        }\n      } else if (values.length) {\n        const editorType = getValueEditorTypeMain(\n          r.field,\n          r.operator,\n          { fieldData }\n        );\n        if (editorType === \"multiselect\") {\n          value = listsAsArrays ? [] : \"\";\n        } else if (editorType === \"select\" || editorType === \"radio\") {\n          value = getFirstOptionsFrom(values, r, listsAsArrays);\n        }\n      } else {\n        const editorType = getValueEditorTypeMain(\n          r.field,\n          r.operator,\n          { fieldData }\n        );\n        if (editorType === \"checkbox\") {\n          value = false;\n        }\n      }\n      return value;\n    },\n    [fieldMap, fields, getDefaultValue, getValueEditorTypeMain, getValuesMain, listsAsArrays]\n  );\n  const getInputTypeMain = useCallback2(\n    (field, operator, { fieldData }) => {\n      if (getInputType) {\n        const inputType = getInputType(field, operator, { fieldData });\n        if (inputType)\n          return inputType;\n      }\n      return \"text\";\n    },\n    [getInputType]\n  );\n  const createRule = useCallback2(() => {\n    let field = \"\";\n    const flds = fields;\n    if (flds?.length > 0 && flds[0]) {\n      const fo = getFirstOption(flds);\n      if (fo)\n        field = fo;\n    }\n    if (getDefaultField) {\n      if (typeof getDefaultField === \"function\") {\n        const df = getDefaultField(flds);\n        if (df)\n          field = df;\n      } else {\n        field = getDefaultField;\n      }\n    }\n    const operator = getRuleDefaultOperator(field);\n    const valueSource = getValueSourcesMain(field, operator)[0] ?? \"value\";\n    const newRule = {\n      id: idGenerator(),\n      field,\n      operator,\n      valueSource,\n      value: \"\"\n    };\n    const value = getRuleDefaultValue(newRule);\n    return { ...newRule, value };\n  }, [\n    fields,\n    getDefaultField,\n    getRuleDefaultOperator,\n    getRuleDefaultValue,\n    getValueSourcesMain,\n    idGenerator\n  ]);\n  const createRuleGroup = useCallback2(\n    (independentCombinators) => {\n      if (independentCombinators) {\n        return {\n          id: idGenerator(),\n          rules: addRuleToNewGroups ? [createRule()] : [],\n          not: false\n        };\n      }\n      return {\n        id: idGenerator(),\n        rules: addRuleToNewGroups ? [createRule()] : [],\n        combinator: getFirstOption(combinators) ?? /* istanbul ignore next */\n        \"\",\n        not: false\n      };\n    },\n    [addRuleToNewGroups, combinators, createRule, idGenerator]\n  );\n  useControlledOrUncontrolled({\n    defaultQuery,\n    queryProp\n  });\n  return {\n    qbId: qbId.current,\n    rqbContext,\n    fields,\n    fieldMap,\n    combinators,\n    getOperatorsMain,\n    getRuleDefaultOperator,\n    getValueEditorTypeMain,\n    getValueSourcesMain,\n    getValuesMain,\n    getRuleDefaultValue,\n    getInputTypeMain,\n    createRule,\n    createRuleGroup\n  };\n};\n\n// src/hooks/useReactDndWarning.ts\nvar didWarnEnabledDndWithoutReactDnD = false;\nvar useReactDndWarning = (enableDragAndDrop, dndRefs) => {\n  if (process.env.NODE_ENV !== \"production\" && !didWarnEnabledDndWithoutReactDnD && enableDragAndDrop && !dndRefs) {\n    console.error(errorEnabledDndWithoutReactDnD);\n    didWarnEnabledDndWithoutReactDnD = true;\n  }\n};\n\n// src/hooks/useRule.ts\nimport { clsx as clsx3 } from \"clsx\";\nimport { useCallback as useCallback3, useMemo as useMemo6 } from \"react\";\nvar useRule = (props) => {\n  const {\n    id,\n    path,\n    rule: ruleProp,\n    schema,\n    actions: { moveRule, onPropChange, onRuleRemove },\n    disabled: disabledProp,\n    parentDisabled,\n    shiftUpDisabled,\n    shiftDownDisabled,\n    field: fieldProp,\n    operator: operatorProp,\n    value: valueProp,\n    valueSource: valueSourceProp,\n    dragMonitorId = \"\",\n    dropMonitorId = \"\",\n    dndRef = null,\n    dragRef = null,\n    isDragging = false,\n    isOver = false\n  } = props;\n  const {\n    classNames: classNamesProp,\n    fields,\n    fieldMap,\n    getInputType,\n    getOperators,\n    getValueEditorType,\n    getValueEditorSeparator,\n    getValueSources,\n    getValues,\n    validationMap,\n    enableDragAndDrop,\n    getRuleClassname\n  } = schema;\n  useDeprecatedProps(\"rule\", !ruleProp);\n  useReactDndWarning(enableDragAndDrop, !!(dragMonitorId || dropMonitorId || dndRef || dragRef));\n  const disabled = !!parentDisabled || !!disabledProp;\n  const rule = useMemo6(\n    () => ruleProp ? ruleProp : {\n      id,\n      field: fieldProp ?? /* istanbul ignore next */\n      \"\",\n      operator: operatorProp ?? /* istanbul ignore next */\n      \"\",\n      value: valueProp,\n      valueSource: valueSourceProp\n    },\n    [fieldProp, id, operatorProp, ruleProp, valueProp, valueSourceProp]\n  );\n  const classNames = useMemo6(\n    () => ({\n      shiftActions: clsx3(standardClassnames.shiftActions, classNamesProp.shiftActions),\n      dragHandle: clsx3(standardClassnames.dragHandle, classNamesProp.dragHandle),\n      fields: clsx3(standardClassnames.fields, classNamesProp.valueSelector, classNamesProp.fields),\n      operators: clsx3(\n        standardClassnames.operators,\n        classNamesProp.valueSelector,\n        classNamesProp.operators\n      ),\n      valueSource: clsx3(\n        standardClassnames.valueSource,\n        classNamesProp.valueSelector,\n        classNamesProp.valueSource\n      ),\n      value: clsx3(standardClassnames.value, classNamesProp.value),\n      cloneRule: clsx3(\n        standardClassnames.cloneRule,\n        classNamesProp.actionElement,\n        classNamesProp.cloneRule\n      ),\n      lockRule: clsx3(\n        standardClassnames.lockRule,\n        classNamesProp.actionElement,\n        classNamesProp.lockRule\n      ),\n      removeRule: clsx3(\n        standardClassnames.removeRule,\n        classNamesProp.actionElement,\n        classNamesProp.removeRule\n      )\n    }),\n    [\n      classNamesProp.shiftActions,\n      classNamesProp.dragHandle,\n      classNamesProp.valueSelector,\n      classNamesProp.fields,\n      classNamesProp.operators,\n      classNamesProp.valueSource,\n      classNamesProp.value,\n      classNamesProp.actionElement,\n      classNamesProp.cloneRule,\n      classNamesProp.lockRule,\n      classNamesProp.removeRule\n    ]\n  );\n  const generateOnChangeHandler = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (prop) => (value, _context) => {\n      if (!disabled) {\n        onPropChange(prop, value, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n  const cloneRule = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      if (!disabled) {\n        const newPath = [...getParentPath(path), path[path.length - 1] + 1];\n        moveRule(path, newPath, true);\n      }\n    },\n    [disabled, moveRule, path]\n  );\n  const toggleLockRule = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      onPropChange(\"disabled\", !disabled, path);\n    },\n    [disabled, onPropChange, path]\n  );\n  const removeRule = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      if (!disabled) {\n        onRuleRemove(path);\n      }\n    },\n    [disabled, onRuleRemove, path]\n  );\n  const shiftRuleUp = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event, _context) => {\n      if (!disabled && !shiftUpDisabled) {\n        moveRule(path, \"up\", event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftUpDisabled]\n  );\n  const shiftRuleDown = useCallback3(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event, _context) => {\n      if (!disabled && !shiftDownDisabled) {\n        moveRule(path, \"down\", event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftDownDisabled]\n  );\n  const fieldData = useMemo6(\n    () => fieldMap?.[rule.field] ?? { name: rule.field, value: rule.field, label: rule.field },\n    [fieldMap, rule.field]\n  );\n  const inputType = useMemo6(\n    () => fieldData.inputType ?? getInputType(rule.field, rule.operator, { fieldData }),\n    [fieldData, getInputType, rule.field, rule.operator]\n  );\n  const operators = useMemo6(\n    () => getOperators(rule.field, { fieldData }),\n    [fieldData, getOperators, rule.field]\n  );\n  const operatorObject = useMemo6(\n    () => getOption(operators, rule.operator),\n    [operators, rule.operator]\n  );\n  const arity = operatorObject?.arity;\n  const hideValueControls = typeof arity === \"string\" && arity === \"unary\" || typeof arity === \"number\" && arity < 2;\n  const valueSources = useMemo6(\n    () => typeof fieldData.valueSources === \"function\" ? fieldData.valueSources(rule.operator) : fieldData.valueSources ?? getValueSources(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueSources, rule.field, rule.operator]\n  );\n  const valueEditorType = useMemo6(\n    () => rule.valueSource === \"field\" ? \"select\" : getValueEditorType(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueEditorType, rule.field, rule.operator, rule.valueSource]\n  );\n  const valueEditorSeparator = useMemo6(\n    () => getValueEditorSeparator(rule.field, rule.operator, { fieldData }),\n    [fieldData, getValueEditorSeparator, rule.field, rule.operator]\n  );\n  const values = useMemo6(\n    () => rule.valueSource === \"field\" ? filterFieldsByComparator(fieldData, fields, rule.operator) : fieldData.values ?? getValues(rule.field, rule.operator, { fieldData }),\n    [fieldData, fields, getValues, rule.field, rule.operator, rule.valueSource]\n  );\n  const valueSourceOptions = useMemo6(\n    () => valueSources.map((vs) => ({ name: vs, value: vs, label: vs })),\n    [valueSources]\n  );\n  const validationResult = useMemo6(\n    () => validationMap[id ?? /* istanbul ignore next */\n    \"\"] ?? (typeof fieldData.validator === \"function\" ? fieldData.validator(rule) : null),\n    [fieldData, id, rule, validationMap]\n  );\n  const validationClassName = useMemo6(\n    () => getValidationClassNames(validationResult),\n    [validationResult]\n  );\n  const fieldBasedClassName = useMemo6(() => fieldData?.className ?? \"\", [fieldData?.className]);\n  const operatorBasedClassName = useMemo6(\n    () => operatorObject?.className ?? \"\",\n    [operatorObject?.className]\n  );\n  const outerClassName = clsx3(\n    getRuleClassname(rule, { fieldData }),\n    fieldBasedClassName,\n    operatorBasedClassName,\n    standardClassnames.rule,\n    classNamesProp.rule,\n    {\n      [standardClassnames.disabled]: disabled,\n      [standardClassnames.dndDragging]: isDragging,\n      [standardClassnames.dndOver]: isOver\n    },\n    validationClassName\n  );\n  return {\n    ...props,\n    classNames,\n    cloneRule,\n    disabled,\n    dndRef,\n    dragMonitorId,\n    dragRef,\n    dropMonitorId,\n    fieldData,\n    generateOnChangeHandler,\n    hideValueControls,\n    inputType,\n    operators,\n    outerClassName,\n    removeRule,\n    rule,\n    shiftRuleUp,\n    shiftRuleDown,\n    toggleLockRule,\n    validationResult,\n    valueEditorSeparator,\n    valueEditorType,\n    values,\n    valueSourceOptions,\n    valueSources\n  };\n};\n\n// src/hooks/useRuleGroup.ts\nimport { clsx as clsx4 } from \"clsx\";\nimport { useCallback as useCallback4, useMemo as useMemo7 } from \"react\";\nvar useRuleGroup = (props) => {\n  const {\n    id,\n    path,\n    ruleGroup: ruleGroupProp,\n    schema: {\n      qbId,\n      accessibleDescriptionGenerator,\n      classNames: classNamesProp,\n      combinators,\n      createRule,\n      createRuleGroup,\n      disabledPaths,\n      independentCombinators,\n      validationMap,\n      enableDragAndDrop,\n      getRuleGroupClassname\n    },\n    actions: { onGroupAdd, onGroupRemove, onPropChange, onRuleAdd, moveRule },\n    disabled: disabledProp,\n    parentDisabled,\n    shiftUpDisabled,\n    shiftDownDisabled,\n    combinator: combinatorProp,\n    rules: rulesProp,\n    not: notProp,\n    // Drag-and-drop\n    dragMonitorId = \"\",\n    dropMonitorId = \"\",\n    previewRef = null,\n    dragRef = null,\n    dropRef = null,\n    isDragging = false,\n    isOver = false\n  } = props;\n  useDeprecatedProps(\"ruleGroup\", !ruleGroupProp);\n  useReactDndWarning(\n    enableDragAndDrop,\n    !!(dragMonitorId || dropMonitorId || previewRef || dragRef || dropRef)\n  );\n  const disabled = !!parentDisabled || !!disabledProp;\n  const combinator = useMemo7(\n    () => ruleGroupProp && isRuleGroupType(ruleGroupProp) ? ruleGroupProp.combinator : !ruleGroupProp ? combinatorProp ?? getFirstOption(combinators) : getFirstOption(combinators),\n    [combinatorProp, combinators, ruleGroupProp]\n  );\n  const ruleGroup = useMemo7(\n    () => ruleGroupProp ? { ...ruleGroupProp, ...!independentCombinators ? { combinator } : {} } : { rules: rulesProp, not: notProp },\n    [combinator, independentCombinators, notProp, ruleGroupProp, rulesProp]\n  );\n  const classNames = useMemo7(\n    () => ({\n      header: clsx4(standardClassnames.header, classNamesProp.header, {\n        [standardClassnames.dndOver]: isOver\n      }),\n      shiftActions: clsx4(standardClassnames.shiftActions, classNamesProp.shiftActions),\n      dragHandle: clsx4(standardClassnames.dragHandle, classNamesProp.dragHandle),\n      combinators: clsx4(\n        standardClassnames.combinators,\n        classNamesProp.valueSelector,\n        classNamesProp.combinators\n      ),\n      notToggle: clsx4(standardClassnames.notToggle, classNamesProp.notToggle),\n      addRule: clsx4(\n        standardClassnames.addRule,\n        classNamesProp.actionElement,\n        classNamesProp.addRule\n      ),\n      addGroup: clsx4(\n        standardClassnames.addGroup,\n        classNamesProp.actionElement,\n        classNamesProp.addGroup\n      ),\n      cloneGroup: clsx4(\n        standardClassnames.cloneGroup,\n        classNamesProp.actionElement,\n        classNamesProp.cloneGroup\n      ),\n      lockGroup: clsx4(\n        standardClassnames.lockGroup,\n        classNamesProp.actionElement,\n        classNamesProp.lockGroup\n      ),\n      removeGroup: clsx4(\n        standardClassnames.removeGroup,\n        classNamesProp.actionElement,\n        classNamesProp.removeGroup\n      ),\n      body: clsx4(standardClassnames.body, classNamesProp.body)\n    }),\n    [\n      classNamesProp.actionElement,\n      classNamesProp.addGroup,\n      classNamesProp.addRule,\n      classNamesProp.body,\n      classNamesProp.cloneGroup,\n      classNamesProp.combinators,\n      classNamesProp.dragHandle,\n      classNamesProp.header,\n      classNamesProp.lockGroup,\n      classNamesProp.notToggle,\n      classNamesProp.removeGroup,\n      classNamesProp.shiftActions,\n      classNamesProp.valueSelector,\n      isOver\n    ]\n  );\n  const onCombinatorChange = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (value, _context) => {\n      if (!disabled) {\n        onPropChange(\"combinator\", value, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n  const onIndependentCombinatorChange = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (value, index, _context) => {\n      if (!disabled) {\n        onPropChange(\"combinator\", value, path.concat([index]));\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n  const onNotToggleChange = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (checked, _context) => {\n      if (!disabled) {\n        onPropChange(\"not\", checked, path);\n      }\n    },\n    [disabled, onPropChange, path]\n  );\n  const addRule = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, context) => {\n      if (!disabled) {\n        const newRule = createRule();\n        onRuleAdd(newRule, path, context);\n      }\n    },\n    [createRule, disabled, onRuleAdd, path]\n  );\n  const addGroup = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, context) => {\n      if (!disabled) {\n        const newGroup = createRuleGroup(independentCombinators);\n        onGroupAdd(newGroup, path, context);\n      }\n    },\n    [createRuleGroup, disabled, independentCombinators, onGroupAdd, path]\n  );\n  const cloneGroup = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      if (!disabled) {\n        const newPath = [...getParentPath(path), path[path.length - 1] + 1];\n        moveRule(path, newPath, true);\n      }\n    },\n    [disabled, moveRule, path]\n  );\n  const shiftGroupUp = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event, _context) => {\n      if (!disabled && !shiftUpDisabled) {\n        moveRule(path, \"up\", event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftUpDisabled]\n  );\n  const shiftGroupDown = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (event, _context) => {\n      if (!disabled && !shiftDownDisabled) {\n        moveRule(path, \"down\", event?.altKey);\n      }\n    },\n    [disabled, moveRule, path, shiftDownDisabled]\n  );\n  const toggleLockGroup = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      onPropChange(\"disabled\", !disabled, path);\n    },\n    [disabled, onPropChange, path]\n  );\n  const removeGroup = useCallback4(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (_event, _context) => {\n      if (!disabled) {\n        onGroupRemove(path);\n      }\n    },\n    [disabled, onGroupRemove, path]\n  );\n  const validationResult = useMemo7(\n    () => validationMap[id ?? /* istanbul ignore next */\n    \"\"],\n    [id, validationMap]\n  );\n  const validationClassName = useMemo7(\n    () => getValidationClassNames(validationResult),\n    [validationResult]\n  );\n  const combinatorBasedClassName = useMemo7(\n    () => independentCombinators ? null : getOption(combinators, combinator)?.className ?? \"\",\n    [combinator, combinators, independentCombinators]\n  );\n  const ruleGroupClassname = useMemo7(\n    () => getRuleGroupClassname(ruleGroup),\n    [getRuleGroupClassname, ruleGroup]\n  );\n  const outerClassName = useMemo7(\n    () => clsx4(\n      ruleGroupClassname,\n      combinatorBasedClassName,\n      standardClassnames.ruleGroup,\n      classNamesProp.ruleGroup,\n      {\n        [standardClassnames.disabled]: disabled,\n        [standardClassnames.dndDragging]: isDragging\n      },\n      validationClassName\n    ),\n    [\n      classNamesProp.ruleGroup,\n      combinatorBasedClassName,\n      disabled,\n      ruleGroupClassname,\n      isDragging,\n      validationClassName\n    ]\n  );\n  const pathsMemo = useMemo7(() => {\n    const paths = [];\n    for (let i = 0; i < ruleGroup.rules.length; i++) {\n      const thisPath = [...path, i];\n      paths[i] = {\n        path: thisPath,\n        disabled: disabled || disabledPaths.some((p) => pathsAreEqual(thisPath, p))\n      };\n    }\n    return paths;\n  }, [disabled, path, ruleGroup.rules.length, disabledPaths]);\n  const accessibleDescription = useMemo7(\n    () => accessibleDescriptionGenerator({ path, qbId }),\n    [accessibleDescriptionGenerator, path, qbId]\n  );\n  return {\n    ...props,\n    addGroup,\n    addRule,\n    accessibleDescription,\n    classNames,\n    cloneGroup,\n    combinator,\n    disabled,\n    dragMonitorId,\n    dragRef,\n    dropMonitorId,\n    dropRef,\n    isDragging,\n    isOver,\n    onCombinatorChange,\n    onGroupAdd,\n    onIndependentCombinatorChange,\n    onNotToggleChange,\n    outerClassName,\n    parentDisabled,\n    pathsMemo,\n    previewRef,\n    removeGroup,\n    ruleGroup,\n    shiftGroupUp,\n    shiftGroupDown,\n    toggleLockGroup,\n    validationClassName,\n    validationResult\n  };\n};\n\n// src/hooks/useSelectElementChangeHandler.ts\nimport { useMemo as useMemo8 } from \"react\";\nvar useSelectElementChangeHandler = ({\n  multiple,\n  onChange\n}) => {\n  const selectElementChangeHandler = useMemo8(\n    () => multiple ? (e) => onChange(Array.from(e.target.selectedOptions).map((o) => o.value)) : (e) => onChange(e.target.value),\n    [multiple, onChange]\n  );\n  return selectElementChangeHandler;\n};\n\n// src/hooks/useStopEventPropagation.ts\nimport { useCallback as useCallback5 } from \"react\";\nvar useStopEventPropagation = (method) => useCallback5(\n  (event, context) => {\n    event?.preventDefault();\n    event?.stopPropagation();\n    method(event, context);\n  },\n  [method]\n);\n\n// src/hooks/useValueEditor.ts\nimport { produce as produce6 } from \"immer\";\nimport { useCallback as useCallback6, useEffect as useEffect2, useMemo as useMemo9 } from \"react\";\nvar useValueEditor = ({\n  handleOnChange,\n  inputType,\n  operator,\n  value,\n  listsAsArrays,\n  parseNumbers,\n  values,\n  type,\n  skipHook\n}) => {\n  useEffect2(() => {\n    if (!skipHook && type !== \"multiselect\" && ![\"between\", \"notBetween\", \"in\", \"notIn\"].includes(operator) && (Array.isArray(value) || inputType === \"number\" && typeof value === \"string\" && value.includes(\",\"))) {\n      handleOnChange(toArray(value)[0] ?? \"\");\n    }\n  }, [handleOnChange, inputType, operator, skipHook, type, value]);\n  const valueAsArray = useMemo9(() => toArray(value), [value]);\n  const multiValueHandler = useCallback6(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (v, i) => {\n      const val = produce6(valueAsArray, (va) => {\n        va[i] = parseNumber(v, { parseNumbers });\n        if (i === 0 && (operator === \"between\" || operator === \"notBetween\") && (va.length < 2 || typeof va[1] === \"undefined\")) {\n          va[1] = getFirstOption(values);\n        }\n      });\n      handleOnChange(listsAsArrays ? val : joinWith(val, \",\"));\n    },\n    [handleOnChange, listsAsArrays, operator, parseNumbers, valueAsArray, values]\n  );\n  return {\n    /**\n     * Array of values for when the main value represents a list, e.g. when operator\n     * is \"between\" or \"in\".\n     */\n    valueAsArray,\n    /**\n     * An update handler for a series of value editors, e.g. when operator is \"between\".\n     * Calling this function will update a single element of the value array and leave\n     * the rest of the array as is.\n     *\n     * @param {string} val The new value for the editor\n     * @param {number} idx The index of the editor (and the array element to update)\n     */\n    multiValueHandler\n  };\n};\n\n// src/hooks/useValueSelector.ts\nimport { useCallback as useCallback7, useMemo as useMemo10 } from \"react\";\nvar useValueSelector = ({\n  handleOnChange,\n  listsAsArrays = false,\n  multiple = false,\n  value\n}) => {\n  const onChange = useCallback7(\n    (v) => {\n      if (multiple) {\n        const valueAsArray = toArray(v);\n        handleOnChange(listsAsArrays ? valueAsArray : joinWith(valueAsArray, \",\"));\n      } else {\n        handleOnChange(v);\n      }\n    },\n    [handleOnChange, listsAsArrays, multiple]\n  );\n  const val = useMemo10(() => multiple ? toArray(value) : value, [multiple, value]);\n  return {\n    /**\n     * Memoized change handler for value selectors\n     */\n    onChange,\n    /**\n     * The value as provided or, if appropriate, as an array\n     */\n    val\n  };\n};\n\n// src/components/QueryBuilderContext.ts\nimport { createContext as createContext2 } from \"react\";\nvar QueryBuilderContext = createContext2({});\nQueryBuilderContext.displayName = \"QueryBuilderContext\";\n\n// src/components/QueryBuilder.tsx\nvar rootPath = [];\nvar QueryBuilderStateProvider = ({ children }) => /* @__PURE__ */ React8.createElement(Provider, { context: QueryBuilderStateContext, store: queryBuilderStore }, children);\nvar QueryBuilderInternal = ({\n  setup,\n  props\n}) => {\n  const qb = useQueryBuilderSchema(props, setup);\n  const RuleGroupControlElement = qb.schema.controls.ruleGroup;\n  const QueryBuilderContext2 = QueryBuilderContext;\n  return /* @__PURE__ */ React8.createElement(QueryBuilderContext2.Provider, { key: qb.dndEnabledAttr, value: qb.rqbContext }, /* @__PURE__ */ React8.createElement(\n    \"div\",\n    {\n      role: \"form\",\n      className: qb.wrapperClassName,\n      \"data-dnd\": qb.dndEnabledAttr,\n      \"data-inlinecombinators\": qb.inlineCombinatorsAttr\n    },\n    /* @__PURE__ */ React8.createElement(\n      RuleGroupControlElement,\n      {\n        translations: qb.translations,\n        ruleGroup: qb.rootGroup,\n        rules: qb.rootGroup.rules,\n        ...qb.combinatorPropObject,\n        not: !!qb.rootGroup.not,\n        schema: qb.schema,\n        actions: qb.actions,\n        id: qb.rootGroup.id,\n        path: rootPath,\n        disabled: qb.rootGroupDisabled,\n        shiftUpDisabled: true,\n        shiftDownDisabled: true,\n        parentDisabled: qb.queryDisabled,\n        context: qb.context\n      }\n    )\n  ));\n};\nvar QueryBuilder = (props) => {\n  const setup = useQueryBuilderSetup(props);\n  return /* @__PURE__ */ React8.createElement(QueryBuilderStateProvider, null, /* @__PURE__ */ React8.createElement(QueryBuilderInternal, { props, setup }));\n};\nQueryBuilder.displayName = \"QueryBuilder\";\n\n// src/components/Rule.tsx\nimport * as React9 from \"react\";\nvar Rule = React9.memo((props) => {\n  const r = useRule(props);\n  r.cloneRule = useStopEventPropagation(r.cloneRule);\n  r.toggleLockRule = useStopEventPropagation(r.toggleLockRule);\n  r.removeRule = useStopEventPropagation(r.removeRule);\n  r.shiftRuleUp = useStopEventPropagation(r.shiftRuleUp);\n  r.shiftRuleDown = useStopEventPropagation(r.shiftRuleDown);\n  return /* @__PURE__ */ React9.createElement(\n    \"div\",\n    {\n      ref: r.dndRef,\n      \"data-testid\": TestID.rule,\n      \"data-dragmonitorid\": r.dragMonitorId,\n      \"data-dropmonitorid\": r.dropMonitorId,\n      className: r.outerClassName,\n      \"data-rule-id\": r.id,\n      \"data-level\": r.path.length,\n      \"data-path\": JSON.stringify(r.path)\n    },\n    /* @__PURE__ */ React9.createElement(RuleComponents, { ...r })\n  );\n});\nRule.displayName = \"Rule\";\nvar RuleComponents = React9.memo((r) => {\n  const {\n    schema: {\n      controls: {\n        shiftActions: ShiftActionsControlElement,\n        dragHandle: DragHandleControlElement,\n        fieldSelector: FieldSelectorControlElement,\n        operatorSelector: OperatorSelectorControlElement,\n        valueSourceSelector: ValueSourceSelectorControlElement,\n        valueEditor: ValueEditorControlElement,\n        cloneRuleAction: CloneRuleActionControlElement,\n        lockRuleAction: LockRuleActionControlElement,\n        removeRuleAction: RemoveRuleActionControlElement\n      }\n    }\n  } = r;\n  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, r.schema.showShiftActions && /* @__PURE__ */ React9.createElement(\n    ShiftActionsControlElement,\n    {\n      testID: TestID.shiftActions,\n      level: r.path.length,\n      path: r.path,\n      titles: {\n        shiftUp: r.translations.shiftActionUp.title,\n        shiftDown: r.translations.shiftActionDown.title\n      },\n      labels: {\n        shiftUp: r.translations.shiftActionUp.label,\n        shiftDown: r.translations.shiftActionDown.label\n      },\n      className: r.classNames.shiftActions,\n      disabled: r.disabled,\n      shiftUp: r.shiftRuleUp,\n      shiftDown: r.shiftRuleDown,\n      shiftUpDisabled: r.shiftUpDisabled,\n      shiftDownDisabled: r.shiftDownDisabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      ruleOrGroup: r.rule\n    }\n  ), r.schema.enableDragAndDrop && /* @__PURE__ */ React9.createElement(\n    DragHandleControlElement,\n    {\n      testID: TestID.dragHandle,\n      ref: r.dragRef,\n      level: r.path.length,\n      path: r.path,\n      title: r.translations.dragHandle.title,\n      label: r.translations.dragHandle.label,\n      className: r.classNames.dragHandle,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      ruleOrGroup: r.rule\n    }\n  ), /* @__PURE__ */ React9.createElement(\n    FieldSelectorControlElement,\n    {\n      testID: TestID.fields,\n      options: r.schema.fields,\n      title: r.translations.fields.title,\n      value: r.rule.field,\n      operator: r.rule.operator,\n      className: r.classNames.fields,\n      handleOnChange: r.generateOnChangeHandler(\"field\"),\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      rule: r.rule\n    }\n  ), (r.schema.autoSelectField || r.rule.field !== r.translations.fields.placeholderName) && /* @__PURE__ */ React9.createElement(React9.Fragment, null, /* @__PURE__ */ React9.createElement(\n    OperatorSelectorControlElement,\n    {\n      testID: TestID.operators,\n      field: r.rule.field,\n      fieldData: r.fieldData,\n      title: r.translations.operators.title,\n      options: r.operators,\n      value: r.rule.operator,\n      className: r.classNames.operators,\n      handleOnChange: r.generateOnChangeHandler(\"operator\"),\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      rule: r.rule\n    }\n  ), (r.schema.autoSelectOperator || r.rule.operator !== r.translations.operators.placeholderName) && !r.hideValueControls && /* @__PURE__ */ React9.createElement(React9.Fragment, null, ![\"null\", \"notNull\"].includes(r.rule.operator) && r.valueSources.length > 1 && /* @__PURE__ */ React9.createElement(\n    ValueSourceSelectorControlElement,\n    {\n      testID: TestID.valueSourceSelector,\n      field: r.rule.field,\n      fieldData: r.fieldData,\n      title: r.translations.valueSourceSelector.title,\n      options: r.valueSourceOptions,\n      value: r.rule.valueSource ?? \"value\",\n      className: r.classNames.valueSource,\n      handleOnChange: r.generateOnChangeHandler(\"valueSource\"),\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      rule: r.rule\n    }\n  ), /* @__PURE__ */ React9.createElement(\n    ValueEditorControlElement,\n    {\n      testID: TestID.valueEditor,\n      field: r.rule.field,\n      fieldData: r.fieldData,\n      title: r.translations.value.title,\n      operator: r.rule.operator,\n      value: r.rule.value,\n      valueSource: r.rule.valueSource ?? \"value\",\n      type: r.valueEditorType,\n      inputType: r.inputType,\n      values: r.values,\n      listsAsArrays: r.schema.listsAsArrays,\n      parseNumbers: r.schema.parseNumbers,\n      separator: r.valueEditorSeparator,\n      className: r.classNames.value,\n      handleOnChange: r.generateOnChangeHandler(\"value\"),\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      schema: r.schema,\n      rule: r.rule\n    }\n  ))), r.schema.showCloneButtons && /* @__PURE__ */ React9.createElement(\n    CloneRuleActionControlElement,\n    {\n      testID: TestID.cloneRule,\n      label: r.translations.cloneRule.label,\n      title: r.translations.cloneRule.title,\n      className: r.classNames.cloneRule,\n      handleOnClick: r.cloneRule,\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      ruleOrGroup: r.rule,\n      schema: r.schema\n    }\n  ), r.schema.showLockButtons && /* @__PURE__ */ React9.createElement(\n    LockRuleActionControlElement,\n    {\n      testID: TestID.lockRule,\n      label: r.translations.lockRule.label,\n      title: r.translations.lockRule.title,\n      className: r.classNames.lockRule,\n      handleOnClick: r.toggleLockRule,\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      disabledTranslation: r.parentDisabled ? void 0 : r.translations.lockRuleDisabled,\n      context: r.context,\n      validation: r.validationResult,\n      ruleOrGroup: r.rule,\n      schema: r.schema\n    }\n  ), /* @__PURE__ */ React9.createElement(\n    RemoveRuleActionControlElement,\n    {\n      testID: TestID.removeRule,\n      label: r.translations.removeRule.label,\n      title: r.translations.removeRule.title,\n      className: r.classNames.removeRule,\n      handleOnClick: r.removeRule,\n      level: r.path.length,\n      path: r.path,\n      disabled: r.disabled,\n      context: r.context,\n      validation: r.validationResult,\n      ruleOrGroup: r.rule,\n      schema: r.schema\n    }\n  ));\n});\n\n// src/components/RuleGroup.tsx\nimport * as React10 from \"react\";\nimport { Fragment as Fragment3 } from \"react\";\nvar RuleGroup = React10.memo((props) => {\n  const rg = useRuleGroup(props);\n  rg.addRule = useStopEventPropagation(rg.addRule);\n  rg.addGroup = useStopEventPropagation(rg.addGroup);\n  rg.cloneGroup = useStopEventPropagation(rg.cloneGroup);\n  rg.toggleLockGroup = useStopEventPropagation(rg.toggleLockGroup);\n  rg.removeGroup = useStopEventPropagation(rg.removeGroup);\n  rg.shiftGroupUp = useStopEventPropagation(rg.shiftGroupUp);\n  rg.shiftGroupDown = useStopEventPropagation(rg.shiftGroupDown);\n  return /* @__PURE__ */ React10.createElement(\n    \"div\",\n    {\n      ref: rg.previewRef,\n      title: rg.accessibleDescription,\n      className: rg.outerClassName,\n      \"data-testid\": TestID.ruleGroup,\n      \"data-dragmonitorid\": rg.dragMonitorId,\n      \"data-dropmonitorid\": rg.dropMonitorId,\n      \"data-rule-group-id\": rg.id,\n      \"data-level\": rg.path.length,\n      \"data-path\": JSON.stringify(rg.path)\n    },\n    /* @__PURE__ */ React10.createElement(\"div\", { ref: rg.dropRef, className: rg.classNames.header }, /* @__PURE__ */ React10.createElement(RuleGroupHeaderComponents, { ...rg })),\n    /* @__PURE__ */ React10.createElement(\"div\", { className: rg.classNames.body }, /* @__PURE__ */ React10.createElement(RuleGroupBodyComponents, { ...rg }))\n  );\n});\nRuleGroup.displayName = \"RuleGroup\";\nvar RuleGroupHeaderComponents = React10.memo(\n  (rg) => {\n    const {\n      schema: {\n        controls: {\n          shiftActions: ShiftActionsControlElement,\n          dragHandle: DragHandleControlElement,\n          combinatorSelector: CombinatorSelectorControlElement,\n          notToggle: NotToggleControlElement,\n          addRuleAction: AddRuleActionControlElement,\n          addGroupAction: AddGroupActionControlElement,\n          cloneGroupAction: CloneGroupActionControlElement,\n          lockGroupAction: LockGroupActionControlElement,\n          removeGroupAction: RemoveGroupActionControlElement\n        }\n      }\n    } = rg;\n    return /* @__PURE__ */ React10.createElement(React10.Fragment, null, rg.schema.showShiftActions && rg.path.length > 0 && /* @__PURE__ */ React10.createElement(\n      ShiftActionsControlElement,\n      {\n        key: TestID.shiftActions,\n        testID: TestID.shiftActions,\n        level: rg.path.length,\n        path: rg.path,\n        titles: {\n          shiftUp: rg.translations.shiftActionUp.title,\n          shiftDown: rg.translations.shiftActionDown.title\n        },\n        labels: {\n          shiftUp: rg.translations.shiftActionUp.label,\n          shiftDown: rg.translations.shiftActionDown.label\n        },\n        className: rg.classNames.shiftActions,\n        disabled: rg.disabled,\n        shiftUp: rg.shiftGroupUp,\n        shiftDown: rg.shiftGroupDown,\n        shiftUpDisabled: rg.shiftUpDisabled,\n        shiftDownDisabled: rg.shiftDownDisabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        schema: rg.schema,\n        ruleOrGroup: rg.ruleGroup\n      }\n    ), rg.path.length > 0 && rg.schema.enableDragAndDrop && /* @__PURE__ */ React10.createElement(\n      DragHandleControlElement,\n      {\n        key: TestID.dragHandle,\n        testID: TestID.dragHandle,\n        ref: rg.dragRef,\n        level: rg.path.length,\n        path: rg.path,\n        title: rg.translations.dragHandle.title,\n        label: rg.translations.dragHandle.label,\n        className: rg.classNames.dragHandle,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        schema: rg.schema,\n        ruleOrGroup: rg.ruleGroup\n      }\n    ), !rg.schema.showCombinatorsBetweenRules && !rg.schema.independentCombinators && /* @__PURE__ */ React10.createElement(\n      CombinatorSelectorControlElement,\n      {\n        key: TestID.combinators,\n        testID: TestID.combinators,\n        options: rg.schema.combinators,\n        value: rg.combinator,\n        title: rg.translations.combinators.title,\n        className: rg.classNames.combinators,\n        handleOnChange: rg.onCombinatorChange,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        schema: rg.schema\n      }\n    ), rg.schema.showNotToggle && /* @__PURE__ */ React10.createElement(\n      NotToggleControlElement,\n      {\n        key: TestID.notToggle,\n        testID: TestID.notToggle,\n        className: rg.classNames.notToggle,\n        title: rg.translations.notToggle.title,\n        label: rg.translations.notToggle.label,\n        checked: rg.ruleGroup.not,\n        handleOnChange: rg.onNotToggleChange,\n        level: rg.path.length,\n        disabled: rg.disabled,\n        path: rg.path,\n        context: rg.context,\n        validation: rg.validationResult,\n        schema: rg.schema,\n        ruleGroup: rg.ruleGroup\n      }\n    ), /* @__PURE__ */ React10.createElement(\n      AddRuleActionControlElement,\n      {\n        key: TestID.addRule,\n        testID: TestID.addRule,\n        label: rg.translations.addRule.label,\n        title: rg.translations.addRule.title,\n        className: rg.classNames.addRule,\n        handleOnClick: rg.addRule,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        ruleOrGroup: rg.ruleGroup,\n        schema: rg.schema\n      }\n    ), /* @__PURE__ */ React10.createElement(\n      AddGroupActionControlElement,\n      {\n        key: TestID.addGroup,\n        testID: TestID.addGroup,\n        label: rg.translations.addGroup.label,\n        title: rg.translations.addGroup.title,\n        className: rg.classNames.addGroup,\n        handleOnClick: rg.addGroup,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        ruleOrGroup: rg.ruleGroup,\n        schema: rg.schema\n      }\n    ), rg.schema.showCloneButtons && rg.path.length >= 1 && /* @__PURE__ */ React10.createElement(\n      CloneGroupActionControlElement,\n      {\n        key: TestID.cloneGroup,\n        testID: TestID.cloneGroup,\n        label: rg.translations.cloneRuleGroup.label,\n        title: rg.translations.cloneRuleGroup.title,\n        className: rg.classNames.cloneGroup,\n        handleOnClick: rg.cloneGroup,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        ruleOrGroup: rg.ruleGroup,\n        schema: rg.schema\n      }\n    ), rg.schema.showLockButtons && /* @__PURE__ */ React10.createElement(\n      LockGroupActionControlElement,\n      {\n        key: TestID.lockGroup,\n        testID: TestID.lockGroup,\n        label: rg.translations.lockGroup.label,\n        title: rg.translations.lockGroup.title,\n        className: rg.classNames.lockGroup,\n        handleOnClick: rg.toggleLockGroup,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        disabledTranslation: rg.parentDisabled ? void 0 : rg.translations.lockGroupDisabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        ruleOrGroup: rg.ruleGroup,\n        schema: rg.schema\n      }\n    ), rg.path.length > 0 && /* @__PURE__ */ React10.createElement(\n      RemoveGroupActionControlElement,\n      {\n        key: TestID.removeGroup,\n        testID: TestID.removeGroup,\n        label: rg.translations.removeGroup.label,\n        title: rg.translations.removeGroup.title,\n        className: rg.classNames.removeGroup,\n        handleOnClick: rg.removeGroup,\n        rules: rg.ruleGroup.rules,\n        level: rg.path.length,\n        path: rg.path,\n        disabled: rg.disabled,\n        context: rg.context,\n        validation: rg.validationResult,\n        ruleOrGroup: rg.ruleGroup,\n        schema: rg.schema\n      }\n    ));\n  }\n);\nvar RuleGroupBodyComponents = React10.memo(\n  (rg) => {\n    const {\n      schema: {\n        controls: {\n          combinatorSelector: CombinatorSelectorControlElement,\n          inlineCombinator: InlineCombinatorControlElement,\n          ruleGroup: RuleGroupControlElement,\n          rule: RuleControlElement\n        }\n      }\n    } = rg;\n    return /* @__PURE__ */ React10.createElement(React10.Fragment, null, rg.ruleGroup.rules.map(\n      (r, idx, { length: ruleArrayLength }) => {\n        const thisPathMemo = rg.pathsMemo[idx];\n        const thisPath = thisPathMemo.path;\n        const thisPathDisabled = thisPathMemo.disabled || typeof r !== \"string\" && r.disabled;\n        const shiftUpDisabled = pathsAreEqual([0], thisPath);\n        const shiftDownDisabled = rg.path.length === 0 && idx === ruleArrayLength - 1;\n        const key = typeof r === \"string\" ? [...thisPath, r].join(\"-\") : r.id;\n        return /* @__PURE__ */ React10.createElement(Fragment3, { key }, idx > 0 && !rg.schema.independentCombinators && rg.schema.showCombinatorsBetweenRules && /* @__PURE__ */ React10.createElement(\n          InlineCombinatorControlElement,\n          {\n            key: TestID.inlineCombinator,\n            options: rg.schema.combinators,\n            value: rg.combinator,\n            title: rg.translations.combinators.title,\n            className: rg.classNames.combinators,\n            handleOnChange: rg.onCombinatorChange,\n            rules: rg.ruleGroup.rules,\n            level: rg.path.length,\n            context: rg.context,\n            validation: rg.validationResult,\n            component: CombinatorSelectorControlElement,\n            path: thisPath,\n            disabled: rg.disabled,\n            independentCombinators: rg.schema.independentCombinators,\n            schema: rg.schema\n          }\n        ), typeof r === \"string\" ? /* @__PURE__ */ React10.createElement(\n          InlineCombinatorControlElement,\n          {\n            key: `${TestID.inlineCombinator}-independent`,\n            options: rg.schema.combinators,\n            value: r,\n            title: rg.translations.combinators.title,\n            className: rg.classNames.combinators,\n            handleOnChange: (val) => rg.onIndependentCombinatorChange(val, idx),\n            rules: rg.ruleGroup.rules,\n            level: rg.path.length,\n            context: rg.context,\n            validation: rg.validationResult,\n            component: CombinatorSelectorControlElement,\n            path: thisPath,\n            disabled: thisPathDisabled,\n            independentCombinators: rg.schema.independentCombinators,\n            schema: rg.schema\n          }\n        ) : isRuleGroup(r) ? /* @__PURE__ */ React10.createElement(\n          RuleGroupControlElement,\n          {\n            key: TestID.ruleGroup,\n            id: r.id,\n            schema: rg.schema,\n            actions: rg.actions,\n            path: thisPath,\n            translations: rg.translations,\n            ruleGroup: r,\n            rules: r.rules,\n            combinator: isRuleGroupType(r) ? r.combinator : void 0,\n            not: !!r.not,\n            disabled: thisPathDisabled,\n            parentDisabled: rg.parentDisabled || rg.disabled,\n            shiftUpDisabled,\n            shiftDownDisabled,\n            context: rg.context\n          }\n        ) : /* @__PURE__ */ React10.createElement(\n          RuleControlElement,\n          {\n            key: TestID.rule,\n            id: r.id,\n            rule: r,\n            field: r.field,\n            operator: r.operator,\n            value: r.value,\n            valueSource: r.valueSource,\n            schema: rg.schema,\n            actions: rg.actions,\n            path: thisPath,\n            disabled: thisPathDisabled,\n            parentDisabled: rg.parentDisabled || rg.disabled,\n            translations: rg.translations,\n            shiftUpDisabled,\n            shiftDownDisabled,\n            context: rg.context\n          }\n        ));\n      }\n    ));\n  }\n);\n\n// src/components/ShiftActions.tsx\nimport * as React11 from \"react\";\nvar ShiftActions = ({\n  disabled,\n  shiftUp,\n  shiftDown,\n  shiftUpDisabled,\n  shiftDownDisabled,\n  className,\n  labels,\n  titles,\n  testID\n}) => {\n  return /* @__PURE__ */ React11.createElement(\"div\", { \"data-testid\": testID, className }, /* @__PURE__ */ React11.createElement(\"button\", { disabled: disabled || shiftUpDisabled, onClick: shiftUp, title: titles?.shiftUp }, labels?.shiftUp), /* @__PURE__ */ React11.createElement(\n    \"button\",\n    {\n      disabled: disabled || shiftDownDisabled,\n      onClick: shiftDown,\n      title: titles?.shiftDown\n    },\n    labels?.shiftDown\n  ));\n};\nShiftActions.displayName = \"ShiftActions\";\n\n// src/components/ValueEditor.tsx\nimport * as React12 from \"react\";\nvar ValueEditor = (allProps) => {\n  const {\n    operator,\n    value,\n    handleOnChange,\n    title,\n    className,\n    type = \"text\",\n    inputType = \"text\",\n    values = [],\n    listsAsArrays,\n    parseNumbers,\n    fieldData,\n    disabled,\n    separator = null,\n    testID,\n    selectorComponent: SelectorComponent = allProps.schema.controls.valueSelector,\n    ...props\n  } = allProps;\n  const { valueAsArray, multiValueHandler } = useValueEditor(allProps);\n  if (operator === \"null\" || operator === \"notNull\") {\n    return null;\n  }\n  const placeHolderText = fieldData?.placeholder ?? \"\";\n  const inputTypeCoerced = [\"in\", \"notIn\"].includes(operator) ? \"text\" : inputType || \"text\";\n  if ((operator === \"between\" || operator === \"notBetween\") && (type === \"select\" || type === \"text\")) {\n    const editors = [\"from\", \"to\"].map((key, i) => {\n      if (type === \"text\") {\n        return /* @__PURE__ */ React12.createElement(\n          \"input\",\n          {\n            key,\n            type: inputTypeCoerced,\n            placeholder: placeHolderText,\n            value: valueAsArray[i] ?? \"\",\n            className: standardClassnames.valueListItem,\n            disabled,\n            onChange: (e) => multiValueHandler(e.target.value, i)\n          }\n        );\n      }\n      return /* @__PURE__ */ React12.createElement(\n        SelectorComponent,\n        {\n          ...props,\n          schema: allProps.schema,\n          key,\n          className: standardClassnames.valueListItem,\n          handleOnChange: (v) => multiValueHandler(v, i),\n          disabled,\n          value: valueAsArray[i] ?? getFirstOption(values),\n          options: values,\n          listsAsArrays\n        }\n      );\n    });\n    return /* @__PURE__ */ React12.createElement(\"span\", { \"data-testid\": testID, className, title }, editors[0], separator, editors[1]);\n  }\n  switch (type) {\n    case \"select\":\n    case \"multiselect\":\n      return /* @__PURE__ */ React12.createElement(\n        SelectorComponent,\n        {\n          ...props,\n          schema: allProps.schema,\n          testID,\n          className,\n          title,\n          handleOnChange,\n          disabled,\n          value,\n          options: values,\n          multiple: type === \"multiselect\",\n          listsAsArrays\n        }\n      );\n    case \"textarea\":\n      return /* @__PURE__ */ React12.createElement(\n        \"textarea\",\n        {\n          \"data-testid\": testID,\n          placeholder: placeHolderText,\n          value,\n          title,\n          className,\n          disabled,\n          onChange: (e) => handleOnChange(e.target.value)\n        }\n      );\n    case \"switch\":\n    case \"checkbox\":\n      return /* @__PURE__ */ React12.createElement(\n        \"input\",\n        {\n          \"data-testid\": testID,\n          type: \"checkbox\",\n          className,\n          title,\n          onChange: (e) => handleOnChange(e.target.checked),\n          checked: !!value,\n          disabled\n        }\n      );\n    case \"radio\":\n      return /* @__PURE__ */ React12.createElement(\"span\", { \"data-testid\": testID, className, title }, values.map((v) => /* @__PURE__ */ React12.createElement(\"label\", { key: v.name }, /* @__PURE__ */ React12.createElement(\n        \"input\",\n        {\n          type: \"radio\",\n          value: v.name,\n          disabled,\n          checked: value === v.name,\n          onChange: (e) => handleOnChange(e.target.value)\n        }\n      ), v.label)));\n  }\n  return /* @__PURE__ */ React12.createElement(\n    \"input\",\n    {\n      \"data-testid\": testID,\n      type: inputTypeCoerced,\n      placeholder: placeHolderText,\n      value,\n      title,\n      className,\n      disabled,\n      onChange: (e) => handleOnChange(parseNumber(e.target.value, { parseNumbers }))\n    }\n  );\n};\nValueEditor.displayName = \"ValueEditor\";\n\n// src/components/ValueSelector.tsx\nimport * as React13 from \"react\";\nvar ValueSelector = ({\n  className,\n  handleOnChange,\n  options,\n  title,\n  value,\n  multiple,\n  listsAsArrays,\n  disabled,\n  testID\n}) => {\n  const { onChange, val } = useValueSelector({ handleOnChange, listsAsArrays, multiple, value });\n  const selectElementChangeHandler = useSelectElementChangeHandler({ multiple, onChange });\n  return /* @__PURE__ */ React13.createElement(\n    \"select\",\n    {\n      \"data-testid\": testID,\n      className,\n      value: val,\n      title,\n      disabled,\n      multiple: !!multiple,\n      onChange: selectElementChangeHandler\n    },\n    toOptions(options)\n  );\n};\nValueSelector.displayName = \"ValueSelector\";\n\n// src/components/defaults.ts\nvar defaultControlElements = {\n  actionElement: ActionElement,\n  addGroupAction: ActionElement,\n  addRuleAction: ActionElement,\n  cloneGroupAction: ActionElement,\n  cloneRuleAction: ActionElement,\n  combinatorSelector: ValueSelector,\n  dragHandle: DragHandle,\n  fieldSelector: ValueSelector,\n  inlineCombinator: InlineCombinator,\n  lockGroupAction: ActionElement,\n  lockRuleAction: ActionElement,\n  notToggle: NotToggle,\n  operatorSelector: ValueSelector,\n  removeGroupAction: ActionElement,\n  removeRuleAction: ActionElement,\n  rule: Rule,\n  ruleGroup: RuleGroup,\n  shiftActions: ShiftActions,\n  valueEditor: ValueEditor,\n  valueSelector: ValueSelector,\n  valueSourceSelector: ValueSelector\n};\nexport {\n  ActionElement,\n  DragHandle,\n  InlineCombinator,\n  LogType,\n  NotToggle,\n  QueryBuilder,\n  QueryBuilderContext,\n  QueryBuilderStateContext,\n  QueryBuilderStateProvider,\n  Rule,\n  RuleComponents,\n  RuleGroup,\n  RuleGroupBodyComponents,\n  RuleGroupHeaderComponents,\n  ShiftActions,\n  TestID,\n  ValueEditor,\n  ValueSelector,\n  add,\n  convertFromIC,\n  convertQuery,\n  convertToIC,\n  QueryBuilder as default,\n  defaultCELValueProcessor,\n  defaultCombinators,\n  defaultCombinatorsExtended,\n  defaultControlClassnames,\n  defaultControlElements,\n  defaultJoinChar,\n  defaultMongoDBValueProcessor,\n  defaultOperatorNegationMap,\n  defaultOperators,\n  defaultPlaceholderFieldGroupLabel,\n  defaultPlaceholderFieldLabel,\n  defaultPlaceholderFieldName,\n  defaultPlaceholderOperatorGroupLabel,\n  defaultPlaceholderOperatorLabel,\n  defaultPlaceholderOperatorName,\n  defaultRuleProcessorCEL,\n  defaultRuleProcessorElasticSearch,\n  defaultRuleProcessorJsonLogic,\n  defaultRuleProcessorMongoDB,\n  defaultRuleProcessorParameterized,\n  defaultRuleProcessorSQL,\n  defaultRuleProcessorSpEL,\n  defaultSpELValueProcessor,\n  defaultTranslations,\n  defaultValidator,\n  defaultValueProcessor,\n  defaultValueProcessorByRule,\n  defaultValueProcessorCELByRule,\n  defaultValueProcessorMongoDBByRule,\n  defaultValueProcessorSpELByRule,\n  filterFieldsByComparator,\n  findPath,\n  formatQuery,\n  generateAccessibleDescription,\n  generateID,\n  getCommonAncestorPath,\n  getCompatContextProvider,\n  getFirstOption,\n  getOption,\n  getParentPath,\n  getQuerySelectorById,\n  getValidationClassNames,\n  getValueSourcesUtil,\n  groupInvalidReasons,\n  isAncestor,\n  isFlexibleOptionGroupArray,\n  isFullOptionGroupArray,\n  isOptionGroupArray,\n  isPojo,\n  isRuleGroup,\n  isRuleGroupType,\n  isRuleGroupTypeIC,\n  isRuleOrGroupValid,\n  isValidationResult,\n  joinWith,\n  jsonLogicAdditionalOperators,\n  mergeClassnames,\n  mergeTranslations,\n  messages_exports as messages,\n  move,\n  nullFreeArray,\n  numericRegex,\n  objectEntries,\n  objectKeys,\n  parseNumber,\n  pathIsDisabled,\n  pathsAreEqual,\n  prepareRule,\n  prepareRuleGroup,\n  prepareRuleOrGroup,\n  queryBuilderStore,\n  regenerateID,\n  regenerateIDs,\n  remove,\n  rootPath,\n  splitBy,\n  standardClassnames,\n  toArray,\n  toFlatOptionArray,\n  toFullOption,\n  toFullOptionList,\n  toFullOptionMap,\n  toOptions,\n  transformQuery,\n  trimIfString,\n  uniqByIdentifier,\n  uniqByName,\n  uniqOptGroups,\n  uniqOptList,\n  update,\n  useControlledOrUncontrolled,\n  useDeprecatedProps,\n  useMergedContext,\n  usePreferAnyProp,\n  usePreferProp,\n  usePrevious,\n  useQueryBuilderSchema,\n  useQueryBuilderSelector,\n  useQueryBuilderSetup,\n  useReactDndWarning,\n  useRule,\n  useRuleGroup,\n  useSelectElementChangeHandler,\n  useStopEventPropagation,\n  useValueEditor,\n  useValueSelector\n};\n//# sourceMappingURL=react-querybuilder.mjs.map"],"names":["__defProp","Object","defineProperty","__export","target","all","name","get","enumerable","errorBothQueryDefaultQuery","errorControlledToUncontrolled","errorDeprecatedRuleGroupProps","errorDeprecatedRuleProps","errorEnabledDndWithoutReactDnD","errorInvalidIndependentCombinatorsProp","errorUncontrolledToControlled","errorUnnecessaryIndependentCombinatorsProp","ActionElement","className","handleOnClick","label","title","disabled","disabledTranslation","testID","react__WEBPACK_IMPORTED_MODULE_0__","createElement","type","onClick","e","displayName","DragHandle","forwardRef","dragRef","ref","placeholderLabel","defaultJoinChar","defaultTranslations","fields","placeholderName","placeholderGroupLabel","operators","value","removeRule","removeGroup","addRule","addGroup","combinators","notToggle","cloneRule","cloneRuleGroup","shiftActionUp","shiftActionDown","dragHandle","lockRule","lockGroup","lockRuleDisabled","lockGroupDisabled","valueSourceSelector","defaultOperators","defaultCombinators","standardClassnames","queryBuilder","ruleGroup","header","body","cloneGroup","rule","betweenRules","valid","invalid","shiftActions","dndDragging","dndOver","valueSource","valueListItem","defaultControlClassnames","actionElement","valueSelector","TestID","inlineCombinator","valueEditor","LogType","parentPathDisabled","pathDisabled","onAddRuleFalse","onAddGroupFalse","onRemoveFalse","add","remove","update","move","InlineCombinator","component","CombinatorSelectorComponent","independentCombinators","_independentCombinators","props","NotToggle","handleOnChange","checked","onChange","usePrevious","useRef","prev","current","useControlledOrUncontrolled","defaultQuery","queryProp","splitBy","str","splitChar","split","map","c","reduce","curr","idx","slice","length","joinWith","strArr","joinChar","replaceAll","join","trimIfString","val","trim","toArray","Array","isArray","v","filter","test","s","numericRegex","RegExp","numeric_quantity__WEBPACK_IMPORTED_MODULE_1__","dF","source","replace","isPojo","obj","getPrototypeOf","prototype","isRuleGroup","rg","rules","isRuleGroupType","combinator","isRuleGroupTypeIC","processRuleOrStringOrRuleGroupIC","r","generateRuleGroupICWithConsistentCombinators","returnArray","push","startIndex","i","j","convertFromIC","processedRG","rulesAsMixedList","isOptionWithName","opt","isOptionWithValue","toFullOption","recipe","immer__WEBPACK_IMPORTED_MODULE_2__","Uy","draft","toFullOptionList","optList","isFlexibleOptionGroupArray","optGroup","options","forEach","toFullOptionMap","optMap","fromEntries","entries","k","uniqByIdentifier","names","Set","newArray","originalArray","has","el","uniqOptGroups","labels","optionsForThisGroup","uniqOptList","isOptionGroupArray","arr","getOption","flatMap","og","find","op","getFirstOption","toFlatOptionArray","filterByComparator","field","operator","fieldToCompare","fullField","fullFieldToCompare","comparator","filterFieldsByComparator","filterOutSameField","f","parseNumber","parseNumbers","parseFloat","n","Xl","allowTrailingInvalid","romanNumerals","round","isNaN","mapSQLOperator","toLowerCase","mongoOperators","in","notIn","celCombinatorMap","and","or","numerifyValues","isValidValue","shouldRenderAsNumber","isValueProcessorLegacy","vp","quoteFieldNamesWithArray","quoteFieldNamesWith","shouldNegate","escapeDoubleQuotes","escapeQuotes","defaultRuleProcessorCEL","valueIsField","operatorTL","useBareValue","negate","valueAsArray","first","second","firstNum","NaN","secondNum","firstValue","secondValue","escapeDoubleQuotes2","defaultRuleProcessorMongoDB","mongoOperator","shouldNegate2","wrapInNegation","clause","escapeSingleQuotes","defaultRuleProcessorSpEL","valueTL","startsWith","endsWith","escapeSingleQuotes2","defaultValueProcessorByRule","qfnwPre","qfnwPost","operatorLowerCase","wrapFieldName","rangeOperatorMap","negateIfNotOp","elasticSearchRule","bool","must_not","escapeSQ","textFunctionMap","beginsWith","doesNotContain","doesNotBeginWith","doesNotEndWith","getTextScript","o","script","valueRenderer","defaultRuleProcessorElasticSearch","some","fieldForScript","operatorForScript","valueForScript","should","range","term","exists","gte","lte","regexp","convertOperator","negateIfNotOp2","jsonRule","defaultRuleProcessorJsonLogic","fieldObject","var","fieldOrNumberRenderer","defaultRuleProcessorParameterized","opts","meta","fieldData","format","getNextNamedParam","paramPrefix","paramsKeepPrefix","numberedParams","valueProcessor","processedParams","parameterized","params","paramsNamed","finalize","sql","sqlOperator","sqlOperatorLowerCase","splitValue","_v","inParams","thisParamName","firstParamName","secondParamName","paramValue","paramName","defaultRuleProcessorSQL","qPre","qPost","isValidationResult","vr","isRuleOrGroupValid","validationResult","validator","formatQuery","valueProcessorInternal","ruleProcessorInternal","validationMap","fallbackExpression","placeholderFieldName","placeholderOperatorName","ruleProcessor","JSON","stringify","key","validatorMap","uniqueFields","validateRule","fieldValidator","id","fieldArr","processRuleGroup","outermostOrLonelyInGroup","processedRules","not","Boolean","fieldParams","Map","set","nextNamedParam","size","processRule","fieldParamNames","from","processedRule","customParams","assign","keys","p","outermost","hasChildRules","expressions","processedRuleGroup","processedQuery","expression","prefix","suffix","query","jsonRuleGroup","internalValueProcessors","default","mongodb","cel","spel","generateValueProcessor","findPath","path","level","t","getParentPath","pathsAreEqual","path1","path2","every","getCommonAncestorPath","commonAncestorPath","parentPath1","parentPath2","pathIsDisabled","generateAccessibleDescription","qbId","_qbID","cryptoModule","globalThis","crypto","generateID","Math","random","parseInt","toString","padStart","randomUUID","getRandomValues","container","Uint32Array","position19vals","mergeClassnames","args","joinClassnamesByName","clsx__WEBPACK_IMPORTED_MODULE_3__","Z","objectKeys","defaultTranslationsBase","mergeTranslations","base","otherTranslations","translations","getValidationClassNames","defaultValueSourcesArray","dummyFD","valueSources","getValueSourcesUtil","getValueSources","fd","vals","prepareRule","idGenerator","prepareRuleGroup","queryObject","prepareRuleOrGroup","regenerateID","parse","regenerateIDs","ruleOrGroup","rules2","parentPath","combinatorPreceding","parent","prevCombinator","prop","resetOnFieldChange","resetOnOperatorChange","getRuleDefaultOperator","getRuleDefaultValue","parentRules","isGroup","resetValueSource","resetValue","defaultValueSource","index","splice","getNextPath","currentPath","newPathOrShiftDirection","ic","at","max","evaluationPath","entityAtTarget","oldPath","newPath","clone","nextPath","ruleOrGroupOriginal","parentOfRuleToRemove","ruleToRemoveIndex","oldPrevCombinator","oldNextCombinator","newNewPath","parentToInsertInto","newIndex","insertRuleOrGroup","toOptions","preferPropDefaultTrue","context","preferPropDefaultFalse","preferProp","def","usePreferProp","useMemo","useMergedContext","rqbContext","useContext","QueryBuilderContext","enableMountQueryChange","enableDragAndDrop","debugMode","controlClassnames","controlElements","contextControlElements","addGroupAction","addRuleAction","cloneGroupAction","cloneRuleAction","lockGroupAction","lockRuleAction","removeGroupAction","removeRuleAction","combinatorSelector","fieldSelector","operatorSelector","propsControlElements","defaultControlElements","_controlClassnames","_controlElements","_debugMode","_enableDragAndDrop","_enableMountQueryChange","_translations","otherContext","queriesSlice","_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__","oM","initialState","reducers","setQueryState","state","payload","selectors","getQuerySelectorById","preloadedState","queries","getInitialState","queryBuilderStore","xC","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredPaths","QueryBuilderStateContext","createContext","useQueryBuilderSelector","react_redux__WEBPACK_IMPORTED_MODULE_5__","gR","_RQB_INTERNAL_dispatchThunk","onQueryChange","dispatch","actions","useRQB_INTERNAL_QueryBuilderDispatch","AS","useRQB_INTERNAL_QueryBuilderStore","fw","defaultValidationResult","defaultValidationMap","defaultGetValueEditorSeparator","defaultGetRuleClassname","defaultGetRuleGroupClassname","defaultOnAddRule","defaultOnAddGroup","defaultOnRemove","defaultOnLog","console","log","getFirstOptionsFrom","listsAsArrays","firstOption","useQueryBuilderSetup","fieldsPropOriginal","operatorsProp","combinatorsProp","translationsProp","enableMountQueryChangeProp","controlClassnamesProp","controlElementsProp","getDefaultField","getDefaultOperator","getDefaultValue","getOperators","getValueEditorType","getInputType","getValues","autoSelectField","autoSelectOperator","addRuleToNewGroups","enableDragAndDropProp","debugModeProp","defaultField","fieldsProp","flds","fld","sort","a","b","localeCompare","fieldMap","fp","fm","defaultOperator","getOperatorsMain","useCallback","opsFinal","ops","getValueEditorTypeMain","valueEditorType","getValueSourcesMain","getValuesMain","values","defaultValue","filteredFields","editorType","getInputTypeMain","inputType","createRule","fo","df","newRule","createRuleGroup","useReactDndWarning","dndRefs","useRule","ruleProp","schema","moveRule","onPropChange","onRuleRemove","disabledProp","parentDisabled","shiftUpDisabled","shiftDownDisabled","fieldProp","operatorProp","valueProp","valueSourceProp","dragMonitorId","dropMonitorId","dndRef","isDragging","isOver","classNames","classNamesProp","getValueEditorSeparator","getRuleClassname","W","generateOnChangeHandler","_context","_event","toggleLockRule","shiftRuleUp","event","altKey","shiftRuleDown","operatorObject","arity","valueEditorSeparator","valueSourceOptions","vs","validationClassName","fieldBasedClassName","operatorBasedClassName","outerClassName","hideValueControls","useRuleGroup","ruleGroupProp","accessibleDescriptionGenerator","disabledPaths","getRuleGroupClassname","onGroupAdd","onGroupRemove","onRuleAdd","combinatorProp","rulesProp","notProp","previewRef","dropRef","onCombinatorChange","onIndependentCombinatorChange","concat","onNotToggleChange","shiftGroupUp","shiftGroupDown","toggleLockGroup","combinatorBasedClassName","ruleGroupClassname","pathsMemo","paths","thisPath","accessibleDescription","useSelectElementChangeHandler","multiple","selectedOptions","useStopEventPropagation","preventDefault","stopPropagation","method","useValueEditor","skipHook","useEffect","includes","multiValueHandler","va","useValueSelector","rootPath","QueryBuilderStateProvider","children","zt","store","QueryBuilderInternal","setup","qb","useQueryBuilderSchema","defaultQueryProp","onAddRule","onAddGroup","onRemove","showCombinatorsBetweenRules","showCombinatorsBetweenRulesProp","showNotToggle","showNotToggleProp","showShiftActions","showShiftActionsProp","showCloneButtons","showCloneButtonsProp","showLockButtons","showLockButtonsProp","resetOnFieldChangeProp","resetOnOperatorChangeProp","autoSelectFieldProp","autoSelectOperatorProp","addRuleToNewGroupsProp","listsAsArraysProp","onLog","controls","queryBuilderStore2","queryBuilderDispatch","querySelector","storeQuery","getQuery","getState","fallbackQuery","candidateQuery","rootGroup","invalidIC","dispatchQuery","newQuery","queryDisabled","rootGroupDisabled","queryLocal","newGroup","onRuleOrGroupRemove","dndEnabledAttr","inlineCombinatorsAttr","combinatorPropObject","validationResult2","wrapperClassName","RuleGroupControlElement","QueryBuilderContext2","Provider","role","QueryBuilder","Rule","memo","RuleComponents","ShiftActionsControlElement","DragHandleControlElement","FieldSelectorControlElement","OperatorSelectorControlElement","ValueSourceSelectorControlElement","ValueEditorControlElement","CloneRuleActionControlElement","LockRuleActionControlElement","RemoveRuleActionControlElement","Fragment","titles","shiftUp","shiftDown","validation","separator","RuleGroup","RuleGroupHeaderComponents","RuleGroupBodyComponents","CombinatorSelectorControlElement","NotToggleControlElement","AddRuleActionControlElement","AddGroupActionControlElement","CloneGroupActionControlElement","LockGroupActionControlElement","RemoveGroupActionControlElement","InlineCombinatorControlElement","RuleControlElement","ruleArrayLength","thisPathMemo","thisPathDisabled","ShiftActions","ValueEditor","selectorComponent","SelectorComponent","allProps","placeHolderText","placeholder","inputTypeCoerced","editors","ValueSelector","selectElementChangeHandler"],"sourceRoot":""}