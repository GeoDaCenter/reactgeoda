{"version":3,"file":"static/chunks/693.edcd5c605fc452de.js","mappings":"8kBAcAA,WAAW,UACT,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,GACR,EAAG,+BCIH,SAASC,EAAaC,CAAqD,EACzE,MACE,GAAAC,EAAAC,GAAA,EAACC,MAAAA,CAAIC,UAAU,yCACb,GAAAH,EAAAC,GAAA,EAACG,EAAAA,GAAgBA,CAAAA,CACfD,UAAU,gCACVE,QAASC,IACPA,EAAEC,cAAc,GAChBR,EAAMS,mBAAmB,CAAC,GAC5B,WAEA,GAAAR,EAAAC,GAAA,EAACQ,EAAAA,GAAAA,CAAAA,EAAe,EAACC,OAAO,YAIhC,CAQA,SAASC,IAAwB,QAAAC,EAAAC,UAAAC,MAAA,CAAAC,EAAA,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAGD,CAAAA,CAAHC,EAAA,CAAAH,SAAA,CAAAG,EAAc,CAE7C,IAAMC,EAAaC,CAAAA,EAAAA,EAAAA,GAAAA,KAAqBH,GASxC,MAAOI,CAAAA,EAAAA,EAAAA,GAAAA,EAAU,EAAE,CAAEC,GAAU,EAAC,GAAGA,EAAMC,QAAQ,GAAI,CAACb,oBAAmBA,EAAAA,EAAAA,GAPhD,GACvB,GAAAR,EAAAsB,IAAA,EAACpB,MAAAA,CAAIC,UAAU,yCACb,GAAAH,EAAAC,GAAA,EAACH,EAAAA,CAAc,GAAGC,CAAK,GACvB,GAAAC,EAAAC,GAAA,EAACgB,EAAAA,CAAY,GAAGlB,CAAK,CAAEwB,IAAK,OAKlC,CAlBAZ,EAAwBI,IAAI,CAAGG,EAAAA,GAAiBA,CAACH,IAAI,CAoBrD,IAAMS,EAAWC,CAAAA,EAAAA,EAAAA,GAAAA,EAAiB,CAAC,CAACP,EAAAA,GAAiBA,CAAEP,EAAwB,CAAU,EAsCzF,IAAAe,EApCkB,KAChB,GAAM,CAACC,MAAAA,CAAK,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAKhB,MD7CsBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,SAKjB,MAAMC,CAAAA,EAAAA,EAAAA,CAAAA,EAAW,CAACC,KAJpB,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,IAAI,CAIJC,UAHrB,CAAC,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,EAAG,EAAE,CAAE,CAAC,EAAG,EAAE,CAAE,CAAC,EAAG,EAAE,CAAC,CAGNC,YAFrC,EAEsD,GAGlE,EAAE,EAEqBJ,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAOK,EAAWH,IACvC,MAAMI,CAAAA,EAAAA,EAAAA,CAAAA,EAAeD,EAAGH,GAGtC,EAAE,EAEoBF,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,MAAOK,EAAWH,IACtC,MAAMK,CAAAA,EAAAA,EAAAA,CAAAA,EAAcF,EAAGH,GAGrC,EAAE,EC0BH,GAAA/B,EAAAC,GAAA,EAACC,MAAAA,CAAImC,MAAO,CAAC3B,OAAQ,OAAQ4B,QAAS,KAAK,EAAGnC,UAAW,4BACvD,GAAAH,EAAAC,GAAA,EAACsC,EAAAA,EAASA,CAAAA,CAACC,cAAe,IAAKC,aAAc,aAC1C,OAAC,CAAC/B,OAAAA,CAAM,CAAEgC,MAAAA,CAAK,CAAC,CAAAC,EACf,MACE,GAAA3C,EAAAC,GAAA,EAACuB,EAAAA,CACCoB,GAAIC,EAAAA,EAAMA,CACVC,qBAAsBC,EAAAA,EAAYA,CAClCrC,OAAQA,EACRgC,MAAOA,EACPf,MAAOA,UAAAA,EAAoBqB,EAAAA,OAAOA,CAAGC,EAAAA,KAAOA,CAE5CC,KAAM,IAGZ,KAIR","sources":["webpack://_N_E/./src/hooks/use-geoda.ts","webpack://_N_E/./src/components/kepler-map.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {\n  initGeoDa,\n  localMoran,\n  LocalMoranResultType,\n  quantileBreaks,\n  naturalBreaks\n} from 'geoda-wasm';\n\n// @ts-ignore we import geoda.wasm explicitly so it can be bundled by webpack\nimport geodawasm from 'geoda-wasm/dist/geoda.wasm';\n\nimport {useCallback} from 'react';\n\n// initial the global geoda instance, delay 1000ms to avoid blocking loading default page\nsetTimeout(async () => {\n  await initGeoDa();\n}, 1000);\n\nexport function useGeoDa() {\n  const runLocalMoran = useCallback(async (): Promise<LocalMoranResultType> => {\n    const data = [3.0, 3.0, 0.0, 9.0, 8.0, 8.5];\n    const neighbors = [[1], [0], [], [4, 5], [3, 5], [3, 4]];\n    const perm = 99;\n\n    const result = await localMoran({data, neighbors, permutation: perm});\n    console.log('local moran result:', result, geodawasm);\n    return result;\n  }, []);\n\n  const runQuantileBreaks = useCallback(async (k: number, data: number[]) => {\n    const result = await quantileBreaks(k, data);\n    console.log('quantile breaks:', result);\n    return result;\n  }, []);\n\n  const runNaturalBreaks = useCallback(async (k: number, data: number[]) => {\n    const result = await naturalBreaks(k, data);\n    console.log('natural breaks:', result);\n    return result;\n  }, []);\n\n  return {runLocalMoran, runQuantileBreaks, runNaturalBreaks};\n}\n","import AutoSizer from 'react-virtualized-auto-sizer';\nimport {\n  Icons,\n  MapControlFactory,\n  withState,\n  MapControlButton,\n  injectComponents\n} from '@kepler.gl/components';\nimport {themeLT, theme as themeDK} from '@kepler.gl/styles';\nimport {useTheme as useNextTheme} from 'next-themes';\n\nimport {useGeoDa} from '@/hooks/use-geoda';\nimport {MAPBOX_TOKEN, MAP_ID} from '../constants';\nimport {setKeplerTableModal} from '@/actions';\n\n/**\n * The table control button for the top right corner of the kepler.gl map\n * @param props Function to set the kepler table modal\n * @returns The table control button\n */\nfunction TableControl(props: {setKeplerTableModal: (flag: boolean) => void}) {\n  return (\n    <div className=\"ml-[10px] mr-[12px] mt-[20px]\">\n      <MapControlButton\n        className=\"map-control-button info-panel\"\n        onClick={e => {\n          e.preventDefault();\n          props.setKeplerTableModal(true);\n        }}\n      >\n        <Icons.DataTable height=\"18px\" />\n      </MapControlButton>\n    </div>\n  );\n}\n\nCustomMapControlFactory.deps = MapControlFactory.deps;\n/**\n * The custom map control factory that is used to replace the default map control MapControlFactory\n * @param deps The dependencies for the custom map control factory\n * @returns The custom map control\n */\nfunction CustomMapControlFactory(...deps: any[]) {\n  // @ts-ignore FIX type\n  const MapControl = MapControlFactory(...deps);\n\n  const CustomMapControl = (props: any) => (\n    <div className=\"absolute right-0 top-0 z-[1]\">\n      <TableControl {...props} />\n      <MapControl {...props} top={0} />\n    </div>\n  );\n\n  return withState([], state => ({...state.keplerGl}), {setKeplerTableModal})(CustomMapControl);\n}\n\nconst KeplerGl = injectComponents([[MapControlFactory, CustomMapControlFactory] as never]);\n\nconst KeplerMap = () => {\n  const {theme} = useNextTheme();\n\n  // trigger use hooks to load wasm files\n  useGeoDa();\n\n  return (\n    <div style={{height: '100%', padding: '0px'}} className={'geoda-kepler-map'}>\n      <AutoSizer defaultHeight={400} defaultWidth={500}>\n        {({height, width}) => {\n          return (\n            <KeplerGl\n              id={MAP_ID}\n              mapboxApiAccessToken={MAPBOX_TOKEN}\n              height={height}\n              width={width}\n              theme={theme === 'light' ? themeLT : themeDK}\n              // when a `KeplerGl` component is unmounted, don't remove the map from the DOM\n              mint={false}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\n// const mapStateToProps = (state: GeoDaState) => state;\n\n// const dispatchToProps = (dispatch: any) => ({dispatch});\n\n// connect a React component to Redux store\n// data it needs from the store\n// function it can use to dispatch actions to the store\n// export default connect(mapStateToProps, dispatchToProps)(KeplerMap);\n\nexport default KeplerMap;\n"],"names":["setTimeout","initGeoDa","TableControl","props","jsx_runtime","jsx","div","className","MapControlButton","onClick","e","preventDefault","setKeplerTableModal","Icons","height","CustomMapControlFactory","_len","arguments","length","deps","_key","MapControl","MapControlFactory","withState","state","keplerGl","jsxs","top","KeplerGl","injectComponents","kepler_map","theme","useNextTheme","useCallback","localMoran","data","neighbors","permutation","k","quantileBreaks","naturalBreaks","style","padding","AutoSizer","defaultHeight","defaultWidth","width","param","id","MAP_ID","mapboxApiAccessToken","MAPBOX_TOKEN","themeLT","themeDK","mint"],"sourceRoot":""}