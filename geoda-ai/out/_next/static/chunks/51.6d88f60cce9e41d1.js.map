{"version":3,"file":"static/chunks/51.6d88f60cce9e41d1.js","mappings":"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","sources":["webpack://_N_E/./src/components/table/table-query-component.tsx","webpack://_N_E/./src/components/table/column-default-component.tsx","webpack://_N_E/./src/components/table/sql-editor.tsx","webpack://_N_E/./src/components/icons/search.tsx","webpack://_N_E/./src/components/table/column-variable-component.tsx","webpack://_N_E/../../geoda-lib/src/js/src/sa/spatial-lag.ts","webpack://_N_E/./src/components/table/column-spatial-lag-component.tsx","webpack://_N_E/./src/components/common/rate-value-component.tsx","webpack://_N_E/./src/components/table/column-add-component.tsx","webpack://_N_E/./src/components/table/table-panel.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useDuckDB} from '@/hooks/use-duckdb';\nimport {GeoDaState} from '@/store';\nimport {getQueryBuilderFields} from '@/utils/table-utils';\nimport {Button, Card, CardBody, CardHeader, Checkbox} from '@nextui-org/react';\nimport {useMemo, useState} from 'react';\nimport QueryBuilder, {formatQuery, RuleGroupType} from 'react-querybuilder';\nimport {parseSQL} from 'react-querybuilder/parseSQL';\nimport {useDispatch, useSelector} from 'react-redux';\nimport MonacoEditor from '@monaco-editor/react';\n\nimport 'react-querybuilder/dist/query-builder.css';\nimport {geodaBrushLink, setQueryCode} from '@/actions';\nimport {DatasetSelector} from '../common/dataset-selector';\nimport KeplerTable from '@kepler.gl/table';\n\n// const initialQuery: RuleGroupType = {combinator: 'and', rules: []};\n\nfunction getQueryBuilder(sql: string) {\n  try {\n    return parseSQL(sql);\n  } catch (e) {\n    return {combinator: 'and', rules: []};\n  }\n}\n\nexport function TableQueryComponent({\n  datasetId,\n  setDatasetId,\n  keplerDataset,\n  tableName\n}: {\n  datasetId: string;\n  setDatasetId: (datasetId: string) => void;\n  keplerDataset: KeplerTable;\n  tableName: string;\n}) {\n  const id = 'table-query';\n\n  const dispatch = useDispatch();\n  // get duckdb hook\n  const {query} = useDuckDB();\n\n  const theme = useSelector((state: GeoDaState) => state.root.uiState.theme);\n  const queryCode = useSelector((state: GeoDaState) => state.root.uiState.table.queryCode);\n\n  // parse the query code, if runtime error occurs, use default initialQuery\n  const queryBuilder = getQueryBuilder(queryCode || `select * from ${tableName}`);\n\n  // get fields for query builder\n  const fields = useMemo(() => getQueryBuilderFields(keplerDataset), [keplerDataset]);\n\n  const [code, setCode] = useState(queryCode || '');\n  const [sqlQuery, setSqlQuery] = useState<RuleGroupType>(queryBuilder);\n  const [useQueryBuilder, setUseQueryBuilder] = useState(true);\n\n  const onMonacoEditorChange = (value: string | undefined) => {\n    if (value) {\n      setCode(value);\n      dispatch(setQueryCode(value));\n    }\n  };\n\n  const onResetClick = async () => {\n    setCode('');\n    setSqlQuery({combinator: 'and', rules: []});\n    dispatch(setQueryCode(''));\n    await onQueryClick();\n  };\n\n  const onQueryBuilderClick = (value: boolean) => {\n    setUseQueryBuilder(value);\n  };\n\n  const onQueryChange = (queryString: RuleGroupType) => {\n    setSqlQuery(queryString);\n    const updatedCode = formatQuery(queryString, {format: 'sql', fallbackExpression: '()'});\n    setCode(updatedCode);\n  };\n\n  // write callback function onQueryClick\n  const onQueryClick = async () => {\n    const selectedIndexes = await query(tableName, code);\n\n    if (selectedIndexes) {\n      dispatch(geodaBrushLink({sourceId: id, dataId: datasetId, filteredIndex: selectedIndexes}));\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <DatasetSelector datasetId={datasetId} setDatasetId={setDatasetId} />\n      <div className=\"m-2 flex flex-col gap-4 text-xs\">\n        <Checkbox\n          defaultSelected\n          size=\"sm\"\n          checked={useQueryBuilder}\n          onValueChange={onQueryBuilderClick}\n        >\n          Use Query Builder\n        </Checkbox>\n        {useQueryBuilder && (\n          <QueryBuilder\n            query={sqlQuery}\n            onQueryChange={onQueryChange}\n            fields={fields}\n            controlClassnames={{queryBuilder: 'queryBuilder-branches'}}\n          />\n        )}\n      </div>\n      <Card>\n        <CardHeader>\n          <p className=\"ml-2 text-xs text-blue-700 drop-shadow-sm\">\n            SELECT * FROM {tableName} WHERE\n          </p>\n        </CardHeader>\n        <CardBody>\n          <div className=\"h-40 w-full\">\n            <MonacoEditor\n              language=\"sql\"\n              value={code}\n              onChange={onMonacoEditorChange}\n              options={{\n                minimap: {enabled: false}\n              }}\n              theme={theme === 'dark' ? 'vs-dark' : 'vs-light'}\n            />\n          </div>\n        </CardBody>\n      </Card>\n      <div className=\"m-2 flex w-full flex-row items-start space-x-4\">\n        <Button onClick={onQueryClick} size=\"sm\" color=\"danger\" className=\"bg-rose-900\">\n          Query\n        </Button>\n        <Button onClick={onResetClick} size=\"sm\" color=\"default\">\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import {Input, Autocomplete, AutocompleteItem} from '@nextui-org/react';\nimport {Key, useMemo, useState} from 'react';\nimport {generateNormalDistributionData, generateUniformRandomData} from '@/utils/table-utils';\n\nconst DEFAULT_VALUE_OPTIONS = [\n  {\n    label: 'Uniform Random',\n    value: 'uniform_random',\n    description: 'Random uniform dist on unit interval'\n  },\n  {\n    label: 'Normal Random',\n    value: 'normal_random',\n    description: 'Random Gaussian dist with mean and standard deviation'\n  },\n  {label: 'Enumerate', value: 'enumerate', description: 'enumerate as 1, 2, 3, ...'}\n];\n\n// Add default value component to get default value/values for the new column\nexport function DefaultValueComponent({\n  numberOfRows,\n  columnType,\n  setValues\n}: {\n  numberOfRows: number;\n  columnType: string;\n  setValues: (values: unknown | unknown[]) => void;\n}) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [defaultValue, setDefaultValue] = useState('');\n  const [defaultValueOption, setDefaultValueOption] = useState('');\n  const [meanValue, setMeanValue] = useState(0);\n  const [stdValue, setStdValue] = useState(1);\n\n  const selectedDefaultValueOptions = useMemo(() => {\n    if (columnType === 'real') {\n      return DEFAULT_VALUE_OPTIONS.slice(0, 2);\n    } else if (columnType === 'integer') {\n      return [DEFAULT_VALUE_OPTIONS[2]];\n    }\n    return [];\n  }, [columnType]);\n\n  // when user types default value\n  const onDefaultValueChange = (value: string) => {\n    // use continuePropagation()\n    setDefaultValue(value);\n    if (columnType === 'integer') {\n      setValues(parseInt(value));\n    } else if (columnType === 'real') {\n      setValues(parseFloat(value));\n    } else {\n      setValues(value);\n    }\n  };\n\n  // when default value selection changes\n  const onDefaultValueSelectionChange = (value: Key) => {\n    const defaultOption = value as string;\n    setDefaultValueOption(defaultOption);\n    if (defaultOption === 'uniform_random') {\n      // generate random values between 0 and 1 using a uniform distribution and seed\n      const values = generateUniformRandomData(numberOfRows);\n      setValues(values);\n    } else if (defaultOption === 'normal_random') {\n      // generate random values using random gaussian distribution with mean and sd\n      const values = generateNormalDistributionData(numberOfRows, meanValue, stdValue);\n      setValues(values);\n    }\n  };\n\n  // when mean value changes\n  const onMeanValueChange = (value: string) => {\n    let val = 0;\n    try {\n      val = parseFloat(value);\n    } catch (e) {\n      val = 0;\n    }\n    setMeanValue(val);\n    // compute values based on mean and std deviation\n    const values = generateNormalDistributionData(numberOfRows, val, stdValue);\n    setValues(values);\n  };\n\n  // when std value changes\n  const onStdValueChange = (value: string) => {\n    let val = 0;\n    try {\n      val = parseFloat(value);\n    } catch (e) {\n      val = 0;\n    }\n    setStdValue(val);\n    // compute values based on mean and std deviation\n    const values = generateNormalDistributionData(numberOfRows, val, stdValue);\n    setValues(values);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <Autocomplete\n        allowsCustomValue\n        label=\"\"\n        placeholder=\"Enter default value\"\n        defaultItems={DEFAULT_VALUE_OPTIONS}\n        onValueChange={onDefaultValueChange}\n        onSelectionChange={onDefaultValueSelectionChange}\n        aria-label=\"Default Value\"\n      >\n        {selectedDefaultValueOptions.map(item => (\n          <AutocompleteItem key={item.value} value={item.value} textValue={item.label}>\n            <div className=\"flex flex-col\">\n              <span className=\"text-small\">{item.label}</span>\n              <span className=\"text-tiny text-default-400\">{item.description}</span>\n            </div>\n          </AutocompleteItem>\n        ))}\n      </Autocomplete>\n      {defaultValueOption === 'normal_random' && (\n        <>\n          <Input\n            type=\"text\"\n            label=\"Mean Value\"\n            placeholder=\"\"\n            onValueChange={onMeanValueChange}\n            size=\"sm\"\n            value={`${meanValue}`}\n          />\n          <Input\n            type=\"text\"\n            label=\"Standard Deviation\"\n            placeholder=\"\"\n            onValueChange={onStdValueChange}\n            size=\"sm\"\n            value={`${stdValue}`}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","import React, {forwardRef, useImperativeHandle, useRef, useState} from 'react';\nimport {editor} from 'monaco-editor';\nimport MonacoEditor, {Monaco, OnChange} from '@monaco-editor/react';\n\n/**\n * Create Monaco suggestions from table column names\n * ref: https://codesandbox.io/p/sandbox/monaco-sql-sfot6x\n */\nfunction createMonacoSuggestions(\n  columnNames: string[]\n): Array<{label: string; insertText: string}> {\n  return columnNames.map(columnName => {\n    return {\n      label: columnName,\n      insertText: columnName\n    };\n  });\n}\n\nexport type SQLEditorProps = {\n  suggestKeys: string[];\n  onChange: OnChange;\n  initContent?: string;\n  theme?: string;\n  language?: string;\n  height?: number;\n};\n\nexport type SQLEditorRefProps = {\n  insertText: (text: string) => void;\n};\n\nexport const SQLEditor = forwardRef<SQLEditorRefProps, SQLEditorProps>(\n  ({initContent, onChange, theme, suggestKeys, language, height}, ref) => {\n    const [content, setContent] = useState(initContent || '');\n\n    // update content when initContent changes\n    if (content !== initContent && initContent) {\n      // see https://stackoverflow.com/questions/58818727/react-usestate-not-setting-initial-value\n      setContent(initContent);\n    }\n\n    const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);\n\n    useImperativeHandle(ref, () => ({\n      insertText(text: string) {\n        editorRef.current?.trigger('keyboard', 'type', {text});\n      }\n    }));\n\n    const onMonacoEditorChange = (\n      value: string | undefined,\n      ev: editor.IModelContentChangedEvent\n    ) => {\n      if (value) {\n        setContent(value);\n      }\n      editorRef?.current?.getAction('editor.action.formatDocument')?.run();\n      // editorRef.current?.trigger('', 'editor.action.triggerSuggest', {});\n      onChange(value, ev);\n    };\n\n    // format the code in manaco editor after the component is mounted\n    const onEditorMount = (editor: editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editorRef.current = editor;\n      const customSuggestions = createMonacoSuggestions(suggestKeys);\n      // register custom language: geoda\n      monaco.languages.register({id: 'geoda'});\n      // define custom language\n      monaco.languages.setMonarchTokensProvider('geoda', {\n        keywords: suggestKeys,\n        tokenizer: {\n          root: [\n            // keywords\n            [/([a-zA-Z_$][\\w$]*)((\\s*))?/, {cases: {'$1@keywords': 'keyword'}}],\n            // operators\n            [/[-+*/]/, 'operator'],\n            // brackets\n            [/[()]/, 'delimiter']\n          ]\n        }\n      });\n      // define custom theme\n      monaco.editor.defineTheme('geoda-theme', {\n        base: 'vs',\n        inherit: true,\n        colors: {},\n        rules: [\n          {token: 'keyword', foreground: '#FF6600', fontStyle: 'bold'},\n          {token: 'operator', foreground: '#ff0000'},\n          {token: 'delimiter', foreground: '#009966'}\n        ]\n      });\n\n      // monaco.editor.onDidChangeMarkers(([uri]) => {\n      //   const markers = monaco.editor.getModelMarkers({resource: uri});\n      //   coderErrors = markers\n      //   const err = monaco.editor.getModelMarkers({ resource: editor.getModel()?.uri });\n      //   console.log(err);\n      //   let markers: editor.IMarkerData[] = [];\n      //   if (err) {\n      //     markers = [\n      //       {\n      //         startLineNumber: 1,\n      //         startColumn: 1,\n      //         endLineNumber: 2,\n      //         endColumn: 10,\n      //         message: 'error',\n      //         severity: monaco.MarkerSeverity.Error\n      //       }\n      //     ];\n      //   }\n      //   monaco.editor.setModelMarkers(editor.getModel(), 'owner', markers);\n      // });\n\n      // add custom suggestions to monaco editor\n      monaco.languages.registerCompletionItemProvider('*', {\n        provideCompletionItems: (model, position) => {\n          const word = model.getWordUntilPosition(position);\n          const range = {\n            startLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endLineNumber: position.lineNumber,\n            endColumn: position.column\n          };\n          const suggestions = customSuggestions.map(suggestion => {\n            return {\n              label: suggestion.label,\n              kind: monaco.languages.CompletionItemKind.Field,\n              insertText: suggestion.insertText,\n              range\n            };\n          });\n          return {\n            suggestions\n          };\n        }\n      });\n    };\n\n    return (\n      <MonacoEditor\n        defaultLanguage={language || 'sql'}\n        value={content}\n        onChange={onMonacoEditorChange}\n        onMount={onEditorMount}\n        options={{\n          minimap: {enabled: false},\n          fixedOverflowWidgets: true\n        }}\n        theme={theme === 'dark' ? 'vs-dark' : 'vs-light'}\n        height={height || 240}\n        width={'100%'}\n      />\n    );\n  }\n);\n\nSQLEditor.displayName = 'SQLEditor';\n","import React from 'react';\nexport const SearchIcon = props => (\n  <svg\n    aria-hidden=\"true\"\n    fill=\"none\"\n    focusable=\"false\"\n    height=\"1em\"\n    role=\"presentation\"\n    viewBox=\"0 0 24 24\"\n    width=\"1em\"\n    {...props}\n  >\n    <path\n      d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n    />\n    <path\n      d=\"M22 22L20 20\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n    />\n  </svg>\n);\n","import {\n  Card,\n  CardBody,\n  Input,\n  ScrollShadow,\n  Table,\n  TableBody,\n  TableCell,\n  TableColumn,\n  TableHeader,\n  TableRow\n} from '@nextui-org/react';\nimport fuzzy from 'fuzzy';\n\nimport {SQLEditor, SQLEditorRefProps} from './sql-editor';\nimport {useSelector} from 'react-redux';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {GeoDaState} from '@/store';\nimport {\n  DUCKDB_AGGREGATE_FUNCTIONS,\n  DUCKDB_DATE_FUNCTIONS,\n  DUCKDB_DATE_PART_FUNCTIONS,\n  DUCKDB_NUMERIC_FUNCTIONS,\n  DUCKDB_STATS_FUNCTIONS,\n  DuckDBFunctionProps\n} from './sql-constant';\nimport {SearchIcon} from '../icons/search';\nimport {useDuckDB} from '@/hooks/use-duckdb';\nimport KeplerTable from '@kepler.gl/table';\n\nconst AVAILABLE_FUNCTIONS = [\n  ...DUCKDB_NUMERIC_FUNCTIONS,\n  ...DUCKDB_AGGREGATE_FUNCTIONS,\n  ...DUCKDB_DATE_FUNCTIONS,\n  ...DUCKDB_DATE_PART_FUNCTIONS,\n  ...DUCKDB_STATS_FUNCTIONS\n];\n\nexport type TableVariableValueProps = {\n  tableName: string;\n  keplerDataset: KeplerTable;\n  setValues: (values: unknown | unknown[]) => void;\n};\n\nexport function TableVariableValueComponent({\n  tableName,\n  keplerDataset,\n  setValues\n}: TableVariableValueProps) {\n  const [code, setCode] = useState('');\n  const [filteredFunctions, setFilteredFunctions] =\n    useState<DuckDBFunctionProps[]>(AVAILABLE_FUNCTIONS);\n  const theme = useSelector((state: GeoDaState) => state.root.uiState.theme);\n\n  const {queryValues} = useDuckDB();\n\n  const editorRef = useRef<SQLEditorRefProps>(null);\n\n  const aggregateFuncNamesRegex = useMemo(() => {\n    const replace = [...DUCKDB_AGGREGATE_FUNCTIONS, ...DUCKDB_STATS_FUNCTIONS]\n      .map(func => func.name.replace(/\\(.*\\)/g, ''))\n      .join('|');\n    return new RegExp(`(${replace})\\\\(([^)]+)\\\\)`, 'g');\n  }, []);\n\n  // insert function name at the cursor in the code editor when user clicks on the function table\n  const onRowClick = (key: Key) => {\n    const filteredIndex = key as number;\n    const func = filteredFunctions[filteredIndex];\n    // insert func.name at the cursor in the code editor\n    if (editorRef && editorRef.current) {\n      editorRef.current.insertText(func.name);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // when code changes, update the values\n      // replace any aggregate function with select_agg function using regex\n      const updatedCode =\n        code.length === 0\n          ? '0'\n          : code.replace(aggregateFuncNamesRegex, `(select $1($2) from \"${tableName}\")`);\n      const sql = `SELECT ${updatedCode} FROM \"${tableName}\";`;\n      const result = await queryValues(sql);\n      setValues(Array.from(result));\n    })();\n  }, [aggregateFuncNamesRegex, code, queryValues, setValues, tableName]);\n\n  // get suggest keys from dataset fields\n  const suggestKeys = [\n    ...(keplerDataset?.fields.map(field => field.name) || []),\n    ...AVAILABLE_FUNCTIONS.map(func => func.name.replace(/\\(.*\\)/g, ''))\n  ];\n\n  const onSQLEditorChange = (value: string | undefined) => {\n    if (value) {\n      setCode(value);\n    }\n  };\n\n  const onSearchFunction = (value: string) => {\n    // filter available functions by doing fuzzy search on function name\n    const result = fuzzy\n      .filter(value, AVAILABLE_FUNCTIONS, {\n        extract: el => el.name\n      })\n      .map(res => res.original);\n    setFilteredFunctions(result);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2 text-tiny\">\n      <p>\n        Use SQL operations and functions to create new variable, e.g. (HR60 + HR70) / (PO60 + PO70)\n      </p>\n      <Card>\n        <CardBody>\n          <div className=\"relative h-20 w-full\">\n            <SQLEditor\n              initContent={code}\n              onChange={onSQLEditorChange}\n              theme={theme}\n              suggestKeys={suggestKeys}\n              language=\"geoda\"\n              height={100}\n              ref={editorRef}\n            />\n          </div>\n        </CardBody>\n      </Card>\n      <div className=\"flex w-full flex-col gap-1 p-1\">\n        {/* <div className=\"flex w-full flex-row gap-1\">\n          {DUCKDB_OPERATORS.slice(0, 9).map((op, index) => (\n            <Tooltip content={op.description} key={index}>\n              <Button size=\"sm\" className=\"h-6 w-4 min-w-1\">\n                {op.name}\n              </Button>\n            </Tooltip>\n          ))}\n        </div> */}\n        <Input\n          label=\"\"\n          placeholder=\"Type to search avaiable duckdb SQL function...\"\n          startContent={\n            <SearchIcon className=\"pointer-events-none mb-0.5 flex-shrink-0 text-black/50 text-slate-400 dark:text-white/90\" />\n          }\n          size=\"sm\"\n          onValueChange={onSearchFunction}\n        />\n        <div className=\"w-full\">\n          <ScrollShadow className=\"h-[100px] w-full p-1\" size={10}>\n            <Table\n              hideHeader\n              aria-label=\"Duckdb function\"\n              removeWrapper\n              isStriped\n              isCompact\n              radius=\"none\"\n              selectionMode=\"single\"\n              onRowAction={onRowClick}\n            >\n              <TableHeader>\n                <TableColumn width={20} maxWidth={20}>\n                  NAME\n                </TableColumn>\n                <TableColumn>DESCRIPTION</TableColumn>\n              </TableHeader>\n              <TableBody>\n                {filteredFunctions.map((func, index) => (\n                  <TableRow key={index}>\n                    <TableCell className=\"text-tiny text-default-500\">{func.name}</TableCell>\n                    <TableCell className=\"text-tiny text-default-500\">{func.description}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </ScrollShadow>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * Compute spatial lag of a list of values based on a list of neighbors and weights.\n * @param values The numeric values to compute spatial lag for.\n * @param neighbors The list of neighbors for each value.\n * @param weights The weight values for each neighbor.\n * @param useSelfNeighbor The flag to include self as a neighbor.\n * @param rowStandardize The flag to row standardize the spatial lag.\n * @returns The spatial lag values.\n */\n// eslint-disable-next-line max-statements, complexity\nexport function spatialLag(\n  values: number[],\n  neighbors: number[][],\n  rowStandardize = true,\n  weights?: number[][],\n  useSelfNeighbor?: boolean\n): number[] {\n  const n = values.length;\n  const isBinaryWeights = weights === undefined;\n\n  const result = new Array(n).fill(0);\n  // for each observation\n  for (let i = 0; i < n; i++) {\n    let lag = 0;\n    let numOfNbrs = 0;\n    let isSelfIncluded = false;\n    // get neighbors of observation i\n    const nn = neighbors[i];\n    // for each neighbor\n    for (let j = 0; j < nn.length; j++) {\n      // skip self\n      if (i === nn[j]) {\n        isSelfIncluded = true;\n        continue;\n      }\n      if (isBinaryWeights) {\n        lag += values[nn[j]];\n        numOfNbrs += 1;\n      } else {\n        lag += values[nn[j]] * weights[i][j];\n        numOfNbrs += weights[i][j];\n      }\n    }\n    // compute spatial lag\n    if (isBinaryWeights) {\n      // contiguity weights\n      if (useSelfNeighbor) {\n        lag += values[i];\n        numOfNbrs += 1;\n      }\n      if (rowStandardize) {\n        lag = numOfNbrs > 0 ? lag / numOfNbrs : 0;\n      }\n    } else {\n      // inverse or kernel weights\n      if (rowStandardize) {\n        lag = numOfNbrs > 0 ? lag / numOfNbrs : 0;\n      }\n      // TODO why rowStandardize is before useSelfNeighbor?\n      if (useSelfNeighbor) {\n        // eslint-disable-next-line max-depth\n        if (isSelfIncluded) {\n          // only for kernel weights with diagonal elements\n          lag += values[i] * weights[i][nn.length];\n        } else {\n          lag += values[i];\n        }\n      }\n    }\n    result[i] = lag;\n  }\n  return result;\n}\n\n/**\n * Compute the median spatial lag of a list of values based on a list of neighbors and weights using the mean function.\n * @param values The numeric values to compute spatial lag for.\n * @param neighbors The list of neighbors for each value.\n * @returns The spatial lag values.\n */\nexport function spatialLagMedian(values: number[], neighbors: number[][]): number[] {\n  const n = values.length;\n\n  const result = new Array(n).fill(0);\n  // for each observation\n  for (let i = 0; i < n; i++) {\n    // exclude self i from neighbors\n    const nn = neighbors[i].filter(j => j !== i);\n    const vals = nn.map(j => values[j]);\n    vals.sort((a, b) => a - b);\n\n    // if odd number of neighbors, return the middle value\n    // if even number of neighbors, return the average of the two middle values\n    const mid = Math.floor(nn.length / 2);\n    if (nn.length % 2 === 0) {\n      result[i] = (vals[mid - 1] + vals[mid]) / 2;\n    } else {\n      result[i] = vals[mid];\n    }\n  }\n  return result;\n}\n","import {spatialLag} from 'geoda-wasm';\nimport {VariableSelector} from '../common/variable-selector';\nimport {WeightsSelector} from '../weights/weights-management';\nimport {useSelector} from 'react-redux';\nimport {GeoDaState} from '@/store';\nimport {getColumnDataFromKeplerDataset} from '@/utils/data-utils';\nimport {useState} from 'react';\nimport KeplerTable from '@kepler.gl/table';\n\nexport type SpatialLagValueProps = {\n  tableName: string;\n  keplerDataset: KeplerTable;\n  setValues: (values: unknown | unknown[]) => void;\n};\n\n/**\n * The react component for spatial lag value\n */\nexport function SpatialLagValueComponent({keplerDataset, setValues}: SpatialLagValueProps) {\n  const weights = useSelector((state: GeoDaState) => state.root.weights);\n\n  const [variableValues, setVariableValues] = useState<number[] | null>(null);\n  const [neighbors, setNeighbors] = useState<number[][] | undefined>(weights?.[0]?.weights);\n\n  // update values when variableValues and neighbors change\n  const updateValues = (variableValues?: number[], selectedWeights?: number[][]) => {\n    if (variableValues && selectedWeights) {\n      const lagValues = spatialLag(variableValues, selectedWeights);\n      setValues(lagValues);\n    }\n  };\n\n  // handle variable selection change\n  const onVariableSelectionChange = (columnName: string) => {\n    // get values from selected variable\n    const values = getColumnDataFromKeplerDataset(columnName, keplerDataset);\n    setVariableValues(values);\n    if (neighbors) {\n      updateValues(values, neighbors);\n    }\n  };\n\n  // handle weights selection change\n  const onWeightsSelectionChange = (id: string) => {\n    const selectedW = weights.find(w => w.weightsMeta.id === id);\n    if (selectedW) {\n      setNeighbors(selectedW.weights);\n      if (variableValues) {\n        updateValues(variableValues, selectedW.weights);\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <VariableSelector setVariable={onVariableSelectionChange} />\n      <WeightsSelector weights={weights} onSelectWeights={onWeightsSelectionChange} />\n    </div>\n  );\n}\n","import {RatesOptions, calculateRates} from 'geoda-wasm';\nimport {Select, SelectItem, Selection} from '@nextui-org/react';\nimport {VariableSelector} from './variable-selector';\nimport {useState} from 'react';\nimport {WeightsSelector} from '../weights/weights-management';\nimport {useSelector} from 'react-redux';\nimport {GeoDaState} from '@/store';\nimport {getColumnDataFromKeplerDataset} from '@/utils/data-utils';\nimport KeplerTable from '@kepler.gl/table';\n\nexport type RateValueProps = {\n  tableName: string;\n  keplerDataset: KeplerTable;\n  // call back function to handle values and label change\n  onValuesChange: (values: unknown | unknown[], label: string) => void;\n};\n\nexport function RateValueComponent({keplerDataset, onValuesChange}: RateValueProps) {\n  const weights = useSelector((state: GeoDaState) => state.root.weights);\n\n  const [method, setMethod] = useState(RatesOptions.RawRates);\n  const [neighbors, setNeighbors] = useState<number[][] | undefined>(weights?.[0]?.weights);\n  const [eventValues, setEventValues] = useState<number[] | null>(null);\n  const [baseValues, setBaseValues] = useState<number[] | null>(null);\n  const [eventVariableName, setEventVariableName] = useState<string | undefined>(undefined);\n  const [baseVariableName, setBaseVariableName] = useState<string | undefined>(undefined);\n\n  const updateValues = (\n    eventVariable?: string,\n    eventValues?: number[],\n    baseVariable?: string,\n    baseValues?: number[],\n    neighbors?: number[][]\n  ) => {\n    if (eventValues && baseValues && (!method.startsWith('Spatial') || neighbors)) {\n      const rateValues = calculateRates({eventValues, baseValues, method, neighbors});\n      const label = `${method}_${eventVariable}_${baseVariable}`.replace(/\\s/g, '_');\n      onValuesChange(rateValues, label);\n    }\n  };\n\n  const onEventVariableChange = (variable: string) => {\n    setEventVariableName(variable);\n    // get values from event variable\n    const values = getColumnDataFromKeplerDataset(variable, keplerDataset);\n    setEventValues(values);\n    if (baseValues && (!method.startsWith('Spatial') || neighbors)) {\n      updateValues(variable, values, baseVariableName, baseValues, neighbors);\n    }\n  };\n\n  const onBaseVariableChange = (variable: string) => {\n    setBaseVariableName(variable);\n    // get values from base variable\n    const values = getColumnDataFromKeplerDataset(variable, keplerDataset);\n    setBaseValues(values);\n    if (eventValues && (!method.startsWith('Spatial') || neighbors)) {\n      updateValues(eventVariableName, eventValues, variable, values, neighbors);\n    }\n  };\n\n  const onMethodChange = (keys: Selection) => {\n    // @ts-expect-error - TS doesn't know that keys is a Selection\n    const selectedMethod = keys.currentKey;\n    setMethod(selectedMethod);\n    if (eventValues && baseValues && neighbors) {\n      updateValues(eventVariableName, eventValues, baseVariableName, baseValues, neighbors);\n    }\n  };\n\n  // handle weights selection change\n  const onWeightsSelectionChange = (id: string) => {\n    const selectedW = weights.find(w => w.weightsMeta.id === id);\n    if (selectedW) {\n      setNeighbors(selectedW.weights);\n      if (eventValues && baseValues) {\n        updateValues(\n          eventVariableName,\n          eventValues,\n          baseVariableName,\n          baseValues,\n          selectedW.weights\n        );\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <Select\n        label=\"Method\"\n        size=\"sm\"\n        onSelectionChange={onMethodChange}\n        defaultSelectedKeys={[Object.values(RatesOptions)[0]]}\n      >\n        {Object.values(RatesOptions).map(option => (\n          <SelectItem key={option} value={option}>\n            {option}\n          </SelectItem>\n        ))}\n      </Select>\n\n      <VariableSelector\n        defaultVariable={eventVariableName}\n        setVariable={onEventVariableChange}\n        label=\"Event Variable\"\n        size=\"sm\"\n      />\n      <VariableSelector\n        defaultVariable={baseVariableName}\n        setVariable={onBaseVariableChange}\n        label=\"Base Variable\"\n        size=\"sm\"\n      />\n      {method.startsWith('Spatial') && (\n        <WeightsSelector weights={weights} onSelectWeights={onWeightsSelectionChange} />\n      )}\n    </div>\n  );\n}\n","import {\n  Input,\n  Card,\n  CardBody,\n  Tabs,\n  Tab,\n  Select,\n  SelectItem,\n  Selection,\n  CardHeader\n} from '@nextui-org/react';\nimport {Key, useRef, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {ALL_FIELD_TYPES} from '@kepler.gl/constants';\nimport {\n  addKeplerColumn,\n  generateSQLUpdateColumn,\n  validataColumnType,\n  validateColumnName\n} from '@/utils/table-utils';\nimport {useDuckDB} from '@/hooks/use-duckdb';\nimport {GeoDaState} from '@/store';\nimport {DefaultValueComponent} from './column-default-component';\nimport {PreviewDataTable} from './preview-data-table';\nimport {TableVariableValueComponent} from './column-variable-component';\nimport {SQL_KEYWORDS} from '@/constants';\nimport {SQLEditor, SQLEditorRefProps} from './sql-editor';\nimport {SpatialLagValueComponent} from './column-spatial-lag-component';\nimport {RateValueComponent} from '../common/rate-value-component';\nimport {CreateButton} from '../common/create-button';\nimport {addTableColumn} from '@kepler.gl/actions';\nimport {DatasetSelector} from '../common/dataset-selector';\nimport KeplerTable from '@kepler.gl/table';\n\nexport function AddColumn({\n  datasetId,\n  setDatasetId,\n  keplerDataset,\n  tableName\n}: {\n  datasetId: string;\n  setDatasetId: (datasetId: string) => void;\n  keplerDataset: KeplerTable;\n  tableName: string;\n}) {\n  const [columnName, setColumnName] = useState('');\n  const [columnType, setColumnType] = useState<string>(ALL_FIELD_TYPES.real);\n  const [values, setValues] = useState<unknown | unknown[]>(null);\n  const [previewTab, setPreviewTab] = useState('preview-table');\n\n  const {addColumn, addColumnWithValues} = useDuckDB();\n  const dispatch = useDispatch();\n  const editorRef = useRef<SQLEditorRefProps>(null);\n\n  const theme = useSelector((state: GeoDaState) => state.root.uiState.theme);\n\n  const numberOfRows = keplerDataset?.dataContainer.numRows() || 0;\n  const suggestKeys = [...(keplerDataset?.fields.map(field => field.name) || []), ...SQL_KEYWORDS];\n\n  // update SQL code when column name, column type or values change\n  const initialCode = generateSQLUpdateColumn({\n    tableName,\n    columnName,\n    columnType,\n    values\n  });\n  const [code, setCode] = useState(initialCode);\n  if (code !== initialCode) {\n    // don't update unnecessarily\n    setCode(initialCode);\n  }\n\n  // check if column name already exists\n  const isColumnNameExists =\n    keplerDataset?.fields.find(field => field.name === columnName) !== undefined;\n  const [columnNameError, setColumnNameError] = useState(isColumnNameExists);\n\n  // check if add column button is valid\n  const isAddColumnButtonValid =\n    datasetId &&\n    datasetId.length > 0 &&\n    validateColumnName(columnName) &&\n    validataColumnType(columnType);\n\n  // on SQL editor change\n  const onSQLEditorChange = (value: string | undefined) => {\n    if (value) {\n      setCode(value);\n    }\n  };\n\n  // handle column name change\n  const onColumnNameChange = (value: string) => {\n    // if column name is empty, recreate code using generateSQLUpdateColumn\n    if (columnName === '') {\n      setCode(\n        generateSQLUpdateColumn({\n          tableName,\n          columnName: value,\n          columnType,\n          values\n        })\n      );\n    } else {\n      // replace old column name with new column name in code state\n      setCode(code.replace(columnName, value));\n    }\n    setColumnName(value);\n    setColumnNameError(keplerDataset?.fields.find(field => field.name === value) !== undefined);\n  };\n\n  // handle column type change\n  const onDataTypeSelectionChange = (keys: Selection) => {\n    // check if keys is type of Set\n    if (keys instanceof Set) {\n      const colType = keys.values().next().value as string;\n      setColumnType(colType);\n    }\n  };\n\n  // handle preview selection change\n  const onPreviewSelectionChange = (key: Key) => {\n    setPreviewTab(key as string);\n  };\n\n  const onRateValuesChange = (values: unknown | unknown[]) => {\n    setValues(values);\n  };\n\n  // handle add column\n  const handleAddColumnClick = () => {\n    // add column to duckdb\n    if (Array.isArray(values)) {\n      // check if values are array of string\n      const isStringArray = values.some(v => typeof v === 'string');\n      addColumnWithValues({\n        tableName,\n        columnName,\n        columnValues: values,\n        columnType: isStringArray ? 'VARCHAR' : 'NUMERIC'\n      });\n    } else {\n      addColumn(code);\n    }\n\n    // add column to kepler.gl\n    if (keplerDataset) {\n      const {newField, values: columnData} = addKeplerColumn({\n        dataset: keplerDataset,\n        newFieldName: columnName,\n        fieldType: columnType,\n        columnData: values\n      });\n      dispatch(addTableColumn(keplerDataset.id, newField, columnData));\n    }\n    // reset column name\n    setColumnName('');\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <DatasetSelector datasetId={datasetId} setDatasetId={setDatasetId} />\n      <Input\n        type=\"text\"\n        label=\"Column Name\"\n        placeholder=\"Enter column name\"\n        onValueChange={onColumnNameChange}\n        isInvalid={columnName === '' || columnNameError}\n        errorMessage={columnNameError ? '* column name already exists' : ''}\n      />\n      <Select\n        label=\"Column Type\"\n        placeholder=\"Select data type\"\n        onSelectionChange={onDataTypeSelectionChange}\n        size=\"sm\"\n        className=\"text-xs\"\n        defaultSelectedKeys={[ALL_FIELD_TYPES.real]}\n      >\n        <SelectItem key=\"string\" value={ALL_FIELD_TYPES.string}>\n          String\n        </SelectItem>\n        <SelectItem key=\"integer\" value={ALL_FIELD_TYPES.integer}>\n          Integer\n        </SelectItem>\n        <SelectItem key=\"real\" value={ALL_FIELD_TYPES.real}>\n          Real\n        </SelectItem>\n      </Select>\n      <Card>\n        <CardHeader>\n          <p className=\"text-tiny\">Column Value</p>\n        </CardHeader>\n        <CardBody>\n          <Tabs aria-label=\"Select Value\" size=\"sm\" variant=\"solid\">\n            <Tab key=\"default-value\" title=\"Default Value\">\n              <DefaultValueComponent\n                numberOfRows={numberOfRows}\n                columnType={columnType}\n                setValues={setValues}\n              />\n            </Tab>\n            <Tab key=\"variable\" title=\"Variable\">\n              <TableVariableValueComponent\n                tableName={tableName}\n                keplerDataset={keplerDataset}\n                setValues={setValues}\n              />\n            </Tab>\n            <Tab key=\"spatial-lag\" title=\"Spatial Lag\">\n              <SpatialLagValueComponent\n                tableName={tableName}\n                keplerDataset={keplerDataset}\n                setValues={setValues}\n              />\n            </Tab>\n            <Tab key=\"rates\" title=\"Rates\">\n              <RateValueComponent\n                tableName={tableName}\n                keplerDataset={keplerDataset}\n                onValuesChange={onRateValuesChange}\n              />\n            </Tab>\n          </Tabs>\n        </CardBody>\n      </Card>\n      <Card className=\"mt-2\">\n        <CardBody>\n          <Tabs\n            aria-label=\"preview-and-sql\"\n            size=\"sm\"\n            selectedKey={previewTab}\n            onSelectionChange={onPreviewSelectionChange}\n          >\n            <Tab key=\"preview-table\" title=\"Column Preview\">\n              <PreviewDataTable\n                fieldName={columnName}\n                fieldType={columnType}\n                columnData={values}\n                numberOfRows={numberOfRows}\n              />\n            </Tab>\n            <Tab key=\"preview-sql\" title=\"SQL Preview\">\n              <div className=\"h-40 w-full\">\n                <SQLEditor\n                  initContent={code}\n                  onChange={onSQLEditorChange}\n                  theme={theme}\n                  suggestKeys={suggestKeys}\n                  ref={editorRef}\n                />\n              </div>\n            </Tab>\n          </Tabs>\n        </CardBody>\n      </Card>\n      <CreateButton onClick={handleAddColumnClick} isDisabled={!isAddColumnButtonValid}>\n        Add Column\n      </CreateButton>\n    </div>\n  );\n}\n","import React, {useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\nimport {Tabs, Tab, Card, CardBody} from '@nextui-org/react';\n\nimport {RightPanelContainer} from '../common/right-panel-template';\nimport {WarningBox, WarningType} from '../common/warning-box';\nimport {TableQueryComponent} from './table-query-component';\nimport {AddColumn} from './column-add-component';\nimport {selectDefaultKeplerDataset} from '@/store/selectors';\n\nconst NO_MAP_LOADED_MESSAGE = 'Please load a map first before querying and editing data.';\n\nfunction TablePanel() {\n  const intl = useIntl();\n  const [selectedTab, setSelectedTab] = useState('table-query');\n\n  const keplerDataset = useSelector(selectDefaultKeplerDataset);\n  const [datasetId, setDatasetId] = useState(keplerDataset?.id);\n  const tableName = keplerDataset?.label;\n\n  const onTabChange = (key: React.Key) => {\n    if (key === 'table-query') {\n      setSelectedTab('table-query');\n    } else {\n      setSelectedTab('table-edit');\n    }\n  };\n\n  return (\n    <RightPanelContainer\n      title={intl.formatMessage({\n        id: 'table.title',\n        defaultMessage: 'Table'\n      })}\n      description={intl.formatMessage({\n        id: 'table.description',\n        defaultMessage: 'Query and edit the table data.'\n      })}\n    >\n      {!tableName || !datasetId ? (\n        <WarningBox message={NO_MAP_LOADED_MESSAGE} type={WarningType.WARNING} />\n      ) : (\n        <div className=\"h-full overflow-y-auto  p-1\">\n          <Tabs\n            aria-label=\"Options\"\n            variant=\"solid\"\n            color=\"danger\"\n            classNames={{}}\n            size=\"md\"\n            selectedKey={selectedTab}\n            onSelectionChange={onTabChange}\n          >\n            <Tab\n              key=\"table-query\"\n              title={\n                <div className=\"flex items-center space-x-2\">\n                  <span>Query</span>\n                </div>\n              }\n            >\n              <Card>\n                <CardBody>\n                  <TableQueryComponent\n                    datasetId={datasetId}\n                    setDatasetId={setDatasetId}\n                    keplerDataset={keplerDataset}\n                    tableName={tableName}\n                  />\n                </CardBody>\n              </Card>\n            </Tab>\n            <Tab\n              key=\"table-edit\"\n              title={\n                <div className=\"flex items-center space-x-2\">\n                  <span>Add Column</span>\n                </div>\n              }\n            >\n              <Card>\n                <CardBody>\n                  <AddColumn\n                    datasetId={datasetId}\n                    setDatasetId={setDatasetId}\n                    keplerDataset={keplerDataset}\n                    tableName={tableName}\n                  />\n                </CardBody>\n              </Card>\n            </Tab>\n          </Tabs>\n        </div>\n      )}\n    </RightPanelContainer>\n  );\n}\n\nexport default TablePanel;\n"],"names":["TableQueryComponent","param","datasetId","setDatasetId","keplerDataset","tableName","dispatch","useDispatch","query","useDuckDB","theme","useSelector","state","root","uiState","queryCode","table","queryBuilder","getQueryBuilder","sql","parseSQL","e","combinator","rules","concat","fields","useMemo","getQueryBuilderFields","code","setCode","useState","sqlQuery","setSqlQuery","useQueryBuilder","setUseQueryBuilder","onResetClick","setQueryCode","onQueryClick","selectedIndexes","geodaBrushLink","sourceId","dataId","filteredIndex","jsx_runtime","jsxs","div","className","jsx","DatasetSelector","Checkbox","defaultSelected","size","checked","onValueChange","value","QueryBuilder","onQueryChange","queryString","formatQuery","format","fallbackExpression","controlClassnames","Card","CardHeader","p","CardBody","MonacoEditor","language","onChange","options","minimap","enabled","Button","onClick","color","DEFAULT_VALUE_OPTIONS","label","description","DefaultValueComponent","numberOfRows","columnType","setValues","defaultValue","setDefaultValue","defaultValueOption","setDefaultValueOption","meanValue","setMeanValue","stdValue","setStdValue","selectedDefaultValueOptions","slice","Autocomplete","allowsCustomValue","placeholder","defaultItems","parseInt","parseFloat","onSelectionChange","defaultOption","generateUniformRandomData","generateNormalDistributionData","aria-label","map","item","AutocompleteItem","textValue","span","Fragment","Input","type","val","SQLEditor","forwardRef","ref","initContent","suggestKeys","height","content","setContent","editorRef","useRef","useImperativeHandle","insertText","text","current","trigger","defaultLanguage","ev","getAction","run","onMount","editor","monaco","customSuggestions","columnNames","columnName","languages","register","id","setMonarchTokensProvider","keywords","tokenizer","cases","defineTheme","base","inherit","colors","token","foreground","fontStyle","registerCompletionItemProvider","provideCompletionItems","model","position","word","getWordUntilPosition","range","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","suggestions","suggestion","kind","CompletionItemKind","Field","fixedOverflowWidgets","width","displayName","SearchIcon","props","svg","aria-hidden","fill","focusable","role","viewBox","path","d","stroke","strokeLinecap","strokeLinejoin","strokeWidth","AVAILABLE_FUNCTIONS","DUCKDB_NUMERIC_FUNCTIONS","DUCKDB_AGGREGATE_FUNCTIONS","DUCKDB_DATE_FUNCTIONS","DUCKDB_DATE_PART_FUNCTIONS","DUCKDB_STATS_FUNCTIONS","TableVariableValueComponent","filteredFunctions","setFilteredFunctions","queryValues","aggregateFuncNamesRegex","replace","func","name","join","useEffect","updatedCode","length","Array","from","field","startContent","fuzzy","extract","el","res","original","ScrollShadow","Table","hideHeader","removeWrapper","isStriped","isCompact","radius","selectionMode","onRowAction","key","TableHeader","TableColumn","maxWidth","TableBody","index","TableRow","TableCell","SpatialLagValueComponent","weights","variableValues","setVariableValues","neighbors","setNeighbors","updateValues","selectedWeights","spatialLag","values","rowStandardize","useSelfNeighbor","n","isBinaryWeights","undefined","result","i","lag","numOfNbrs","isSelfIncluded","nn","j","VariableSelector","setVariable","getColumnDataFromKeplerDataset","WeightsSelector","onSelectWeights","selectedW","find","w","weightsMeta","RateValueComponent","onValuesChange","method","setMethod","RatesOptions","RawRates","eventValues","setEventValues","baseValues","setBaseValues","eventVariableName","setEventVariableName","baseVariableName","setBaseVariableName","eventVariable","baseVariable","startsWith","calculateRates","Select","keys","currentKey","defaultSelectedKeys","Object","option","SelectItem","defaultVariable","variable","AddColumn","setColumnName","setColumnType","ALL_FIELD_TYPES","real","previewTab","setPreviewTab","addColumn","addColumnWithValues","dataContainer","numRows","SQL_KEYWORDS","initialCode","generateSQLUpdateColumn","isColumnNameExists","columnNameError","setColumnNameError","isAddColumnButtonValid","validateColumnName","validataColumnType","isInvalid","errorMessage","Set","next","string","integer","Tabs","variant","Tab","title","selectedKey","PreviewDataTable","fieldName","fieldType","columnData","CreateButton","isArray","isStringArray","some","v","columnValues","newField","addKeplerColumn","dataset","newFieldName","addTableColumn","isDisabled","table_panel","intl","useIntl","selectedTab","setSelectedTab","selectDefaultKeplerDataset","RightPanelContainer","formatMessage","defaultMessage","classNames","WarningBox","message","WarningType","WARNING"],"sourceRoot":""}